[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Template = Package['templating-runtime'].Template;\nvar Session = Package.session.Session;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-ui-unstyled\":{\"accounts_ui.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/accounts_ui.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  passwordSignupFields: function () {\n    return passwordSignupFields;\n  },\n  passwordlessSignupFields: function () {\n    return passwordlessSignupFields;\n  }\n});\n/**\n * @summary Accounts UI\n * @namespace\n * @memberOf Accounts\n * @importFromPackage accounts-base\n */\nAccounts.ui = {\n  _options: {\n    requestPermissions: Object.create(null),\n    requestOfflineToken: Object.create(null),\n    forceApprovalPrompt: Object.create(null)\n  }\n};\nvar VALID_OPTIONS = new Set().add('passwordSignupFields').add('requestPermissions').add('requestOfflineToken').add('forceApprovalPrompt').add('passwordlessSignupFields');\nvar VALID_PASSWORD_SIGNUP_FIELDS = new Set().add('USERNAME_AND_EMAIL').add('USERNAME_AND_OPTIONAL_EMAIL').add('USERNAME_ONLY').add('EMAIL_ONLY');\nfunction isValidPasswordSignupField(field) {\n  return VALID_PASSWORD_SIGNUP_FIELDS.has(field);\n}\nvar VALID_PASSWORDLESS_SIGNUP_FIELDS = new Set().add('USERNAME_AND_EMAIL').add('EMAIL_ONLY');\nfunction isValidPasswordlessSignupField(field) {\n  return VALID_PASSWORDLESS_SIGNUP_FIELDS.has(field);\n}\n\n/**\n * @summary Configure the behavior of [`{{> loginButtons}}`](#accountsui).\n * @locus Client\n * @param {Object} options\n * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\n * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\n * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\n * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', or '`EMAIL_ONLY`' (default).\n * @param {String} options.passwordlessSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`EMAIL_ONLY`' (default).\n * @importFromPackage accounts-base\n */\nAccounts.ui.config = function (options) {\n  Object.keys(options).forEach(function (key) {\n    if (!VALID_OPTIONS.has(key)) {\n      throw new Error(\"Accounts.ui.config: Invalid option: \" + key);\n    }\n  });\n  handlePasswordSignupFields(options);\n  handlePasswordlessSignupFields(options);\n  handleRequestPermissions(options);\n  handleRequestOfflineToken(options);\n  handleForceApprovalPrompt(options);\n};\nMeteor.startup(function () {\n  var _Meteor$settings$publ, _Meteor$settings$publ2;\n  var settings = (_Meteor$settings$publ = Meteor.settings.public) === null || _Meteor$settings$publ === void 0 ? void 0 : (_Meteor$settings$publ2 = _Meteor$settings$publ.packages) === null || _Meteor$settings$publ2 === void 0 ? void 0 : _Meteor$settings$publ2['accounts-ui-unstyled'];\n  if (settings) {\n    Accounts.ui.config(settings);\n  }\n});\nfunction handlePasswordlessSignupFields(options) {\n  var passwordlessSignupFields = options.passwordlessSignupFields;\n  if (passwordlessSignupFields) {\n    var reportInvalid = function () {\n      throw new Error(\"Accounts.ui.config: Invalid option for `passwordlessSignupFields`: \" + passwordlessSignupFields);\n    };\n    if (typeof passwordlessSignupFields === 'string') {\n      passwordlessSignupFields = [passwordlessSignupFields];\n    } else if (!Array.isArray(passwordlessSignupFields)) {\n      reportInvalid();\n    }\n    if (passwordlessSignupFields.every(isValidPasswordlessSignupField)) {\n      if (Accounts.ui._options.passwordlessSignupFields) {\n        throw new Error(\"Accounts.ui.config: Can't set `passwordlessSignupFields` more than once\");\n      }\n      Object.assign(Accounts.ui._options, {\n        passwordlessSignupFields: passwordlessSignupFields\n      });\n      return;\n    }\n    reportInvalid();\n  }\n}\nfunction handlePasswordSignupFields(options) {\n  var passwordSignupFields = options.passwordSignupFields;\n  if (passwordSignupFields) {\n    var reportInvalid = function () {\n      throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + passwordSignupFields);\n    };\n    if (typeof passwordSignupFields === 'string') {\n      passwordSignupFields = [passwordSignupFields];\n    } else if (!Array.isArray(passwordSignupFields)) {\n      reportInvalid();\n    }\n    if (passwordSignupFields.every(isValidPasswordSignupField)) {\n      if (Accounts.ui._options.passwordSignupFields) {\n        throw new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n      }\n      Object.assign(Accounts.ui._options, {\n        passwordSignupFields: passwordSignupFields\n      });\n      return;\n    }\n    reportInvalid();\n  }\n}\nfunction passwordSignupFields() {\n  var passwordSignupFields = Accounts.ui._options.passwordSignupFields;\n  if (Array.isArray(passwordSignupFields)) {\n    return passwordSignupFields;\n  }\n  if (typeof passwordSignupFields === 'string') {\n    return [passwordSignupFields];\n  }\n  return ['EMAIL_ONLY'];\n}\nfunction passwordlessSignupFields() {\n  var passwordlessSignupFields = Accounts.ui._options.passwordlessSignupFields;\n  if (Array.isArray(passwordlessSignupFields)) {\n    return passwordlessSignupFields;\n  }\n  if (typeof passwordlessSignupFields === 'string') {\n    return [passwordlessSignupFields];\n  }\n  return ['EMAIL_ONLY'];\n}\nfunction handleRequestPermissions(_ref) {\n  var requestPermissions = _ref.requestPermissions;\n  if (requestPermissions) {\n    Object.keys(requestPermissions).forEach(function (service) {\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n      }\n      var scope = requestPermissions[service];\n      if (!Array.isArray(scope)) {\n        throw new Error('Accounts.ui.config: Value for `requestPermissions` must be an array');\n      }\n      Accounts.ui._options.requestPermissions[service] = scope;\n    });\n  }\n}\nfunction handleRequestOfflineToken(_ref2) {\n  var requestOfflineToken = _ref2.requestOfflineToken;\n  if (requestOfflineToken) {\n    Object.keys(requestOfflineToken).forEach(function (service) {\n      if (service !== 'google') {\n        throw new Error('Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.');\n      }\n      if (Accounts.ui._options.requestOfflineToken[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n      }\n      Accounts.ui._options.requestOfflineToken[service] = requestOfflineToken[service];\n    });\n  }\n}\nfunction handleForceApprovalPrompt(_ref3) {\n  var forceApprovalPrompt = _ref3.forceApprovalPrompt;\n  if (forceApprovalPrompt) {\n    Object.keys(forceApprovalPrompt).forEach(function (service) {\n      if (service !== 'google') {\n        throw new Error('Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.');\n      }\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n      }\n      Accounts.ui._options.forceApprovalPrompt[service] = forceApprovalPrompt[service];\n    });\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.login_buttons.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/template.login_buttons.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"loginButtons\");\nTemplate[\"loginButtons\"] = new Template(\"Template.loginButtons\", (function() {\n  var view = this;\n  return HTML.DIV({\n    id: \"login-buttons\",\n    class: function() {\n      return [ \"login-buttons-dropdown-align-\", Spacebars.mustache(view.lookup(\"align\")) ];\n    }\n  }, \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"loggingInOrOut\"));\n    }, function() {\n      return [ \"\\n        \\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"dropdown\"));\n      }, function() {\n        return [ \"\\n          \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingIn\")), \"\\n        \" ];\n      }, function() {\n        return [ \"\\n          \", HTML.DIV({\n          class: \"login-buttons-with-only-one-button\"\n        }, \"\\n            \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingInSingleLoginButton\")), \"\\n          \"), \"\\n        \" ];\n      }), \"\\n      \" ];\n    }, function() {\n      return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedIn\")), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOut\")), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedIn\");\nTemplate[\"_loginButtonsLoggedIn\"] = new Template(\"Template._loginButtonsLoggedIn\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"dropdown\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedInDropdown\")), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"login-buttons-with-only-one-button\"\n    }, \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedInSingleLogoutButton\")), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedOut\");\nTemplate[\"_loginButtonsLoggedOut\"] = new Template(\"Template._loginButtonsLoggedOut\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"services\"));\n  }, function() {\n    return [ \" \\n    \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"configurationLoaded\"));\n    }, function() {\n      return [ \"\\n      \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"dropdown\"));\n      }, function() {\n        return [ \" \\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutDropdown\")), \"\\n      \" ];\n      }, function() {\n        return [ \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(view.lookup(\"singleService\"));\n        }, function() {\n          return [ \" \\n          \", HTML.DIV({\n            class: \"login-buttons-with-only-one-button\"\n          }, \"\\n            \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"loggingIn\"));\n          }, function() {\n            return [ \"\\n              \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingInSingleLoginButton\")), \"\\n            \" ];\n          }, function() {\n            return [ \"\\n              \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutSingleLoginButton\")), \"\\n            \" ];\n          }), \"\\n          \"), \"\\n        \" ];\n        }), \"\\n      \" ];\n      }), \"\\n    \" ];\n    }), \"\\n  \" ];\n  }, function() {\n    return HTML.Raw('\\n    <div class=\"no-services\">No login services configured</div>\\n  ');\n  });\n}));\n\nTemplate.__checkName(\"_loginButtonsMessages\");\nTemplate[\"_loginButtonsMessages\"] = new Template(\"Template._loginButtonsMessages\", (function() {\n  var view = this;\n  return [ Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"errorMessage\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"message error-message\"\n    }, Blaze.View(\"lookup:errorMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"errorMessage\"));\n    })), \"\\n  \" ];\n  }), \"\\n  \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"infoMessage\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"message info-message\"\n    }, Blaze.View(\"lookup:infoMessage\", function() {\n      return Spacebars.mustache(view.lookup(\"infoMessage\"));\n    })), \"\\n  \" ];\n  }) ];\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggingIn\");\nTemplate[\"_loginButtonsLoggingIn\"] = new Template(\"Template._loginButtonsLoggingIn\", (function() {\n  var view = this;\n  return [ Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingInPadding\")), HTML.Raw('\\n  <div class=\"loading\">&nbsp;</div>\\n  '), Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingInPadding\")) ];\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggingInPadding\");\nTemplate[\"_loginButtonsLoggingInPadding\"] = new Template(\"Template._loginButtonsLoggingInPadding\", (function() {\n  var view = this;\n  return Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"dropdown\"));\n  }, function() {\n    return HTML.Raw('\\n    \\n    <div class=\"login-buttons-padding\">\\n      <div class=\"login-button single-login-button\" style=\"visibility: hidden;\" id=\"login-buttons-logout\">&nbsp;</div>\\n    </div>\\n  ');\n  }, function() {\n    return HTML.Raw('\\n    \\n    <div class=\"login-buttons-padding\"></div>\\n  ');\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.login_buttons_single.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/template.login_buttons_single.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"_loginButtonsLoggedOutSingleLoginButton\");\nTemplate[\"_loginButtonsLoggedOutSingleLoginButton\"] = new Template(\"Template._loginButtonsLoggedOutSingleLoginButton\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"login-text-and-button\"\n  }, \"\\n    \", HTML.DIV({\n    class: function() {\n      return [ \"login-button single-login-button \", Blaze.Unless(function() {\n        return Spacebars.call(view.lookup(\"configured\"));\n      }, function() {\n        return \"configure-button\";\n      }) ];\n    },\n    id: function() {\n      return [ \"login-buttons-\", Spacebars.mustache(view.lookup(\"name\")) ];\n    }\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"cannotConfigure\"));\n  }, function() {\n    return [ \"\\n        \", HTML.SPAN({\n      class: \"\"\n    }, Blaze.View(\"lookup:capitalizedName\", function() {\n      return Spacebars.mustache(view.lookup(\"capitalizedName\"));\n    }), \" not configured\"), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      class: \"login-image\",\n      id: function() {\n        return [ \"login-buttons-image-\", Spacebars.mustache(view.lookup(\"name\")) ];\n      }\n    }), \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"configured\"));\n    }, function() {\n      return [ \"\\n          \", HTML.SPAN({\n        class: function() {\n          return [ \"text-besides-image sign-in-text-\", Spacebars.mustache(view.lookup(\"name\")) ];\n        }\n      }, \"Sign in with \", Blaze.View(\"lookup:capitalizedName\", function() {\n        return Spacebars.mustache(view.lookup(\"capitalizedName\"));\n      })), \"\\n        \" ];\n    }, function() {\n      return [ \"\\n            \", HTML.SPAN({\n        class: function() {\n          return [ \"text-besides-image configure-text-\", Spacebars.mustache(view.lookup(\"name\")) ];\n        }\n      }, \"Configure \", Blaze.View(\"lookup:capitalizedName\", function() {\n        return Spacebars.mustache(view.lookup(\"capitalizedName\"));\n      }), \" Login\"), \"\\n        \" ];\n    }), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggingInSingleLoginButton\");\nTemplate[\"_loginButtonsLoggingInSingleLoginButton\"] = new Template(\"Template._loginButtonsLoggingInSingleLoginButton\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"login-text-and-button\"\n  }, \"\\n    \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingIn\")), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedInSingleLogoutButton\");\nTemplate[\"_loginButtonsLoggedInSingleLogoutButton\"] = new Template(\"Template._loginButtonsLoggedInSingleLogoutButton\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"login-text-and-button\"\n  }, \"\\n    \", HTML.DIV({\n    class: \"login-display-name\"\n  }, \"\\n      \", Blaze.View(\"lookup:displayName\", function() {\n    return Spacebars.mustache(view.lookup(\"displayName\"));\n  }), \"\\n    \"), HTML.Raw('\\n    <div class=\"login-button single-login-button\" id=\"login-buttons-logout\">Sign Out</div>\\n  '));\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.login_buttons_dropdown.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/template.login_buttons_dropdown.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"_loginButtonsLoggedInDropdown\");\nTemplate[\"_loginButtonsLoggedInDropdown\"] = new Template(\"Template._loginButtonsLoggedInDropdown\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"login-link-and-dropdown-list\"\n  }, \"\\n    \", HTML.A({\n    class: \"login-link-text\",\n    id: \"login-name-link\"\n  }, \"\\n      \", Blaze.View(\"lookup:displayName\", function() {\n    return Spacebars.mustache(view.lookup(\"displayName\"));\n  }), \" ▾\\n    \"), \"\\n\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"dropdownVisible\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      id: \"login-dropdown-list\",\n      class: \"accounts-dialog\"\n    }, HTML.Raw('\\n        <a class=\"login-close-text\">Close</a>\\n        <div class=\"login-close-text-clear\"></div>\\n\\n        '), Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"inMessageOnlyFlow\"));\n    }, function() {\n      return [ \"\\n          \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), \"\\n        \" ];\n    }, function() {\n      return [ \"\\n          \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"inChangePasswordFlow\"));\n      }, function() {\n        return [ \"\\n            \", Spacebars.include(view.lookupTemplate(\"_loginButtonsChangePassword\")), \"\\n          \" ];\n      }, function() {\n        return [ \"\\n            \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedInDropdownActions\")), \"\\n          \" ];\n      }), \"\\n        \" ];\n    }), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedInDropdownActions\");\nTemplate[\"_loginButtonsLoggedInDropdownActions\"] = new Template(\"Template._loginButtonsLoggedInDropdownActions\", (function() {\n  var view = this;\n  return [ Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"allowChangingPassword\"));\n  }, function() {\n    return HTML.Raw('\\n    <div class=\"login-button\" id=\"login-buttons-open-change-password\">\\n      Change password\\n    </div>\\n  ');\n  }), HTML.Raw('\\n\\n  <div class=\"login-button\" id=\"login-buttons-logout\">\\n    Sign out\\n  </div>\\n\\n  '), Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")) ];\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedOutDropdown\");\nTemplate[\"_loginButtonsLoggedOutDropdown\"] = new Template(\"Template._loginButtonsLoggedOutDropdown\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: function() {\n      return [ \"login-link-and-dropdown-list \", Spacebars.mustache(view.lookup(\"additionalClasses\")) ];\n    }\n  }, \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"dropdownVisible\"));\n  }, function() {\n    return [ HTML.Raw('\\n      \\n      <a class=\"login-link-text\" id=\"login-sign-in-link\">Sign in ▾</a>\\n      '), HTML.DIV({\n      id: \"login-dropdown-list\",\n      class: \"accounts-dialog\"\n    }, HTML.Raw('\\n        <a class=\"login-close-text\">Close</a>\\n        '), Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"loggingIn\"));\n    }, function() {\n      return [ \"\\n          \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingIn\")), \"\\n        \" ];\n    }), HTML.Raw('\\n        <div class=\"login-close-text-clear\"></div>\\n        '), Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutAllServices\")), \"\\n      \"), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"loggingIn\"));\n    }, function() {\n      return [ \"\\n        \\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggingIn\")), \"\\n      \" ];\n    }, function() {\n      return HTML.Raw('\\n        <a class=\"login-link-text\" id=\"login-sign-in-link\">Sign in ▾</a>\\n      ');\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedOutAllServices\");\nTemplate[\"_loginButtonsLoggedOutAllServices\"] = new Template(\"Template._loginButtonsLoggedOutAllServices\", (function() {\n  var view = this;\n  return [ Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"services\"));\n  }, function() {\n    return [ \"\\n    \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"isInternalService\"));\n    }, function() {\n      return [ \"\\n      \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"isPasswordService\"));\n      }, function() {\n        return [ \"\\n        \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"hasOtherServices\"));\n        }, function() {\n          return [ \" \\n          \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutPasswordServiceSeparator\")), \"\\n        \" ];\n        }), \"\\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutPasswordService\")), \"\\n      \" ];\n      }), \"\\n      \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"isPasswordlessService\"));\n      }, function() {\n        return [ \"\\n        \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"hasPasswordService\"));\n        }, function() {\n          return HTML.Raw(\"\\n          <br>\\n        \");\n        }), \"\\n        \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"displaySeparatorForPasswordless\"));\n        }, function() {\n          return [ \" \\n          \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutPasswordServiceSeparator\")), \"\\n        \" ];\n        }), \"\\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutPasswordlessService\")), \"\\n      \" ];\n      }), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsLoggedOutSingleLoginButton\")), \"\\n    \" ];\n    }), \"\\n  \" ];\n  }), \"\\n  \", Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"hasInternalService\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), \"\\n  \" ];\n  }) ];\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedOutPasswordlessService\");\nTemplate[\"_loginButtonsLoggedOutPasswordlessService\"] = new Template(\"Template._loginButtonsLoggedOutPasswordlessService\", (function() {\n  var view = this;\n  return HTML.FORM({\n    class: \"login-form login-passwordless-form\"\n  }, \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"fields\"));\n  }, function() {\n    return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsFormField\")), \"\\n    \" ];\n  }), \"\\n\\n    \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), \"\\n\\n    \", HTML.BUTTON({\n    class: \"login-button login-button-form-submit\",\n    id: \"login-buttons-passwordless\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inPasswordlessConfirmation\"));\n  }, function() {\n    return \"\\n        Submit\\n      \";\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"inSignupFlow\"));\n    }, function() {\n      return \"\\n          Create account\\n        \";\n    }, function() {\n      return \"\\n          Get login code\\n        \";\n    }), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inLoginFlow\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"showCreateAccountLink\"));\n    }, function() {\n      return HTML.Raw('\\n        <div class=\"additional-link-container\">\\n          <a id=\"signup-link\" class=\"additional-link\">Create account</a>\\n        </div>\\n      ');\n    }), \"\\n\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"inPasswordlessConfirmation\"));\n    }, function() {\n      return HTML.Raw('\\n        <div class=\"additional-link-container\">\\n          <a id=\"resend-passwordless-code\" class=\"additional-link\">Re-send code</a>\\n        </div>\\n      ');\n    }), \"\\n    \" ];\n  }), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inSignupFlow\"));\n  }, function() {\n    return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsBackToLoginLink\")), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedOutPasswordServiceSeparator\");\nTemplate[\"_loginButtonsLoggedOutPasswordServiceSeparator\"] = new Template(\"Template._loginButtonsLoggedOutPasswordServiceSeparator\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"or\">\\n    <span class=\"hline\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\n    <span class=\"or-text\">or</span>\\n    <span class=\"hline\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\n  </div>');\n}));\n\nTemplate.__checkName(\"_loginButtonsLoggedOutPasswordService\");\nTemplate[\"_loginButtonsLoggedOutPasswordService\"] = new Template(\"Template._loginButtonsLoggedOutPasswordService\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inForgotPasswordFlow\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"_forgotPasswordForm\")), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", HTML.FORM({\n      class: \"login-form login-password-form\"\n    }, \"\\n      \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"fields\"));\n    }, function() {\n      return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsFormField\")), \"\\n      \" ];\n    }), \"\\n\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), \"\\n\\n      \", HTML.BUTTON({\n      class: \"login-button login-button-form-submit\",\n      id: \"login-buttons-password\"\n    }, \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"inSignupFlow\"));\n    }, function() {\n      return \"\\n          Create account\\n        \";\n    }, function() {\n      return \"\\n          Sign in\\n        \";\n    }), \"\\n      \"), \"\\n\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"inLoginFlow\"));\n    }, function() {\n      return [ \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"showCreateAccountLink\"));\n      }, function() {\n        return HTML.Raw('\\n          <div class=\"additional-link-container\">\\n            <a id=\"signup-link\" class=\"additional-link\">Create account</a>\\n          </div>\\n        ');\n      }), \"\\n\\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"showForgotPasswordLink\"));\n      }, function() {\n        return HTML.Raw('\\n          <div class=\"additional-link-container\">\\n            <a id=\"forgot-password-link\" class=\"additional-link\">Forgot password</a>\\n          </div>\\n        ');\n      }), \"\\n      \" ];\n    }), \"\\n\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"inSignupFlow\"));\n    }, function() {\n      return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"_loginButtonsBackToLoginLink\")), \"\\n      \" ];\n    }), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_forgotPasswordForm\");\nTemplate[\"_forgotPasswordForm\"] = new Template(\"Template._forgotPasswordForm\", (function() {\n  var view = this;\n  return HTML.FORM({\n    class: \"login-form\"\n  }, HTML.Raw('\\n    <div id=\"forgot-password-email-label-and-input\"> \\n      <label id=\"forgot-password-email-label\" for=\"forgot-password-email\">Email</label>\\n      <input id=\"forgot-password-email\" type=\"email\" autocomplete=\"email\">\\n    </div>\\n\\n    '), Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), HTML.Raw('\\n\\n    <div class=\"login-button login-button-form-submit\" id=\"login-buttons-forgot-password\">\\n      Reset password\\n    </div>\\n\\n    '), Spacebars.include(view.lookupTemplate(\"_loginButtonsBackToLoginLink\")), \"\\n  \");\n}));\n\nTemplate.__checkName(\"_loginButtonsBackToLoginLink\");\nTemplate[\"_loginButtonsBackToLoginLink\"] = new Template(\"Template._loginButtonsBackToLoginLink\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"additional-link-container\">\\n    <a id=\"back-to-login-link\" class=\"additional-link\">Sign in</a>\\n  </div>');\n}));\n\nTemplate.__checkName(\"_loginButtonsFormField\");\nTemplate[\"_loginButtonsFormField\"] = new Template(\"Template._loginButtonsFormField\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"visible\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      id: function() {\n        return [ \"login-\", Spacebars.mustache(view.lookup(\"fieldName\")), \"-label-and-input\" ];\n      },\n      style: function() {\n        return Spacebars.mustache(view.lookup(\"fieldStyle\"));\n      }\n    }, \"\\n      \", HTML.LABEL({\n      id: function() {\n        return [ \"login-\", Spacebars.mustache(view.lookup(\"fieldName\")), \"-label\" ];\n      },\n      for: function() {\n        return [ \"login-\", Spacebars.mustache(view.lookup(\"fieldName\")) ];\n      }\n    }, \"\\n        \", Blaze.View(\"lookup:fieldLabel\", function() {\n      return Spacebars.mustache(view.lookup(\"fieldLabel\"));\n    }), \"\\n      \"), \"\\n      \", HTML.INPUT({\n      id: function() {\n        return [ \"login-\", Spacebars.mustache(view.lookup(\"fieldName\")) ];\n      },\n      type: function() {\n        return Spacebars.mustache(view.lookup(\"inputType\"));\n      },\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"fieldValue\"));\n      },\n      autocomplete: function() {\n        return Spacebars.mustache(view.lookup(\"autocomplete\"));\n      }\n    }), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_loginButtonsChangePassword\");\nTemplate[\"_loginButtonsChangePassword\"] = new Template(\"Template._loginButtonsChangePassword\", (function() {\n  var view = this;\n  return HTML.FORM({\n    class: \"login-form\"\n  }, \"\\n\\n    \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"fields\"));\n  }, function() {\n    return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsFormField\")), \"\\n    \" ];\n  }), \"\\n\\n    \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), HTML.Raw('\\n\\n    <div class=\"login-button login-button-form-submit\" id=\"login-buttons-do-change-password\">\\n      Change password\\n    </div>\\n  '));\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.login_buttons_dialogs.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/template.login_buttons_dialogs.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.body.addContent((function() {\n  var view = this;\n  return [ Spacebars.include(view.lookupTemplate(\"_resetPasswordDialog\")), \"\\n  \", Spacebars.include(view.lookupTemplate(\"_justResetPasswordDialog\")), \"\\n  \", Spacebars.include(view.lookupTemplate(\"_enrollAccountDialog\")), \"\\n  \", Spacebars.include(view.lookupTemplate(\"_justVerifiedEmailDialog\")), \"\\n  \", Spacebars.include(view.lookupTemplate(\"_configureLoginServiceDialog\")), \"\\n  \", Spacebars.include(view.lookupTemplate(\"_configureLoginOnDesktopDialog\")), \"\\n\\n  \\n  \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessagesDialog\")) ];\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"_resetPasswordDialog\");\nTemplate[\"_resetPasswordDialog\"] = new Template(\"Template._resetPasswordDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inResetPasswordFlow\"));\n  }, function() {\n    return [ HTML.Raw('\\n    <div class=\"hide-background\"></div>\\n\\n    '), HTML.FORM({\n      class: \"accounts-dialog accounts-centered-dialog\"\n    }, HTML.Raw('\\n      <label id=\"reset-password-username-email-label\" for=\"reset-password-username-email\" style=\"display: none;\">\\n        Username or email\\n      </label> \\n\\n      '), HTML.DIV({\n      class: \"reset-password-username-email-wrapper\",\n      style: \"display: none;\"\n    }, \"\\n        \", HTML.INPUT({\n      id: \"reset-password-username-email\",\n      type: \"text\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"displayName\"));\n      },\n      autocomplete: \"username email\",\n      disabled: \"\"\n    }), \"\\n      \"), HTML.Raw('\\n\\n      <label id=\"reset-password-new-password-label\" for=\"reset-password-new-password\">\\n        New password\\n      </label>      \\n\\n      <div class=\"reset-password-new-password-wrapper\">\\n        <input id=\"reset-password-new-password\" type=\"password\" autocomplete=\"new-password\">\\n      </div>\\n\\n      '), Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), HTML.Raw('\\n\\n      <div class=\"login-button login-button-form-submit\" id=\"login-buttons-reset-password-button\">\\n        Set password\\n      </div>\\n\\n      <a class=\"accounts-close\" id=\"login-buttons-cancel-reset-password\">&times;</a>\\n    ')), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_justResetPasswordDialog\");\nTemplate[\"_justResetPasswordDialog\"] = new Template(\"Template._justResetPasswordDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"visible\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"accounts-dialog accounts-centered-dialog\"\n    }, \"\\n      Password reset.\\n      You are now logged in as \", Blaze.View(\"lookup:displayName\", function() {\n      return Spacebars.mustache(view.lookup(\"displayName\"));\n    }), HTML.Raw('.\\n      <div class=\"login-button\" id=\"just-verified-dismiss-button\">Dismiss</div>\\n    ')), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_enrollAccountDialog\");\nTemplate[\"_enrollAccountDialog\"] = new Template(\"Template._enrollAccountDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inEnrollAccountFlow\"));\n  }, function() {\n    return [ HTML.Raw('\\n    <div class=\"hide-background\"></div>\\n\\n    '), HTML.FORM({\n      class: \"accounts-dialog accounts-centered-dialog\"\n    }, HTML.Raw('\\n      <label id=\"enroll-account-username-email-label\" for=\"enroll-account-username-email\" style=\"display: none;\">\\n        Username or email\\n      </label> \\n\\n      '), HTML.DIV({\n      class: \"enroll-account-username-email-wrapper\",\n      style: \"display: none;\"\n    }, \"\\n        \", HTML.INPUT({\n      id: \"enroll-account-username-email\",\n      type: \"text\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"displayName\"));\n      },\n      autocomplete: \"username email\",\n      disabled: \"\"\n    }), \"\\n      \"), HTML.Raw('\\n\\n      <label id=\"enroll-account-password-label\" for=\"enroll-account-password\">\\n        Choose a password\\n      </label>\\n\\n      <div class=\"enroll-account-password-wrapper\">\\n        <input id=\"enroll-account-password\" type=\"password\" autocomplete=\"new-password\">\\n      </div>\\n\\n      '), Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), HTML.Raw('\\n\\n      <div class=\"login-button login-button-form-submit\" id=\"login-buttons-enroll-account-button\">\\n        Create account\\n      </div>\\n\\n      <a class=\"accounts-close\" id=\"login-buttons-cancel-enroll-account\">&times;</a>\\n    ')), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_justVerifiedEmailDialog\");\nTemplate[\"_justVerifiedEmailDialog\"] = new Template(\"Template._justVerifiedEmailDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"visible\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"accounts-dialog accounts-centered-dialog\"\n    }, \"\\n      Email verified.\\n      You are now logged in as \", Blaze.View(\"lookup:displayName\", function() {\n      return Spacebars.mustache(view.lookup(\"displayName\"));\n    }), HTML.Raw('.\\n      <div class=\"login-button\" id=\"just-verified-dismiss-button\">Dismiss</div>\\n    ')), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_configureLoginServiceDialog\");\nTemplate[\"_configureLoginServiceDialog\"] = new Template(\"Template._configureLoginServiceDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"visible\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      id: \"configure-login-service-dialog\",\n      class: \"accounts-dialog accounts-centered-dialog\"\n    }, \"\\n      \", Spacebars.include(view.lookupTemplate(\"configurationSteps\")), HTML.Raw(\"\\n\\n      <p>\\n        Now, copy over some details.\\n      </p>\\n      \"), HTML.P(\"\\n        \", HTML.TABLE(HTML.Raw('\\n          <colgroup>\\n            <col span=\"1\" class=\"configuration_labels\">\\n            <col span=\"1\" class=\"configuration_inputs\">\\n          </colgroup>\\n          '), Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"configurationFields\"));\n    }, function() {\n      return [ \"\\n            \", HTML.TR(\"\\n              \", HTML.TD(\"\\n                \", HTML.LABEL({\n        for: function() {\n          return [ \"configure-login-service-dialog-\", Spacebars.mustache(view.lookup(\"property\")) ];\n        }\n      }, Blaze.View(\"lookup:label\", function() {\n        return Spacebars.mustache(view.lookup(\"label\"));\n      })), \"\\n              \"), \"\\n              \", HTML.TD(\"\\n                \", HTML.INPUT({\n        id: function() {\n          return [ \"configure-login-service-dialog-\", Spacebars.mustache(view.lookup(\"property\")) ];\n        },\n        type: \"text\"\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \"), HTML.Raw('\\n      <p class=\"new-section\">\\n        Choose the login style:\\n      </p>\\n      <p>\\n        &emsp;<input id=\"configure-login-service-dialog-popupBasedLogin\" type=\"radio\" checked=\"checked\" name=\"loginStyle\" value=\"popup\">\\n        <label for=\"configure-login-service-dialog-popupBasedLogin\">Popup-based login (recommended for most applications)</label>\\n\\n        <br>&emsp;<input id=\"configure-login-service-dialog-redirectBasedLogin\" type=\"radio\" name=\"loginStyle\" value=\"redirect\">\\n        <label for=\"configure-login-service-dialog-redirectBasedLogin\">\\n          Redirect-based login (special cases explained\\n          <a href=\"https://github.com/meteor/meteor/wiki/OAuth-for-mobile-Meteor-clients#popup-versus-redirect-flow\" target=\"_blank\">here</a>)\\n        </label>\\n      </p>\\n      '), HTML.DIV({\n      class: \"new-section\"\n    }, HTML.Raw('\\n        <div class=\"login-button configure-login-service-dismiss-button\">\\n          I\\'ll do this later\\n        </div>\\n        <a class=\"accounts-close configure-login-service-dismiss-button\">&times;</a>\\n\\n        '), HTML.DIV({\n      class: function() {\n        return [ \"login-button login-button-configure \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"saveDisabled\"));\n        }, function() {\n          return \"login-button-disabled\";\n        }) ];\n      },\n      id: \"configure-login-service-dialog-save-configuration\"\n    }, \"\\n          Save Configuration\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_loginButtonsMessagesDialog\");\nTemplate[\"_loginButtonsMessagesDialog\"] = new Template(\"Template._loginButtonsMessagesDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"visible\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"accounts-dialog accounts-centered-dialog\",\n      id: \"login-buttons-message-dialog\"\n    }, \"\\n      \", Spacebars.include(view.lookupTemplate(\"_loginButtonsMessages\")), HTML.Raw('\\n      <div class=\"login-button\" id=\"messages-dialog-dismiss-button\">Dismiss</div>\\n    ')), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"_configureLoginOnDesktopDialog\");\nTemplate[\"_configureLoginOnDesktopDialog\"] = new Template(\"Template._configureLoginOnDesktopDialog\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"visible\"));\n  }, function() {\n    return HTML.Raw('\\n    <div class=\"accounts-dialog accounts-centered-dialog\" id=\"configure-on-desktop-dialog\">\\n      <p>\\n        Please configure login on a desktop browser.\\n      </p>\\n      <div class=\"login-button\" id=\"configure-on-desktop-dismiss-button\">Dismiss</div>\\n    </div>\\n  ');\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"login_buttons_session.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/login_buttons_session.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar VALID_KEYS = ['dropdownVisible',\n// XXX consider replacing these with one key that has an enum for values.\n'inSignupFlow', 'inForgotPasswordFlow', 'inChangePasswordFlow', 'inMessageOnlyFlow', 'inPasswordlessConfirmation', 'passwordlessCodeEmail', 'errorMessage', 'infoMessage',\n// dialogs with messages (info and error)\n'resetPasswordToken', 'enrollAccountToken', 'justVerifiedEmail', 'justResetPassword', 'configureLoginServiceDialogVisible', 'configureLoginServiceDialogServiceName', 'configureLoginServiceDialogSaveDisabled', 'configureOnDesktopVisible'];\nvar validateKey = function (key) {\n  if (!VALID_KEYS.includes(key)) throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n};\nvar KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nvar set = function (key, value) {\n  validateKey(key);\n  if (['errorMessage', 'infoMessage'].includes(key)) throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n  _set(key, value);\n};\nvar _set = function (key, value) {\n  return Session.set(KEY_PREFIX + key, value);\n};\nvar get = function (key) {\n  validateKey(key);\n  return Session.get(KEY_PREFIX + key);\n};\nvar closeDropdown = function () {\n  set('inSignupFlow', false);\n  set('inForgotPasswordFlow', false);\n  set('inChangePasswordFlow', false);\n  set('inMessageOnlyFlow', false);\n  set('dropdownVisible', false);\n  resetMessages();\n};\nvar infoMessage = function (message) {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", message);\n  ensureMessageVisible();\n};\nvar errorMessage = function (message) {\n  _set(\"errorMessage\", message);\n  _set(\"infoMessage\", null);\n  ensureMessageVisible();\n};\n\n// is there a visible dialog that shows messages (info and error)\nvar isMessageDialogVisible = function () {\n  return get('resetPasswordToken') || get('enrollAccountToken') || get('justVerifiedEmail');\n};\n\n// ensure that somethings displaying a message (info or error) is\n// visible. If a dialog with messages is open, do nothing;\n// otherwise open the dropdown.\n//\n// Notably this doesn't matter when only displaying a single login\n// button since then we have an explicit message dialog\n// (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n// this case.\nvar ensureMessageVisible = function () {\n  if (!isMessageDialogVisible()) set(\"dropdownVisible\", true);\n};\nvar resetMessages = function () {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", null);\n};\nvar configureService = function (name) {\n  if (Meteor.isCordova) {\n    set('configureOnDesktopVisible', true);\n  } else {\n    set('configureLoginServiceDialogVisible', true);\n    set('configureLoginServiceDialogServiceName', name);\n    set('configureLoginServiceDialogSaveDisabled', true);\n  }\n};\nAccounts._loginButtonsSession = {\n  set: set,\n  _set: _set,\n  get: get,\n  closeDropdown: closeDropdown,\n  infoMessage: infoMessage,\n  errorMessage: errorMessage,\n  isMessageDialogVisible: isMessageDialogVisible,\n  ensureMessageVisible: ensureMessageVisible,\n  resetMessages: resetMessages,\n  configureService: configureService\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"login_buttons.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/login_buttons.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  displayName: function () {\n    return displayName;\n  },\n  getLoginServices: function () {\n    return getLoginServices;\n  },\n  hasPasswordService: function () {\n    return hasPasswordService;\n  },\n  hasPasswordlessService: function () {\n    return hasPasswordlessService;\n  },\n  dropdown: function () {\n    return dropdown;\n  },\n  validateUsername: function () {\n    return validateUsername;\n  },\n  validateEmail: function () {\n    return validateEmail;\n  },\n  validatePassword: function () {\n    return validatePassword;\n  }\n});\nvar passwordSignupFields;\nmodule.link(\"./accounts_ui.js\", {\n  passwordSignupFields: function (v) {\n    passwordSignupFields = v;\n  }\n}, 0);\n// for convenience\nvar loginButtonsSession = Accounts._loginButtonsSession;\n\n// shared between dropdown and single mode\nTemplate.loginButtons.events({\n  'click #login-buttons-logout': function () {\n    return Meteor.logout(function () {\n      return loginButtonsSession.closeDropdown();\n    });\n  }\n});\nTemplate.registerHelper('loginButtons', function () {\n  throw new Error(\"Use {{> loginButtons}} instead of {{loginButtons}}\");\n});\n\n//\n// helpers\n//\n\nvar displayName = function () {\n  var user = Meteor.user();\n  if (!user) return '';\n  if (user.profile && user.profile.name) return user.profile.name;\n  if (user.username) return user.username;\n  if (user.emails && user.emails[0] && user.emails[0].address) return user.emails[0].address;\n  return '';\n};\nvar getLoginServices = function () {\n  // First look for OAuth services.\n  var services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\n\n  // Be equally kind to all login services. This also preserves\n  // backwards-compatibility. (But maybe order should be\n  // configurable?)\n  services.sort();\n\n  // Add password, if it's there; it must come last.\n  if (hasPasswordService()) services.push('password');\n  if (hasPasswordlessService()) services.push('passwordless');\n  return services.map(function (name) {\n    return {\n      name: name\n    };\n  });\n};\nvar hasPasswordService = function () {\n  return !!Package['accounts-password'];\n};\nvar hasPasswordlessService = function () {\n  return !!Package['accounts-passwordless'];\n};\nvar dropdown = function () {\n  return hasPasswordService() || hasPasswordlessService() || getLoginServices().length > 1;\n};\nvar validateUsername = function (username) {\n  if (username.length >= 3) {\n    return true;\n  } else {\n    loginButtonsSession.errorMessage(\"Username must be at least 3 characters long\");\n    return false;\n  }\n};\nvar validateEmail = function (email) {\n  if (passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '') return true;\n  if (email.includes('@')) {\n    return true;\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n    return false;\n  }\n};\nvar validatePassword = function (password) {\n  if (password.length >= 6) {\n    return true;\n  } else {\n    loginButtonsSession.errorMessage(\"Password must be at least 6 characters long\");\n    return false;\n  }\n};\n//\n// loginButtonLoggedOut template\n//\n\nTemplate._loginButtonsLoggedOut.helpers({\n  dropdown: dropdown,\n  services: getLoginServices,\n  singleService: function () {\n    var services = getLoginServices();\n    if (services.length !== 1) throw new Error(\"Shouldn't be rendering this template with more than one configured service\");\n    return services[0];\n  },\n  configurationLoaded: function () {\n    return Accounts.loginServicesConfigured();\n  }\n});\n\n//\n// loginButtonsLoggedIn template\n//\n\n// decide whether we should show a dropdown rather than a row of\n// buttons\nTemplate._loginButtonsLoggedIn.helpers({\n  dropdown: dropdown\n});\n\n//\n// loginButtonsLoggedInSingleLogoutButton template\n//\n\nTemplate._loginButtonsLoggedInSingleLogoutButton.helpers({\n  displayName: displayName\n});\n\n//\n// loginButtonsMessage template\n//\n\nTemplate._loginButtonsMessages.helpers({\n  errorMessage: function () {\n    return loginButtonsSession.get('errorMessage');\n  }\n});\nTemplate._loginButtonsMessages.helpers({\n  infoMessage: function () {\n    return loginButtonsSession.get('infoMessage');\n  }\n});\n\n//\n// loginButtonsLoggingInPadding template\n//\n\nTemplate._loginButtonsLoggingInPadding.helpers({\n  dropdown: dropdown\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"login_buttons_single.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/login_buttons_single.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getLoginServices;\nmodule.link(\"./login_buttons.js\", {\n  getLoginServices: function (v) {\n    getLoginServices = v;\n  }\n}, 0);\n// for convenience\nvar loginButtonsSession = Accounts._loginButtonsSession;\nvar loginResultCallback = function (serviceName, err) {\n  if (!err) {\n    loginButtonsSession.closeDropdown();\n  } else if (err instanceof Accounts.LoginCancelledError) {\n    // do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\n    if (Template._configureLoginServiceDialog.templateForService(serviceName)) {\n      loginButtonsSession.configureService(serviceName);\n    } else {\n      loginButtonsSession.errorMessage(\"No configuration for \" + capitalize(serviceName) + \".\\n\" + \"Use `ServiceConfiguration` to configure it or \" + (\"install the `\" + serviceName + \"-config-ui` package.\"));\n    }\n  } else {\n    loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n};\n\n// In the login redirect flow, we'll have the result of the login\n// attempt at page load time when we're redirected back to the\n// application.  Register a callback to update the UI (i.e. to close\n// the dialog on a successful login or display the error on a failed\n// login).\n//\nAccounts.onPageLoadLogin(function (attemptInfo) {\n  // Ignore if we have a left over login attempt for a service that is no longer registered.\n  if (getLoginServices().map(function (service) {\n    return service.name;\n  }).includes(attemptInfo.type)) loginResultCallback(attemptInfo.type, attemptInfo.error);\n});\nTemplate._loginButtonsLoggedOutSingleLoginButton.events({\n  'click .login-button': function () {\n    var serviceName = this.name;\n    loginButtonsSession.resetMessages();\n\n    // XXX Service providers should be able to specify their\n    // `Meteor.loginWithX` method name.\n    var loginWithService = Meteor[\"loginWith\" + (serviceName === 'meteor-developer' ? 'MeteorDeveloperAccount' : capitalize(serviceName))];\n    var options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName]) options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName]) options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName]) options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n    loginWithService(options, function (err) {\n      loginResultCallback(serviceName, err);\n    });\n  }\n});\nTemplate._loginButtonsLoggedOutSingleLoginButton.helpers({\n  // not configured and has no config UI\n  cannotConfigure: function () {\n    return !ServiceConfiguration.configurations.findOne({\n      service: this.name\n    }) && !Template._configureLoginServiceDialog.templateForService(this.name);\n  },\n  configured: function () {\n    return !!ServiceConfiguration.configurations.findOne({\n      service: this.name\n    });\n  },\n  capitalizedName: function () {\n    if (this.name === 'github')\n      // XXX we should allow service packages to set their capitalized name\n      return 'GitHub';else if (this.name === 'meteor-developer') return 'Meteor';else return capitalize(this.name);\n  }\n});\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nvar capitalize = function (input) {\n  var str = input == null ? '' : String(input);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"login_buttons_dropdown.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/login_buttons_dropdown.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar passwordlessSignupFields, passwordSignupFields;\nmodule.link(\"./accounts_ui.js\", {\n  passwordlessSignupFields: function (v) {\n    passwordlessSignupFields = v;\n  },\n  passwordSignupFields: function (v) {\n    passwordSignupFields = v;\n  }\n}, 0);\nvar displayName, getLoginServices, hasPasswordService, hasPasswordlessService, validateUsername, validateEmail, validatePassword;\nmodule.link(\"./login_buttons.js\", {\n  displayName: function (v) {\n    displayName = v;\n  },\n  getLoginServices: function (v) {\n    getLoginServices = v;\n  },\n  hasPasswordService: function (v) {\n    hasPasswordService = v;\n  },\n  hasPasswordlessService: function (v) {\n    hasPasswordlessService = v;\n  },\n  validateUsername: function (v) {\n    validateUsername = v;\n  },\n  validateEmail: function (v) {\n    validateEmail = v;\n  },\n  validatePassword: function (v) {\n    validatePassword = v;\n  }\n}, 1);\n// for convenience\nvar loginButtonsSession = Accounts._loginButtonsSession;\n\n//\n// helpers\n//\n\nvar elementValueById = function (id) {\n  var element = document.getElementById(id);\n  if (!element) return null;else return element.value;\n};\nvar trimmedElementValueById = function (id) {\n  var element = document.getElementById(id);\n  if (!element) return null;else return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesn't work on IE8;\n};\nvar loginOrSignup = function () {\n  if (loginButtonsSession.get('inSignupFlow')) signup();else login();\n};\nvar loginOrSignupPasswordless = function () {\n  loginButtonsSession.resetMessages();\n  if (loginButtonsSession.get('inPasswordlessConfirmation')) {\n    var token = trimmedElementValueById('login-code-passwordless');\n    Meteor.passwordlessLoginWithToken({\n      email: loginButtonsSession.get('passwordlessCodeEmail')\n    }, token, function (error) {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('inPasswordlessConfirmation', false);\n        loginButtonsSession.set('passwordlessCodeEmail', null);\n      }\n    });\n    return;\n  }\n  var email = trimmedElementValueById('login-email-passwordless');\n  var username = trimmedElementValueById('login-username-passwordless');\n  if (!email.includes('@')) {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n    return;\n  }\n  if (Accounts._options.forbidClientAccountCreation) {\n    loginButtonsSession.errorMessage(\"Action not allowed\");\n    return;\n  }\n  if (username !== null && !validateUsername(username)) {\n    return;\n  }\n  Accounts.requestLoginTokenForUser({\n    selector: email,\n    userData: {\n      email: email,\n      username: username\n    }\n  }, function (error, result) {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      var _result$selector;\n      loginButtonsSession.set('inPasswordlessConfirmation', true);\n      loginButtonsSession.set('inSignupFlow', false);\n      loginButtonsSession.set('passwordlessCodeEmail', result === null || result === void 0 ? void 0 : (_result$selector = result.selector) === null || _result$selector === void 0 ? void 0 : _result$selector.email);\n    }\n  });\n};\nvar login = function () {\n  loginButtonsSession.resetMessages();\n  var username = trimmedElementValueById('login-username');\n  var email = trimmedElementValueById('login-email');\n  var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n  // notably not trimmed. a password could (?) start or end with a space\n  var password = elementValueById('login-password');\n  var loginSelector;\n  if (username !== null) {\n    if (!validateUsername(username)) return;else loginSelector = {\n      username: username\n    };\n  } else if (email !== null) {\n    if (!validateEmail(email)) return;else loginSelector = {\n      email: email\n    };\n  } else if (usernameOrEmail !== null) {\n    // XXX not sure how we should validate this. but this seems good enough (for now),\n    // since an email must have at least 3 characters anyways\n    if (!validateUsername(usernameOrEmail)) return;else loginSelector = usernameOrEmail;\n  } else {\n    throw new Error(\"Unexpected -- no element to use as a login user selector\");\n  }\n  Meteor.loginWithPassword(loginSelector, password, function (error, result) {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\nvar signup = function () {\n  loginButtonsSession.resetMessages();\n  var options = {}; // to be passed to Accounts.createUser\n\n  var username = trimmedElementValueById('login-username');\n  if (username !== null) {\n    if (!validateUsername(username)) return;else options.username = username;\n  }\n  var email = trimmedElementValueById('login-email');\n  if (email !== null) {\n    if (!validateEmail(email)) return;else options.email = email;\n  }\n\n  // notably not trimmed. a password could (?) start or end with a space\n  var password = elementValueById('login-password');\n  if (!validatePassword(password)) return;else options.password = password;\n  if (!matchPasswordAgainIfPresent()) return;\n  Accounts.createUser(options, function (error) {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\nvar forgotPassword = function () {\n  loginButtonsSession.resetMessages();\n  var email = trimmedElementValueById(\"forgot-password-email\");\n  if (email.includes('@')) {\n    Accounts.forgotPassword({\n      email: email\n    }, function (error) {\n      if (error) loginButtonsSession.errorMessage(error.reason || \"Unknown error\");else loginButtonsSession.infoMessage(\"Email sent\");\n    });\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n  }\n};\nvar changePassword = function () {\n  loginButtonsSession.resetMessages();\n\n  // notably not trimmed. a password could (?) start or end with a space\n  var oldPassword = elementValueById('login-old-password');\n\n  // notably not trimmed. a password could (?) start or end with a space\n  var password = elementValueById('login-password');\n  if (!validatePassword(password)) return;\n  if (!matchPasswordAgainIfPresent()) return;\n  Accounts.changePassword(oldPassword, password, function (error) {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inChangePasswordFlow', false);\n      loginButtonsSession.set('inMessageOnlyFlow', true);\n      loginButtonsSession.infoMessage(\"Password changed\");\n    }\n  });\n};\nvar matchPasswordAgainIfPresent = function () {\n  // notably not trimmed. a password could (?) start or end with a space\n  var passwordAgain = elementValueById('login-password-again');\n  if (passwordAgain !== null) {\n    // notably not trimmed. a password could (?) start or end with a space\n    var password = elementValueById('login-password');\n    if (password !== passwordAgain) {\n      loginButtonsSession.errorMessage(\"Passwords don't match\");\n      return false;\n    }\n  }\n  return true;\n};\n\n// Utility containment function that works with both arrays and single values\nvar isInPasswordSignupFields = function (fieldOrFields) {\n  var signupFields = passwordSignupFields();\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(function (prev, field) {\n      return prev && fieldOrFields.includes(field);\n    }, true);\n  }\n  return signupFields.includes(fieldOrFields);\n};\nvar isInPasswordlessSignupFields = function (fieldOrFields) {\n  var signupFields = passwordlessSignupFields();\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(function (prev, field) {\n      return prev && fieldOrFields.includes(field);\n    }, true);\n  }\n  return signupFields.includes(fieldOrFields);\n};\n\n// events shared between loginButtonsLoggedOutDropdown and\n// loginButtonsLoggedInDropdown\nTemplate.loginButtons.events({\n  'click #login-name-link, click #login-sign-in-link': function () {\n    return loginButtonsSession.set('dropdownVisible', true);\n  },\n  'click .login-close-text': loginButtonsSession.closeDropdown\n});\n\n//\n// loginButtonsLoggedInDropdown template and related\n//\n\nTemplate._loginButtonsLoggedInDropdown.events({\n  'click #login-buttons-open-change-password': function () {\n    loginButtonsSession.resetMessages();\n    loginButtonsSession.set('inChangePasswordFlow', true);\n  }\n});\nTemplate._loginButtonsLoggedInDropdown.helpers({\n  displayName: displayName,\n  inChangePasswordFlow: function () {\n    return loginButtonsSession.get('inChangePasswordFlow');\n  },\n  inMessageOnlyFlow: function () {\n    return loginButtonsSession.get('inMessageOnlyFlow');\n  },\n  dropdownVisible: function () {\n    return loginButtonsSession.get('dropdownVisible');\n  }\n});\nTemplate._loginButtonsLoggedInDropdownActions.helpers({\n  allowChangingPassword: function () {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    if (!Package['accounts-password']) return false;\n    var user = Meteor.user();\n    return user.username || user.emails && user.emails[0] && user.emails[0].address;\n  }\n});\n\n//\n// loginButtonsLoggedOutDropdown template and related\n//\n\nTemplate._loginButtonsLoggedOutDropdown.events({\n  'click #login-buttons-password': function (event) {\n    event.preventDefault();\n    loginOrSignup();\n  },\n  'click #login-buttons-passwordless': function (event) {\n    event.preventDefault();\n    loginOrSignupPasswordless();\n  },\n  'keypress #forgot-password-email': function (event) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      forgotPassword();\n    }\n  },\n  'click #login-buttons-forgot-password': forgotPassword,\n  'click #signup-link': function () {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    var username = trimmedElementValueById('login-username');\n    var email = trimmedElementValueById('login-email');\n    var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    // notably not trimmed. a password could (?) start or end with a space\n    var password = elementValueById('login-password');\n    loginButtonsSession.set('inSignupFlow', true);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (username !== null) document.getElementById('login-username').value = username;else if (email !== null) document.getElementById('login-email').value = email;else if (usernameOrEmail !== null) if (!usernameOrEmail.includes('@')) document.getElementById('login-username').value = usernameOrEmail;else document.getElementById('login-email').value = usernameOrEmail;\n    if (password !== null) document.getElementById('login-password').value = password;\n\n    // Force redrawing the `login-dropdown-list` element because of\n    // a bizarre Chrome bug in which part of the DIV is not redrawn\n    // in case you had tried to unsuccessfully log in before\n    // switching to the signup form.\n    //\n    // Found tip on how to force a redraw on\n    // http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes/3485654#3485654\n    var redraw = document.getElementById('login-dropdown-list');\n    redraw.style.display = 'none';\n    redraw.offsetHeight; // it seems that this line does nothing but is necessary for the redraw to work\n    redraw.style.display = 'block';\n  },\n  'click #forgot-password-link': function () {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    var email = trimmedElementValueById('login-email');\n    var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', true);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (email !== null) document.getElementById('forgot-password-email').value = email;else if (usernameOrEmail !== null) if (usernameOrEmail.includes('@')) document.getElementById('forgot-password-email').value = usernameOrEmail;\n  },\n  'click #resend-passwordless-code': function () {\n    loginButtonsSession.set('inPasswordlessConfirmation', false);\n    loginButtonsSession.set('passwordlessCodeEmail', null);\n  },\n  'click #back-to-login-link': function () {\n    loginButtonsSession.resetMessages();\n    var username = trimmedElementValueById('login-username');\n    var email = trimmedElementValueById('login-email') || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n    // notably not trimmed. a password could (?) start or end with a space\n    var password = elementValueById('login-password');\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n    if (document.getElementById('login-username') && username !== null) document.getElementById('login-username').value = username;\n    if (document.getElementById('login-email') && email !== null) document.getElementById('login-email').value = email;\n    var usernameOrEmailInput = document.getElementById('login-username-or-email');\n    if (usernameOrEmailInput) {\n      if (email !== null) usernameOrEmailInput.value = email;\n      if (username !== null) usernameOrEmailInput.value = username;\n    }\n    if (password !== null) document.getElementById('login-password').value = password;\n  }\n});\nTemplate._loginButtonsLoggedOutDropdown.helpers({\n  // additional classes that can be helpful in styling the dropdown\n  additionalClasses: function () {\n    if (!hasPasswordService() || !hasPasswordlessService()) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  },\n  dropdownVisible: function () {\n    return loginButtonsSession.get('dropdownVisible');\n  },\n  hasPasswordService: hasPasswordService,\n  hasPasswordlessService: hasPasswordlessService\n});\n\n// return all login services, with password last\nTemplate._loginButtonsLoggedOutAllServices.helpers({\n  services: getLoginServices,\n  isPasswordService: function () {\n    return this.name === 'password';\n  },\n  isPasswordlessService: function () {\n    return this.name === 'passwordless';\n  },\n  hasOtherServices: function () {\n    var count = 0;\n    if (hasPasswordlessService()) count++;\n    if (hasPasswordService()) count++;\n    return getLoginServices().length > count;\n  },\n  displaySeparatorForPasswordless: function () {\n    return hasPasswordService() || getLoginServices().length > 1;\n  },\n  isInternalService: function () {\n    return this.name === 'password' || this.name === 'passwordless';\n  },\n  hasInternalService: function () {\n    return hasPasswordService() || hasPasswordlessService();\n  },\n  hasPasswordService: hasPasswordService,\n  hasPasswordlessService: hasPasswordlessService\n});\nTemplate._loginButtonsLoggedOutPasswordlessService.helpers({\n  fields: function () {\n    return [{\n      fieldName: 'email-passwordless',\n      fieldLabel: 'Email',\n      autocomplete: 'email',\n      inputType: 'email',\n      visible: function () {\n        return !loginButtonsSession.get('inPasswordlessConfirmation');\n      }\n    }, {\n      fieldName: 'username-passwordless',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      inputType: 'text',\n      visible: function () {\n        return isInPasswordlessSignupFields('USERNAME_AND_EMAIL') && loginButtonsSession.get('inSignupFlow');\n      }\n    }, {\n      fieldName: 'code-passwordless',\n      fieldLabel: 'Code',\n      inputType: 'text',\n      visible: function () {\n        return loginButtonsSession.get('inPasswordlessConfirmation');\n      }\n    }];\n  },\n  inForgotPasswordFlow: function () {\n    return loginButtonsSession.get('inForgotPasswordFlow');\n  },\n  inPasswordlessConfirmation: function () {\n    return loginButtonsSession.get('inPasswordlessConfirmation');\n  },\n  inLoginFlow: function () {\n    return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\n  },\n  inSignupFlow: function () {\n    return loginButtonsSession.get('inSignupFlow');\n  },\n  showCreateAccountLink: function () {\n    return !Accounts._options.forbidClientAccountCreation;\n  }\n});\nTemplate._loginButtonsLoggedOutPasswordService.helpers({\n  fields: function () {\n    var loginFields = [{\n      fieldName: 'username-or-email',\n      fieldLabel: 'Username or Email',\n      autocomplete: 'username email',\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"]);\n      }\n    }, {\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      visible: function () {\n        return isInPasswordSignupFields(\"USERNAME_ONLY\");\n      }\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: function () {\n        return isInPasswordSignupFields(\"EMAIL_ONLY\");\n      }\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'Password',\n      inputType: 'password',\n      autocomplete: 'current-password',\n      visible: function () {\n        return true;\n      }\n    }];\n    var signupFields = [{\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]);\n      }\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]);\n      }\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email (optional)',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: function () {\n        return isInPasswordSignupFields(\"USERNAME_AND_OPTIONAL_EMAIL\");\n      }\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'Password',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      visible: function () {\n        return true;\n      }\n    }, {\n      fieldName: 'password-again',\n      fieldLabel: 'Password (again)',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      // No need to make users double-enter their password if\n      // they'll necessarily have an email set, since they can use\n      // the \"forgot password\" flow.\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]);\n      }\n    }];\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  },\n  inForgotPasswordFlow: function () {\n    return loginButtonsSession.get('inForgotPasswordFlow');\n  },\n  inLoginFlow: function () {\n    return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\n  },\n  inSignupFlow: function () {\n    return loginButtonsSession.get('inSignupFlow');\n  },\n  showCreateAccountLink: function () {\n    return !Accounts._options.forbidClientAccountCreation;\n  },\n  showForgotPasswordLink: function () {\n    return isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"]);\n  }\n});\nTemplate._loginButtonsFormField.helpers({\n  inputType: function () {\n    return this.inputType || \"text\";\n  }\n});\n\n//\n// loginButtonsChangePassword template\n//\n\nTemplate._loginButtonsChangePassword.events({\n  'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function (event) {\n    if (event.keyCode === 13) changePassword();\n  },\n  'click #login-buttons-do-change-password': changePassword\n});\nTemplate._loginButtonsChangePassword.helpers({\n  fields: function () {\n    var _Meteor$user = Meteor.user(),\n      username = _Meteor$user.username,\n      emails = _Meteor$user.emails;\n    var email;\n    if (emails) {\n      email = emails[0].address;\n    }\n    return [\n    // The username and email fields are included here to address an\n    // accessibility warning in Chrome, but the fields don't actually display.\n    // The warning states that there should be an optionally hidden\n    // username/email field on password forms.\n    // XXX I think we should not use a CSS class here because this is the\n    // `unstyled` package. So instead we apply an inline style.\n    {\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      fieldStyle: 'display: none;',\n      fieldValue: username,\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]);\n      }\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      fieldStyle: 'display: none;',\n      fieldValue: email,\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]);\n      }\n    }, {\n      fieldName: 'old-password',\n      fieldLabel: 'Current Password',\n      inputType: 'password',\n      autocomplete: 'current-password',\n      visible: function () {\n        return true;\n      }\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'New Password',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      visible: function () {\n        return true;\n      }\n    }, {\n      fieldName: 'password-again',\n      fieldLabel: 'New Password (again)',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      // No need to make users double-enter their password if\n      // they'll necessarily have an email set, since they can use\n      // the \"forgot password\" flow.\n      visible: function () {\n        return isInPasswordSignupFields([\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]);\n      }\n    }];\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"login_buttons_dialogs.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-ui-unstyled/login_buttons_dialogs.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar displayName, dropdown, validatePassword;\nmodule.link(\"./login_buttons.js\", {\n  displayName: function (v) {\n    displayName = v;\n  },\n  dropdown: function (v) {\n    dropdown = v;\n  },\n  validatePassword: function (v) {\n    validatePassword = v;\n  }\n}, 0);\n// for convenience\nvar loginButtonsSession = Accounts._loginButtonsSession;\n\n// since we don't want to pass around the callback that we get from our event\n// handlers, we just make it a variable for the whole file\nvar doneCallback;\nAccounts.onResetPasswordLink(function (token, done) {\n  loginButtonsSession.set(\"resetPasswordToken\", token);\n  doneCallback = done;\n});\nAccounts.onEnrollmentLink(function (token, done) {\n  loginButtonsSession.set(\"enrollAccountToken\", token);\n  doneCallback = done;\n});\nAccounts.onEmailVerificationLink(function (token, done) {\n  Accounts.verifyEmail(token, function (error) {\n    if (!error) {\n      loginButtonsSession.set('justVerifiedEmail', true);\n    }\n    done();\n    // XXX show something if there was an error.\n  });\n});\n\n//\n// resetPasswordDialog template\n//\n\nTemplate._resetPasswordDialog.events({\n  'click #login-buttons-reset-password-button': function () {\n    return resetPassword();\n  },\n  'keypress #reset-password-new-password': function (event) {\n    if (event.keyCode === 13) resetPassword();\n  },\n  'click #login-buttons-cancel-reset-password': function () {\n    loginButtonsSession.set('resetPasswordToken', null);\n    if (doneCallback) doneCallback();\n  }\n});\nvar resetPassword = function () {\n  loginButtonsSession.resetMessages();\n  var newPassword = document.getElementById('reset-password-new-password').value;\n  if (!validatePassword(newPassword)) return;\n  Accounts.resetPassword(loginButtonsSession.get('resetPasswordToken'), newPassword, function (error) {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('resetPasswordToken', null);\n      loginButtonsSession.set('justResetPassword', true);\n      if (doneCallback) doneCallback();\n    }\n  });\n};\nTemplate._resetPasswordDialog.helpers({\n  displayName: displayName,\n  inResetPasswordFlow: function () {\n    return loginButtonsSession.get('resetPasswordToken');\n  }\n});\n\n//\n// justResetPasswordDialog template\n//\n\nTemplate._justResetPasswordDialog.events({\n  'click #just-verified-dismiss-button': function () {\n    return loginButtonsSession.set('justResetPassword', false);\n  }\n});\nTemplate._justResetPasswordDialog.helpers({\n  visible: function () {\n    return loginButtonsSession.get('justResetPassword');\n  },\n  displayName: displayName\n});\n\n//\n// enrollAccountDialog template\n//\n\nvar enrollAccount = function () {\n  loginButtonsSession.resetMessages();\n  var password = document.getElementById('enroll-account-password').value;\n  if (!validatePassword(password)) return;\n  Accounts.resetPassword(loginButtonsSession.get('enrollAccountToken'), password, function (error) {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('enrollAccountToken', null);\n      if (doneCallback) doneCallback();\n    }\n  });\n};\nTemplate._enrollAccountDialog.events({\n  'click #login-buttons-enroll-account-button': enrollAccount,\n  'keypress #enroll-account-password': function (event) {\n    if (event.keyCode === 13) enrollAccount();\n  },\n  'click #login-buttons-cancel-enroll-account': function () {\n    loginButtonsSession.set('enrollAccountToken', null);\n    if (doneCallback) doneCallback();\n  }\n});\nTemplate._enrollAccountDialog.helpers({\n  displayName: displayName,\n  inEnrollAccountFlow: function () {\n    return loginButtonsSession.get('enrollAccountToken');\n  }\n});\n\n//\n// justVerifiedEmailDialog template\n//\n\nTemplate._justVerifiedEmailDialog.events({\n  'click #just-verified-dismiss-button': function () {\n    return loginButtonsSession.set('justVerifiedEmail', false);\n  }\n});\nTemplate._justVerifiedEmailDialog.helpers({\n  visible: function () {\n    return loginButtonsSession.get('justVerifiedEmail');\n  },\n  displayName: displayName\n});\n\n//\n// loginButtonsMessagesDialog template\n//\n\nTemplate._loginButtonsMessagesDialog.events({\n  'click #messages-dialog-dismiss-button': function () {\n    return loginButtonsSession.resetMessages();\n  }\n});\nTemplate._loginButtonsMessagesDialog.helpers({\n  visible: function () {\n    var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n    return !dropdown() && hasMessage;\n  }\n});\n\n//\n// configureLoginServiceDialog template\n//\n\nTemplate._configureLoginServiceDialog.events({\n  'click .configure-login-service-dismiss-button': function () {\n    return loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n  },\n  'click #configure-login-service-dialog-save-configuration': function () {\n    if (loginButtonsSession.get('configureLoginServiceDialogVisible') && !loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\n      // Prepare the configuration document for this login service\n      var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n      var configuration = {\n        service: serviceName\n      };\n\n      // Fetch the value of each input field\n      configurationFields().forEach(function (field) {\n        configuration[field.property] = document.getElementById(\"configure-login-service-dialog-\" + field.property).value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesnt work on IE8;\n      });\n\n      // Replacement of single use of jQuery in this package so we can remove\n      // the dependency\n      var inputs = [].slice.call(\n      // Because HTMLCollections aren't arrays\n      document.getElementById('configure-login-service-dialog').getElementsByTagName('input'));\n      configuration.loginStyle = document.querySelector('#configure-login-service-dialog input[name=\"loginStyle\"]:checked').value;\n\n      // Configure this login service\n      Accounts.connection.call(\"configureLoginService\", configuration, function (error, result) {\n        if (error) Meteor._debug(\"Error configuring login service \" + serviceName, error);else loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n      });\n    }\n  },\n  // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\n  // well. (Keeping the 'input' event means that this also fires when you use\n  // the mouse to change the contents of the field, eg 'Cut' menu item.)\n  'input, keyup input': function (event) {\n    // if the event fired on one of the configuration input fields,\n    // check whether we should enable the 'save configuration' button\n    if (event.target.id.indexOf('configure-login-service-dialog') === 0) updateSaveDisabled();\n  }\n});\n\n// check whether the 'save configuration' button should be enabled.\n// this is a really strange way to implement this and a Forms\n// Abstraction would make all of this reactive, and simpler.\nvar updateSaveDisabled = function () {\n  var anyFieldEmpty = configurationFields().reduce(function (prev, field) {\n    return prev || document.getElementById(\"configure-login-service-dialog-\" + field.property).value === '';\n  }, false);\n  loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\n};\n\n// Returns the appropriate template for this login service.  This\n// template should be defined in the service's package\nTemplate._configureLoginServiceDialog.templateForService = function (serviceName) {\n  serviceName = serviceName || loginButtonsSession.get('configureLoginServiceDialogServiceName');\n  // XXX Service providers should be able to specify their configuration\n  // template name.\n  return Template[\"configureLoginServiceDialogFor\" + (serviceName === 'meteor-developer' ? 'MeteorDeveloper' : capitalize(serviceName))];\n};\nvar configurationFields = function () {\n  var template = Template._configureLoginServiceDialog.templateForService();\n  return template.fields();\n};\nTemplate._configureLoginServiceDialog.helpers({\n  configurationFields: configurationFields,\n  visible: function () {\n    return loginButtonsSession.get('configureLoginServiceDialogVisible');\n  },\n  // renders the appropriate template\n  configurationSteps: function () {\n    return Template._configureLoginServiceDialog.templateForService();\n  },\n  saveDisabled: function () {\n    return loginButtonsSession.get('configureLoginServiceDialogSaveDisabled');\n  }\n});\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nvar capitalize = function (str) {\n  str = str == null ? '' : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nTemplate._configureLoginOnDesktopDialog.helpers({\n  visible: function () {\n    return loginButtonsSession.get('configureOnDesktopVisible');\n  }\n});\nTemplate._configureLoginOnDesktopDialog.events({\n  'click #configure-on-desktop-dismiss-button': function () {\n    return loginButtonsSession.set('configureOnDesktopVisible', false);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".less\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/accounts_ui.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/template.login_buttons.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/template.login_buttons_single.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/template.login_buttons_dropdown.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/template.login_buttons_dialogs.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/login_buttons_session.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/login_buttons.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/login_buttons_single.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/login_buttons_dropdown.js\");\nrequire(\"/node_modules/meteor/accounts-ui-unstyled/login_buttons_dialogs.js\");\n\n/* Exports */\nPackage._define(\"accounts-ui-unstyled\");\n\n})();\n","servePath":"/packages/accounts-ui-unstyled.js","sourceMap":{"version":3,"sources":["packages/accounts-ui-unstyled/accounts_ui.js","packages/accounts-ui-unstyled/login_buttons_session.js","packages/accounts-ui-unstyled/login_buttons.js","packages/accounts-ui-unstyled/login_buttons_single.js","packages/accounts-ui-unstyled/login_buttons_dropdown.js","packages/accounts-ui-unstyled/login_buttons_dialogs.js"],"names":["module","export","passwordSignupFields","passwordlessSignupFields","Accounts","ui","_options","requestPermissions","Object","create","requestOfflineToken","forceApprovalPrompt","VALID_OPTIONS","Set","add","VALID_PASSWORD_SIGNUP_FIELDS","isValidPasswordSignupField","field","has","VALID_PASSWORDLESS_SIGNUP_FIELDS","isValidPasswordlessSignupField","config","options","keys","forEach","key","Error","handlePasswordSignupFields","handlePasswordlessSignupFields","handleRequestPermissions","handleRequestOfflineToken","handleForceApprovalPrompt","Meteor","startup","_Meteor$settings$publ","_Meteor$settings$publ2","settings","public","packages","reportInvalid","Array","isArray","every","assign","_ref","service","scope","_ref2","_ref3","VALID_KEYS","validateKey","includes","KEY_PREFIX","set","value","_set","Session","get","closeDropdown","resetMessages","infoMessage","message","ensureMessageVisible","errorMessage","isMessageDialogVisible","configureService","name","isCordova","_loginButtonsSession","displayName","getLoginServices","hasPasswordService","hasPasswordlessService","dropdown","validateUsername","validateEmail","validatePassword","link","v","loginButtonsSession","Template","loginButtons","events","click #login-buttons-logout","logout","registerHelper","user","profile","username","emails","address","services","Package","oauth","serviceNames","sort","push","map","length","email","password","_loginButtonsLoggedOut","helpers","singleService","configurationLoaded","loginServicesConfigured","_loginButtonsLoggedIn","_loginButtonsLoggedInSingleLogoutButton","_loginButtonsMessages","_loginButtonsLoggingInPadding","loginResultCallback","serviceName","err","LoginCancelledError","ServiceConfiguration","ConfigError","_configureLoginServiceDialog","templateForService","capitalize","reason","onPageLoadLogin","attemptInfo","type","error","_loginButtonsLoggedOutSingleLoginButton","click .login-button","loginWithService","cannotConfigure","configurations","findOne","configured","capitalizedName","input","str","String","charAt","toUpperCase","slice","elementValueById","id","element","document","getElementById","trimmedElementValueById","replace","loginOrSignup","signup","login","loginOrSignupPasswordless","token","passwordlessLoginWithToken","forbidClientAccountCreation","requestLoginTokenForUser","selector","userData","result","_result$selector","usernameOrEmail","loginSelector","loginWithPassword","matchPasswordAgainIfPresent","createUser","forgotPassword","changePassword","oldPassword","passwordAgain","isInPasswordSignupFields","fieldOrFields","signupFields","reduce","prev","isInPasswordlessSignupFields","click #login-name-link, click #login-sign-in-link","_loginButtonsLoggedInDropdown","click #login-buttons-open-change-password","inChangePasswordFlow","inMessageOnlyFlow","dropdownVisible","_loginButtonsLoggedInDropdownActions","allowChangingPassword","_loginButtonsLoggedOutDropdown","click #login-buttons-password","event","preventDefault","click #login-buttons-passwordless","keypress #forgot-password-email","keyCode","click #signup-link","Tracker","flush","redraw","style","display","offsetHeight","click #forgot-password-link","click #resend-passwordless-code","click #back-to-login-link","usernameOrEmailInput","additionalClasses","_loginButtonsLoggedOutAllServices","isPasswordService","isPasswordlessService","hasOtherServices","count","displaySeparatorForPasswordless","isInternalService","hasInternalService","_loginButtonsLoggedOutPasswordlessService","fields","fieldName","fieldLabel","autocomplete","inputType","visible","inForgotPasswordFlow","inPasswordlessConfirmation","inLoginFlow","inSignupFlow","showCreateAccountLink","_loginButtonsLoggedOutPasswordService","loginFields","showForgotPasswordLink","_loginButtonsFormField","_loginButtonsChangePassword","keypress #login-old-password, keypress #login-password, keypress #login-password-again","_Meteor$user","fieldStyle","fieldValue","doneCallback","onResetPasswordLink","done","onEnrollmentLink","onEmailVerificationLink","verifyEmail","_resetPasswordDialog","click #login-buttons-reset-password-button","resetPassword","keypress #reset-password-new-password","click #login-buttons-cancel-reset-password","newPassword","inResetPasswordFlow","_justResetPasswordDialog","click #just-verified-dismiss-button","enrollAccount","_enrollAccountDialog","keypress #enroll-account-password","click #login-buttons-cancel-enroll-account","inEnrollAccountFlow","_justVerifiedEmailDialog","_loginButtonsMessagesDialog","click #messages-dialog-dismiss-button","hasMessage","click .configure-login-service-dismiss-button","click #configure-login-service-dialog-save-configuration","configuration","configurationFields","property","inputs","call","getElementsByTagName","loginStyle","querySelector","connection","_debug","input, keyup input","target","indexOf","updateSaveDisabled","anyFieldEmpty","template","configurationSteps","saveDisabled","_configureLoginOnDesktopDialog","click #configure-on-desktop-dismiss-button"],"mappings":"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","file":"/packages/accounts-ui-unstyled.js","sourcesContent":["/**\n * @summary Accounts UI\n * @namespace\n * @memberOf Accounts\n * @importFromPackage accounts-base\n */\nAccounts.ui = {\n  _options: {\n    requestPermissions: Object.create(null),\n    requestOfflineToken: Object.create(null),\n    forceApprovalPrompt: Object.create(null),\n  },\n};\n\nconst VALID_OPTIONS = new Set()\n  .add('passwordSignupFields')\n  .add('requestPermissions')\n  .add('requestOfflineToken')\n  .add('forceApprovalPrompt')\n  .add('passwordlessSignupFields');\n\nconst VALID_PASSWORD_SIGNUP_FIELDS = new Set()\n  .add('USERNAME_AND_EMAIL')\n  .add('USERNAME_AND_OPTIONAL_EMAIL')\n  .add('USERNAME_ONLY')\n  .add('EMAIL_ONLY');\n\nfunction isValidPasswordSignupField(field) {\n  return VALID_PASSWORD_SIGNUP_FIELDS.has(field);\n}\n\nconst VALID_PASSWORDLESS_SIGNUP_FIELDS = new Set()\n  .add('USERNAME_AND_EMAIL')\n  .add('EMAIL_ONLY');\n\nfunction isValidPasswordlessSignupField(field) {\n  return VALID_PASSWORDLESS_SIGNUP_FIELDS.has(field);\n}\n\n/**\n * @summary Configure the behavior of [`{{> loginButtons}}`](#accountsui).\n * @locus Client\n * @param {Object} options\n * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\n * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\n * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\n * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', or '`EMAIL_ONLY`' (default).\n * @param {String} options.passwordlessSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`EMAIL_ONLY`' (default).\n * @importFromPackage accounts-base\n */\nAccounts.ui.config = options => {\n  Object.keys(options).forEach(key => {\n    if (!VALID_OPTIONS.has(key)) {\n      throw new Error(`Accounts.ui.config: Invalid option: ${key}`);\n    }\n  });\n\n  handlePasswordSignupFields(options);\n  handlePasswordlessSignupFields(options);\n  handleRequestPermissions(options);\n  handleRequestOfflineToken(options);\n  handleForceApprovalPrompt(options);\n};\n\nMeteor.startup(function() {\n  const settings = Meteor.settings.public?.packages?.['accounts-ui-unstyled'];\n\n  if (settings) {\n    Accounts.ui.config(settings);\n  }\n});\n\nfunction handlePasswordlessSignupFields(options) {\n  let { passwordlessSignupFields } = options;\n\n  if (passwordlessSignupFields) {\n    const reportInvalid = () => {\n      throw new Error(\n        `Accounts.ui.config: Invalid option for \\`passwordlessSignupFields\\`: ${passwordlessSignupFields}`\n      );\n    };\n\n    if (typeof passwordlessSignupFields === 'string') {\n      passwordlessSignupFields = [passwordlessSignupFields];\n    } else if (!Array.isArray(passwordlessSignupFields)) {\n      reportInvalid();\n    }\n\n    if (passwordlessSignupFields.every(isValidPasswordlessSignupField)) {\n      if (Accounts.ui._options.passwordlessSignupFields) {\n        throw new Error(\n          \"Accounts.ui.config: Can't set `passwordlessSignupFields` more than once\"\n        );\n      }\n      Object.assign(Accounts.ui._options, { passwordlessSignupFields });\n      return;\n    }\n\n    reportInvalid();\n  }\n}\n\nfunction handlePasswordSignupFields(options) {\n  let { passwordSignupFields } = options;\n\n  if (passwordSignupFields) {\n    const reportInvalid = () => {\n      throw new Error(\n        `Accounts.ui.config: Invalid option for \\`passwordSignupFields\\`: ${passwordSignupFields}`\n      );\n    };\n\n    if (typeof passwordSignupFields === 'string') {\n      passwordSignupFields = [passwordSignupFields];\n    } else if (!Array.isArray(passwordSignupFields)) {\n      reportInvalid();\n    }\n\n    if (passwordSignupFields.every(isValidPasswordSignupField)) {\n      if (Accounts.ui._options.passwordSignupFields) {\n        throw new Error(\n          \"Accounts.ui.config: Can't set `passwordSignupFields` more than once\"\n        );\n      }\n      Object.assign(Accounts.ui._options, { passwordSignupFields });\n      return;\n    }\n\n    reportInvalid();\n  }\n}\n\nexport function passwordSignupFields() {\n  const { passwordSignupFields } = Accounts.ui._options;\n\n  if (Array.isArray(passwordSignupFields)) {\n    return passwordSignupFields;\n  }\n\n  if (typeof passwordSignupFields === 'string') {\n    return [passwordSignupFields];\n  }\n\n  return ['EMAIL_ONLY'];\n}\n\nexport function passwordlessSignupFields() {\n  const { passwordlessSignupFields } = Accounts.ui._options;\n\n  if (Array.isArray(passwordlessSignupFields)) {\n    return passwordlessSignupFields;\n  }\n\n  if (typeof passwordlessSignupFields === 'string') {\n    return [passwordlessSignupFields];\n  }\n\n  return ['EMAIL_ONLY'];\n}\n\nfunction handleRequestPermissions({ requestPermissions }) {\n  if (requestPermissions) {\n    Object.keys(requestPermissions).forEach(service => {\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\n          `Accounts.ui.config: Can't set \\`requestPermissions\\` more than once for ${service}`\n        );\n      }\n\n      const scope = requestPermissions[service];\n\n      if (!Array.isArray(scope)) {\n        throw new Error(\n          'Accounts.ui.config: Value for `requestPermissions` must be an array'\n        );\n      }\n\n      Accounts.ui._options.requestPermissions[service] = scope;\n    });\n  }\n}\n\nfunction handleRequestOfflineToken({ requestOfflineToken }) {\n  if (requestOfflineToken) {\n    Object.keys(requestOfflineToken).forEach(service => {\n      if (service !== 'google') {\n        throw new Error(\n          'Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.'\n        );\n      }\n\n      if (Accounts.ui._options.requestOfflineToken[service]) {\n        throw new Error(\n          `Accounts.ui.config: Can't set \\`requestOfflineToken\\` more than once for ${service}`\n        );\n      }\n\n      Accounts.ui._options.requestOfflineToken[service] =\n        requestOfflineToken[service];\n    });\n  }\n}\n\nfunction handleForceApprovalPrompt({ forceApprovalPrompt }) {\n  if (forceApprovalPrompt) {\n    Object.keys(forceApprovalPrompt).forEach(service => {\n      if (service !== 'google') {\n        throw new Error(\n          'Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.'\n        );\n      }\n\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\n        throw new Error(\n          `Accounts.ui.config: Can't set \\`forceApprovalPrompt\\` more than once for ${service}`\n        );\n      }\n\n      Accounts.ui._options.forceApprovalPrompt[service] =\n        forceApprovalPrompt[service];\n    });\n  }\n}\n","const VALID_KEYS = [\n  'dropdownVisible',\n\n  // XXX consider replacing these with one key that has an enum for values.\n  'inSignupFlow',\n  'inForgotPasswordFlow',\n  'inChangePasswordFlow',\n  'inMessageOnlyFlow',\n  'inPasswordlessConfirmation',\n  'passwordlessCodeEmail',\n\n  'errorMessage',\n  'infoMessage',\n\n  // dialogs with messages (info and error)\n  'resetPasswordToken',\n  'enrollAccountToken',\n  'justVerifiedEmail',\n  'justResetPassword',\n\n  'configureLoginServiceDialogVisible',\n  'configureLoginServiceDialogServiceName',\n  'configureLoginServiceDialogSaveDisabled',\n  'configureOnDesktopVisible',\n];\n\nconst validateKey = key => {\n  if (!VALID_KEYS.includes(key))\n    throw new Error(`Invalid key in loginButtonsSession: ${key}`);\n};\n\nconst KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nconst set = (key, value) => {\n  validateKey(key);\n  if (['errorMessage', 'infoMessage'].includes(key))\n    throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n  _set(key, value);\n};\n\nconst _set = (key, value) => Session.set(KEY_PREFIX + key, value);\n\nconst get = key => {\n  validateKey(key);\n  return Session.get(KEY_PREFIX + key);\n};\n\nconst closeDropdown = () => {\n  set('inSignupFlow', false);\n  set('inForgotPasswordFlow', false);\n  set('inChangePasswordFlow', false);\n  set('inMessageOnlyFlow', false);\n  set('dropdownVisible', false);\n  resetMessages();\n};\n\nconst infoMessage = message => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", message);\n  ensureMessageVisible();\n};\n\nconst errorMessage = message => {\n  _set(\"errorMessage\", message);\n  _set(\"infoMessage\", null);\n  ensureMessageVisible();\n};\n\n// is there a visible dialog that shows messages (info and error)\nconst isMessageDialogVisible = () => {\n  return get('resetPasswordToken') ||\n    get('enrollAccountToken') ||\n    get('justVerifiedEmail');\n};\n\n// ensure that somethings displaying a message (info or error) is\n// visible. If a dialog with messages is open, do nothing;\n// otherwise open the dropdown.\n//\n// Notably this doesn't matter when only displaying a single login\n// button since then we have an explicit message dialog\n// (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n// this case.\nconst ensureMessageVisible = () => {\n  if (!isMessageDialogVisible())\n    set(\"dropdownVisible\", true);\n};\n\nconst resetMessages = () => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", null);\n};\n\nconst configureService = name => {\n  if (Meteor.isCordova) {\n    set('configureOnDesktopVisible', true);\n  } else {\n    set('configureLoginServiceDialogVisible', true);\n    set('configureLoginServiceDialogServiceName', name);\n    set('configureLoginServiceDialogSaveDisabled', true);\n  }\n};\n\nAccounts._loginButtonsSession = {\n  set,\n  _set,\n  get,\n  closeDropdown,\n  infoMessage,\n  errorMessage,\n  isMessageDialogVisible,\n  ensureMessageVisible,\n  resetMessages,\n  configureService,\n};\n","import { passwordSignupFields } from './accounts_ui.js';\n\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n// shared between dropdown and single mode\nTemplate.loginButtons.events({\n  'click #login-buttons-logout': () =>\n    Meteor.logout(() => loginButtonsSession.closeDropdown()),\n});\n\nTemplate.registerHelper('loginButtons', () => {\n  throw new Error(\"Use {{> loginButtons}} instead of {{loginButtons}}\");\n});\n\n//\n// helpers\n//\n\nexport const displayName = () => {\n  const user = Meteor.user();\n  if (!user)\n    return '';\n\n  if (user.profile && user.profile.name)\n    return user.profile.name;\n  if (user.username)\n    return user.username;\n  if (user.emails && user.emails[0] && user.emails[0].address)\n    return user.emails[0].address;\n\n  return '';\n};\n\n// returns an array of the login services used by this app. each\n// element of the array is an object (eg {name: 'facebook'}), since\n// that makes it useful in combination with handlebars {{#each}}.\n//\n// don't cache the output of this function: if called during startup (before\n// oauth packages load) it might not include them all.\n//\n// NOTE: It is very important to have this return password last\n// because of the way we render the different providers in\n// login_buttons_dropdown.html\nexport const getLoginServices = () => {\n  // First look for OAuth services.\n  const services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\n\n  // Be equally kind to all login services. This also preserves\n  // backwards-compatibility. (But maybe order should be\n  // configurable?)\n  services.sort();\n\n  // Add password, if it's there; it must come last.\n  if (hasPasswordService())\n    services.push('password');\n\n  if (hasPasswordlessService())\n    services.push('passwordless');\n\n  return services.map(name => ({ name }));\n};\n\nexport const hasPasswordService = () => !!Package['accounts-password'];\n\nexport const hasPasswordlessService = () => !!Package['accounts-passwordless'];\n\nexport const dropdown = () =>\n  hasPasswordService() || hasPasswordlessService() || getLoginServices().length > 1;\n\n// XXX improve these. should this be in accounts-password instead?\n//\n// XXX these will become configurable, and will be validated on\n// the server as well.\nexport const validateUsername = username => {\n  if (username.length >= 3) {\n    return true;\n  } else {\n    loginButtonsSession.errorMessage(\"Username must be at least 3 characters long\");\n    return false;\n  }\n};\n\nexport const validateEmail = email => {\n  if (passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '')\n    return true;\n\n  if (email.includes('@')) {\n    return true;\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n    return false;\n  }\n};\n\nexport const validatePassword = password => {\n  if (password.length >= 6) {\n    return true;\n  } else {\n    loginButtonsSession.errorMessage(\"Password must be at least 6 characters long\");\n    return false;\n  }\n};\n\n//\n// loginButtonLoggedOut template\n//\n\nTemplate._loginButtonsLoggedOut.helpers({\n  dropdown,\n  services: getLoginServices,\n  singleService: () => {\n    const services = getLoginServices();\n    if (services.length !== 1)\n      throw new Error(\n        \"Shouldn't be rendering this template with more than one configured service\");\n    return services[0];\n  },\n  configurationLoaded: () => Accounts.loginServicesConfigured(),\n});\n\n\n//\n// loginButtonsLoggedIn template\n//\n\n  // decide whether we should show a dropdown rather than a row of\n  // buttons\nTemplate._loginButtonsLoggedIn.helpers({ dropdown });\n\n\n\n//\n// loginButtonsLoggedInSingleLogoutButton template\n//\n\nTemplate._loginButtonsLoggedInSingleLogoutButton.helpers({ displayName });\n\n\n\n//\n// loginButtonsMessage template\n//\n\nTemplate._loginButtonsMessages.helpers({\n  errorMessage: () => loginButtonsSession.get('errorMessage'),\n});\n\nTemplate._loginButtonsMessages.helpers({\n  infoMessage: () => loginButtonsSession.get('infoMessage'),\n});\n\n\n//\n// loginButtonsLoggingInPadding template\n//\n\nTemplate._loginButtonsLoggingInPadding.helpers({ dropdown });\n","import { getLoginServices } from './login_buttons.js';\n\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n\nconst loginResultCallback = (serviceName, err) => {\n  if (!err) {\n    loginButtonsSession.closeDropdown();\n  } else if (err instanceof Accounts.LoginCancelledError) {\n    // do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\n    if (Template._configureLoginServiceDialog.templateForService(serviceName)) {\n      loginButtonsSession.configureService(serviceName);\n    } else {\n      loginButtonsSession.errorMessage(\n        `No configuration for ${capitalize(serviceName)}.\\n` +\n        \"Use `ServiceConfiguration` to configure it or \" +\n        `install the \\`${serviceName}-config-ui\\` package.`\n      );\n    }\n  } else {\n    loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n};\n\n\n// In the login redirect flow, we'll have the result of the login\n// attempt at page load time when we're redirected back to the\n// application.  Register a callback to update the UI (i.e. to close\n// the dialog on a successful login or display the error on a failed\n// login).\n//\nAccounts.onPageLoadLogin(attemptInfo => {\n  // Ignore if we have a left over login attempt for a service that is no longer registered.\n  if (\n    getLoginServices()\n      .map(service => service.name)\n      .includes(attemptInfo.type)\n  )\n    loginResultCallback(attemptInfo.type, attemptInfo.error);\n});\n\n\nTemplate._loginButtonsLoggedOutSingleLoginButton.events({\n  'click .login-button': function () {\n    const serviceName = this.name;\n    loginButtonsSession.resetMessages();\n\n    // XXX Service providers should be able to specify their\n    // `Meteor.loginWithX` method name.\n    const loginWithService = Meteor[`loginWith${\n                                  (serviceName === 'meteor-developer' ?\n                                   'MeteorDeveloperAccount' :\n                                   capitalize(serviceName))}`];\n\n    const options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName])\n      options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\n      options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\n      options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n\n    loginWithService(options, err => {\n      loginResultCallback(serviceName, err);\n    });\n  }\n});\n\nTemplate._loginButtonsLoggedOutSingleLoginButton.helpers({\n  // not configured and has no config UI\n  cannotConfigure: function () {\n    return !ServiceConfiguration.configurations.findOne({service: this.name}) &&\n      !Template._configureLoginServiceDialog.templateForService(this.name);\n  },\n  configured: function () {\n    return !!ServiceConfiguration.configurations.findOne({service: this.name});\n  },\n  capitalizedName: function () {\n    if (this.name === 'github')\n      // XXX we should allow service packages to set their capitalized name\n      return 'GitHub';\n    else if (this.name === 'meteor-developer')\n      return 'Meteor';\n    else\n      return capitalize(this.name);\n  }\n});\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nconst capitalize = input => {\n  const str = input == null ? '' : String(input);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import {passwordlessSignupFields, passwordSignupFields} from './accounts_ui.js';\nimport {\n  displayName,\n  getLoginServices,\n  hasPasswordService,\n  hasPasswordlessService,\n  validateUsername,\n  validateEmail,\n  validatePassword,\n} from './login_buttons.js';\n\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n//\n// helpers\n//\n\nconst elementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element)\n    return null;\n  else\n    return element.value;\n};\n\nconst trimmedElementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element)\n    return null;\n  else\n    return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesn't work on IE8;\n};\n\nconst loginOrSignup = () => {\n  if (loginButtonsSession.get('inSignupFlow'))\n    signup();\n  else\n    login();\n};\n\nconst loginOrSignupPasswordless = () => {\n  loginButtonsSession.resetMessages();\n\n  if (loginButtonsSession.get('inPasswordlessConfirmation')) {\n    const token = trimmedElementValueById('login-code-passwordless');\n    Meteor.passwordlessLoginWithToken({ email: loginButtonsSession.get('passwordlessCodeEmail') }, token, (error) => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('inPasswordlessConfirmation', false);\n        loginButtonsSession.set('passwordlessCodeEmail', null);\n      }\n    });\n\n    return;\n  }\n\n  const email = trimmedElementValueById('login-email-passwordless');\n  const username = trimmedElementValueById('login-username-passwordless');\n\n  if (!email.includes('@')) {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n    return;\n  }\n  if (Accounts._options.forbidClientAccountCreation) {\n    loginButtonsSession.errorMessage(\"Action not allowed\");\n    return;\n  }\n\n  if (username !== null && !validateUsername(username)) {\n    return;\n  }\n\n  Accounts.requestLoginTokenForUser({ selector: email, userData: { email, username } }, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inPasswordlessConfirmation', true);\n      loginButtonsSession.set('inSignupFlow', false);\n      loginButtonsSession.set('passwordlessCodeEmail', result?.selector?.email);\n    }\n  });\n}\n\nconst login = () => {\n  loginButtonsSession.resetMessages();\n\n  const username = trimmedElementValueById('login-username');\n  const email = trimmedElementValueById('login-email');\n  const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n\n  let loginSelector;\n  if (username !== null) {\n    if (!validateUsername(username))\n      return;\n    else\n      loginSelector = {username: username};\n  } else if (email !== null) {\n    if (!validateEmail(email))\n      return;\n    else\n      loginSelector = {email: email};\n  } else if (usernameOrEmail !== null) {\n    // XXX not sure how we should validate this. but this seems good enough (for now),\n    // since an email must have at least 3 characters anyways\n    if (!validateUsername(usernameOrEmail))\n      return;\n    else\n      loginSelector = usernameOrEmail;\n  } else {\n    throw new Error(\"Unexpected -- no element to use as a login user selector\");\n  }\n\n  Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst signup = () => {\n  loginButtonsSession.resetMessages();\n\n  const options = {}; // to be passed to Accounts.createUser\n\n  const username = trimmedElementValueById('login-username');\n  if (username !== null) {\n    if (!validateUsername(username))\n      return;\n    else\n      options.username = username;\n  }\n\n  const email = trimmedElementValueById('login-email');\n  if (email !== null) {\n    if (!validateEmail(email))\n      return;\n    else\n      options.email = email;\n  }\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password))\n    return;\n  else\n    options.password = password;\n\n  if (!matchPasswordAgainIfPresent())\n    return;\n\n  Accounts.createUser(options, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst forgotPassword = () => {\n  loginButtonsSession.resetMessages();\n\n  const email = trimmedElementValueById(\"forgot-password-email\");\n  if (email.includes('@')) {\n    Accounts.forgotPassword({email: email}, error => {\n      if (error)\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      else\n        loginButtonsSession.infoMessage(\"Email sent\");\n    });\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n  }\n};\n\nconst changePassword = () => {\n  loginButtonsSession.resetMessages();\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const oldPassword = elementValueById('login-old-password');\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password))\n    return;\n\n  if (!matchPasswordAgainIfPresent())\n    return;\n\n  Accounts.changePassword(oldPassword, password, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inChangePasswordFlow', false);\n      loginButtonsSession.set('inMessageOnlyFlow', true);\n      loginButtonsSession.infoMessage(\"Password changed\");\n    }\n  });\n};\n\nconst matchPasswordAgainIfPresent = () => {\n  // notably not trimmed. a password could (?) start or end with a space\n  const passwordAgain = elementValueById('login-password-again');\n  if (passwordAgain !== null) {\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n    if (password !== passwordAgain) {\n      loginButtonsSession.errorMessage(\"Passwords don't match\");\n      return false;\n    }\n  }\n  return true;\n};\n\n// Utility containment function that works with both arrays and single values\nconst isInPasswordSignupFields = (fieldOrFields) => {\n  const signupFields = passwordSignupFields();\n\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(\n      (prev, field) => prev && fieldOrFields.includes(field),\n      true,\n    )\n  }\n\n  return signupFields.includes(fieldOrFields);\n};\n\nconst isInPasswordlessSignupFields = (fieldOrFields) => {\n  const signupFields = passwordlessSignupFields();\n\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(\n      (prev, field) => prev && fieldOrFields.includes(field),\n      true,\n    )\n  }\n\n  return signupFields.includes(fieldOrFields);\n}\n\n// events shared between loginButtonsLoggedOutDropdown and\n// loginButtonsLoggedInDropdown\nTemplate.loginButtons.events({\n  'click #login-name-link, click #login-sign-in-link': () =>\n    loginButtonsSession.set('dropdownVisible', true),\n  'click .login-close-text': loginButtonsSession.closeDropdown,\n});\n\n\n//\n// loginButtonsLoggedInDropdown template and related\n//\n\nTemplate._loginButtonsLoggedInDropdown.events({\n  'click #login-buttons-open-change-password': () => {\n    loginButtonsSession.resetMessages();\n    loginButtonsSession.set('inChangePasswordFlow', true);\n  }\n});\n\nTemplate._loginButtonsLoggedInDropdown.helpers({\n  displayName,\n  inChangePasswordFlow: () => loginButtonsSession.get('inChangePasswordFlow'),\n  inMessageOnlyFlow: () => loginButtonsSession.get('inMessageOnlyFlow'),\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n});\n\nTemplate._loginButtonsLoggedInDropdownActions.helpers({\n  allowChangingPassword: () => {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    if (!Package['accounts-password']) return false;\n    const user = Meteor.user();\n    return user.username || (user.emails && user.emails[0] && user.emails[0].address);\n  }\n});\n\n\n//\n// loginButtonsLoggedOutDropdown template and related\n//\n\nTemplate._loginButtonsLoggedOutDropdown.events({\n  'click #login-buttons-password': event => {\n    event.preventDefault();\n    loginOrSignup();\n  },\n\n  'click #login-buttons-passwordless': event => {\n    event.preventDefault();\n    loginOrSignupPasswordless();\n  },\n\n  'keypress #forgot-password-email': event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      forgotPassword();\n    }\n  },\n\n  'click #login-buttons-forgot-password': forgotPassword,\n\n  'click #signup-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    loginButtonsSession.set('inSignupFlow', true);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (username !== null)\n      document.getElementById('login-username').value = username;\n    else if (email !== null)\n      document.getElementById('login-email').value = email;\n    else if (usernameOrEmail !== null)\n      if (!usernameOrEmail.includes('@'))\n        document.getElementById('login-username').value = usernameOrEmail;\n    else\n      document.getElementById('login-email').value = usernameOrEmail;\n\n    if (password !== null)\n      document.getElementById('login-password').value = password;\n\n    // Force redrawing the `login-dropdown-list` element because of\n    // a bizarre Chrome bug in which part of the DIV is not redrawn\n    // in case you had tried to unsuccessfully log in before\n    // switching to the signup form.\n    //\n    // Found tip on how to force a redraw on\n    // http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes/3485654#3485654\n    const redraw = document.getElementById('login-dropdown-list');\n    redraw.style.display = 'none';\n    redraw.offsetHeight; // it seems that this line does nothing but is necessary for the redraw to work\n    redraw.style.display = 'block';\n  },\n  'click #forgot-password-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', true);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (email !== null)\n      document.getElementById('forgot-password-email').value = email;\n    else if (usernameOrEmail !== null)\n      if (usernameOrEmail.includes('@'))\n        document.getElementById('forgot-password-email').value = usernameOrEmail;\n\n  },\n  'click #resend-passwordless-code': () => {\n    loginButtonsSession.set('inPasswordlessConfirmation', false);\n    loginButtonsSession.set('passwordlessCodeEmail', null);\n  },\n  'click #back-to-login-link': () => {\n    loginButtonsSession.resetMessages();\n\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email')\n          || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    if (document.getElementById('login-username') && username !== null)\n      document.getElementById('login-username').value = username;\n    if (document.getElementById('login-email') && email !== null)\n      document.getElementById('login-email').value = email;\n\n    const usernameOrEmailInput = document.getElementById('login-username-or-email');\n    if (usernameOrEmailInput) {\n      if (email !== null)\n        usernameOrEmailInput.value = email;\n      if (username !== null)\n        usernameOrEmailInput.value = username;\n    }\n\n    if (password !== null)\n      document.getElementById('login-password').value = password;\n  },\n});\n\nTemplate._loginButtonsLoggedOutDropdown.helpers({\n  // additional classes that can be helpful in styling the dropdown\n  additionalClasses: () => {\n    if (!hasPasswordService() || !hasPasswordlessService()) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  },\n\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n\n  hasPasswordService,\n  hasPasswordlessService,\n});\n\n// return all login services, with password last\nTemplate._loginButtonsLoggedOutAllServices.helpers({\n  services: getLoginServices,\n  isPasswordService: function () {\n    return this.name === 'password';\n  },\n  isPasswordlessService: function () {\n    return this.name === 'passwordless';\n  },\n  hasOtherServices: () => {\n    let count = 0;\n    if (hasPasswordlessService()) count++;\n    if (hasPasswordService()) count++;\n    return getLoginServices().length > count;\n  },\n  displaySeparatorForPasswordless: () => {\n    return hasPasswordService() || getLoginServices().length > 1;\n  },\n  isInternalService: function () {\n    return this.name === 'password' || this.name === 'passwordless'\n  },\n  hasInternalService: () => hasPasswordService() || hasPasswordlessService(),\n  hasPasswordService,\n  hasPasswordlessService,\n});\n\nTemplate._loginButtonsLoggedOutPasswordlessService.helpers({\n  fields: () => [\n    {\n      fieldName: 'email-passwordless',\n      fieldLabel: 'Email',\n      autocomplete: 'email',\n      inputType: 'email',\n      visible: () => !loginButtonsSession.get('inPasswordlessConfirmation'),\n    },\n    {\n      fieldName: 'username-passwordless',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      inputType: 'text',\n      visible: () => isInPasswordlessSignupFields('USERNAME_AND_EMAIL') && loginButtonsSession.get('inSignupFlow')\n    },\n    {\n      fieldName: 'code-passwordless',\n      fieldLabel: 'Code',\n      inputType: 'text',\n      visible: () => loginButtonsSession.get('inPasswordlessConfirmation')\n    }\n  ],\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n  inPasswordlessConfirmation: () => loginButtonsSession.get('inPasswordlessConfirmation'),\n\n  inLoginFlow: () =>\n    !loginButtonsSession.get('inSignupFlow') &&\n    !loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n})\n\nTemplate._loginButtonsLoggedOutPasswordService.helpers({\n  fields: () => {\n    const loginFields = [\n      {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\n        autocomplete: 'username email',\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"]\n        ),\n      },\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        visible: () => isInPasswordSignupFields(\"USERNAME_ONLY\"),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\"EMAIL_ONLY\"),\n      },\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n        autocomplete: 'current-password',\n        visible: () => true,\n      }\n    ];\n\n    const signupFields = [\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        visible: () => isInPasswordSignupFields([\n          \"USERNAME_AND_EMAIL\",\n          \"USERNAME_AND_OPTIONAL_EMAIL\",\n          \"USERNAME_ONLY\",\n        ]),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]\n        ),\n      },\n      {fieldName: 'email', fieldLabel: 'Email (optional)', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\"USERNAME_AND_OPTIONAL_EMAIL\"),\n      },\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n        autocomplete: 'new-password',\n        visible: () => true,\n      },\n      {fieldName: 'password-again', fieldLabel: 'Password (again)',\n       inputType: 'password', autocomplete: 'new-password',\n        // No need to make users double-enter their password if\n        // they'll necessarily have an email set, since they can use\n        // the \"forgot password\" flow.\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]\n        ),\n      },\n    ];\n\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  },\n\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inLoginFlow: () =>\n    !loginButtonsSession.get('inSignupFlow') &&\n    !loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n\n  showForgotPasswordLink: () => isInPasswordSignupFields(\n    [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"]\n  ),\n});\n\nTemplate._loginButtonsFormField.helpers({\n  inputType: function () {\n    return this.inputType || \"text\"\n  }\n});\n\n\n//\n// loginButtonsChangePassword template\n//\n\nTemplate._loginButtonsChangePassword.events({\n  'keypress #login-old-password, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13)\n      changePassword();\n  },\n  'click #login-buttons-do-change-password': changePassword,\n});\n\nTemplate._loginButtonsChangePassword.helpers({\n  fields: () => {\n    const { username, emails } = Meteor.user()\n    let email;\n    if (emails) {\n      email = emails[0].address;\n    }\n    return [\n      // The username and email fields are included here to address an\n      // accessibility warning in Chrome, but the fields don't actually display.\n      // The warning states that there should be an optionally hidden\n      // username/email field on password forms.\n      // XXX I think we should not use a CSS class here because this is the\n      // `unstyled` package. So instead we apply an inline style.\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        fieldStyle: 'display: none;', fieldValue: username,\n        visible: () => isInPasswordSignupFields([\n          \"USERNAME_AND_EMAIL\",\n          \"USERNAME_AND_OPTIONAL_EMAIL\",\n          \"USERNAME_ONLY\",\n        ]),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email', fieldStyle: 'display: none;', fieldValue: email,\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]\n        ),\n      },\n      {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\n        autocomplete: 'current-password', visible: () => true,\n      },\n      {fieldName: 'password', fieldLabel: 'New Password', inputType: 'password',\n        autocomplete: 'new-password', visible: () => true,\n      },\n      {fieldName: 'password-again', fieldLabel: 'New Password (again)',\n        inputType: 'password', autocomplete: 'new-password',\n        // No need to make users double-enter their password if\n        // they'll necessarily have an email set, since they can use\n        // the \"forgot password\" flow.\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]\n        ),\n      },\n    ];\n  }\n});\n","import { displayName, dropdown, validatePassword } from './login_buttons.js';\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n// since we don't want to pass around the callback that we get from our event\n// handlers, we just make it a variable for the whole file\nlet doneCallback;\n\nAccounts.onResetPasswordLink((token, done) => {\n  loginButtonsSession.set(\"resetPasswordToken\", token);\n  doneCallback = done;\n});\n\nAccounts.onEnrollmentLink((token, done) => {\n  loginButtonsSession.set(\"enrollAccountToken\", token);\n  doneCallback = done;\n});\n\nAccounts.onEmailVerificationLink((token, done) => {\n  Accounts.verifyEmail(token, error => {\n    if (! error) {\n      loginButtonsSession.set('justVerifiedEmail', true);\n    }\n\n    done();\n    // XXX show something if there was an error.\n  });\n});\n\n\n//\n// resetPasswordDialog template\n//\n\nTemplate._resetPasswordDialog.events({\n  'click #login-buttons-reset-password-button': () => resetPassword(),\n  'keypress #reset-password-new-password': event => {\n    if (event.keyCode === 13)\n      resetPassword();\n  },\n  'click #login-buttons-cancel-reset-password': () => {\n    loginButtonsSession.set('resetPasswordToken', null);\n    if (doneCallback)\n      doneCallback();\n  }\n});\n\nconst resetPassword = () => {\n  loginButtonsSession.resetMessages();\n  const newPassword = document.getElementById('reset-password-new-password').value;\n  if (!validatePassword(newPassword))\n    return;\n\n  Accounts.resetPassword(\n    loginButtonsSession.get('resetPasswordToken'), newPassword,\n    error => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('resetPasswordToken', null);\n        loginButtonsSession.set('justResetPassword', true);\n        if (doneCallback)\n          doneCallback();\n      }\n    });\n};\n\nTemplate._resetPasswordDialog.helpers({\n  displayName,\n  inResetPasswordFlow: () => loginButtonsSession.get('resetPasswordToken'),\n});\n\n//\n// justResetPasswordDialog template\n//\n\nTemplate._justResetPasswordDialog.events({\n  'click #just-verified-dismiss-button': () =>\n    loginButtonsSession.set('justResetPassword', false),\n});\n\nTemplate._justResetPasswordDialog.helpers({\n  visible: () => loginButtonsSession.get('justResetPassword'),\n  displayName,\n});\n\n\n\n//\n// enrollAccountDialog template\n//\n\nconst enrollAccount = () => {\n  loginButtonsSession.resetMessages();\n  const password = document.getElementById('enroll-account-password').value;\n  if (!validatePassword(password))\n    return;\n\n  Accounts.resetPassword(\n    loginButtonsSession.get('enrollAccountToken'), password,\n    error => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('enrollAccountToken', null);\n        if (doneCallback)\n          doneCallback();\n      }\n    });\n};\n\nTemplate._enrollAccountDialog.events({\n  'click #login-buttons-enroll-account-button': enrollAccount,\n  'keypress #enroll-account-password': event => {\n    if (event.keyCode === 13)\n      enrollAccount();\n  },\n  'click #login-buttons-cancel-enroll-account': () => {\n    loginButtonsSession.set('enrollAccountToken', null);\n    if (doneCallback)\n      doneCallback();\n  }\n});\n\nTemplate._enrollAccountDialog.helpers({\n  displayName,\n  inEnrollAccountFlow: () => loginButtonsSession.get('enrollAccountToken'),\n});\n\n\n//\n// justVerifiedEmailDialog template\n//\n\nTemplate._justVerifiedEmailDialog.events({\n  'click #just-verified-dismiss-button': () =>\n    loginButtonsSession.set('justVerifiedEmail', false),\n});\n\nTemplate._justVerifiedEmailDialog.helpers({\n  visible: () => loginButtonsSession.get('justVerifiedEmail'),\n  displayName,\n});\n\n\n//\n// loginButtonsMessagesDialog template\n//\n\nTemplate._loginButtonsMessagesDialog.events({\n  'click #messages-dialog-dismiss-button': () =>\n    loginButtonsSession.resetMessages(),\n});\n\nTemplate._loginButtonsMessagesDialog.helpers({\n  visible: () => {\n    const hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n    return !dropdown() && hasMessage;\n  }\n});\n\n\n//\n// configureLoginServiceDialog template\n//\n\nTemplate._configureLoginServiceDialog.events({\n  'click .configure-login-service-dismiss-button': () =>\n    loginButtonsSession.set('configureLoginServiceDialogVisible', false),\n  'click #configure-login-service-dialog-save-configuration': () => {\n    if (loginButtonsSession.get('configureLoginServiceDialogVisible') &&\n        ! loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\n      // Prepare the configuration document for this login service\n      const serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n      const configuration = {\n        service: serviceName\n      };\n\n      // Fetch the value of each input field\n      configurationFields().forEach(field => {\n        configuration[field.property] = document.getElementById(\n          `configure-login-service-dialog-${field.property}`).value\n          .replace(/^\\s*|\\s*$/g, \"\"); // trim() doesnt work on IE8;\n      });\n\n      // Replacement of single use of jQuery in this package so we can remove\n      // the dependency\n      const inputs = [].slice.call( // Because HTMLCollections aren't arrays\n        document\n          .getElementById('configure-login-service-dialog')\n          .getElementsByTagName('input')\n      );\n\n      configuration.loginStyle =\n        document.querySelector('#configure-login-service-dialog input[name=\"loginStyle\"]:checked').value;\n\n      // Configure this login service\n      Accounts.connection.call(\n        \"configureLoginService\", configuration, (error, result) => {\n          if (error)\n            Meteor._debug(`Error configuring login service ${serviceName}`,\n                          error);\n          else\n            loginButtonsSession.set('configureLoginServiceDialogVisible',\n                                    false);\n        });\n    }\n  },\n  // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\n  // well. (Keeping the 'input' event means that this also fires when you use\n  // the mouse to change the contents of the field, eg 'Cut' menu item.)\n  'input, keyup input': event => {\n    // if the event fired on one of the configuration input fields,\n    // check whether we should enable the 'save configuration' button\n    if (event.target.id.indexOf('configure-login-service-dialog') === 0)\n      updateSaveDisabled();\n  }\n});\n\n// check whether the 'save configuration' button should be enabled.\n// this is a really strange way to implement this and a Forms\n// Abstraction would make all of this reactive, and simpler.\nconst updateSaveDisabled = () => {\n  const anyFieldEmpty = configurationFields().reduce((prev, field) =>\n    prev || document.getElementById(\n      `configure-login-service-dialog-${field.property}`\n    ).value === '',\n    false\n  );\n\n  loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\n};\n\n// Returns the appropriate template for this login service.  This\n// template should be defined in the service's package\nTemplate._configureLoginServiceDialog.templateForService = serviceName => {\n  serviceName = serviceName || loginButtonsSession.get('configureLoginServiceDialogServiceName');\n  // XXX Service providers should be able to specify their configuration\n  // template name.\n  return Template[`configureLoginServiceDialogFor${\n                  serviceName === 'meteor-developer' ?\n                   'MeteorDeveloper' :\n                   capitalize(serviceName)}`];\n};\n\nconst configurationFields = () => {\n  const template = Template._configureLoginServiceDialog.templateForService();\n  return template.fields();\n};\n\nTemplate._configureLoginServiceDialog.helpers({\n  configurationFields,\n  visible: () => loginButtonsSession.get('configureLoginServiceDialogVisible'),\n  // renders the appropriate template\n  configurationSteps: () =>\n    Template._configureLoginServiceDialog.templateForService(),\n  saveDisabled: () =>\n    loginButtonsSession.get('configureLoginServiceDialogSaveDisabled'),\n});\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nconst capitalize = str => {\n  str = str == null ? '' : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nTemplate._configureLoginOnDesktopDialog.helpers({\n  visible: () => loginButtonsSession.get('configureOnDesktopVisible'),\n});\n\nTemplate._configureLoginOnDesktopDialog.events({\n  'click #configure-on-desktop-dismiss-button': () =>\n    loginButtonsSession.set('configureOnDesktopVisible', false),\n});\n"]}}]