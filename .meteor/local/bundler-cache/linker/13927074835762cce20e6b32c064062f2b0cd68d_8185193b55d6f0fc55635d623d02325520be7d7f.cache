[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nAccounts = Package['accounts-base'].Accounts;\nRoles = Package['alanning:roles'].Roles;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"loan-management.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// imports/loan-management.js                                              //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\n!function (module1) {\n  let Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor(v) {\n      Meteor = v;\n    }\n  }, 0);\n  let Mongo;\n  module1.link(\"meteor/mongo\", {\n    Mongo(v) {\n      Mongo = v;\n    }\n  }, 1);\n  ___INIT_METEOR_FAST_REFRESH(module);\n  // imports/loan-management.js\n\n  // Shared methods\n  Meteor.methods({\n    calculateSquare(number) {\n      if (typeof number !== \"number\") {\n        throw new Meteor.Error(\"invalid-input\", \"Input must be a number\");\n      }\n      return number * number;\n    }\n  });\n\n  // Shared collection\n  SharedCollection = new Mongo.Collection(\"sharedCollection\");\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////\n\n}},\"client\":{\"main.jsx\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// client/main.jsx                                                         //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\n!function (module1) {\n  let Template;\n  module1.link(\"meteor/templating\", {\n    Template(v) {\n      Template = v;\n    }\n  }, 0);\n  let ReactiveVar;\n  module1.link(\"meteor/reactive-var\", {\n    ReactiveVar(v) {\n      ReactiveVar = v;\n    }\n  }, 1);\n  let Roles;\n  module1.link(\"meteor/alanning:roles\", {\n    Roles(v) {\n      Roles = v;\n    }\n  }, 2);\n  let moment;\n  module1.link(\"meteor/momentjs:moment\", {\n    moment(v) {\n      moment = v;\n    }\n  }, 3);\n  module1.link(\"/imports/loan-management.js\");\n  module1.link(\"/server/main.js\");\n  ___INIT_METEOR_FAST_REFRESH(module);\n  // client/main.js\n\n  Accounts.ui.config({\n    passwordSignupFields: 'USERNAME_AND_EMAIL'\n  });\n  Template.body.helpers({\n    isAdmin() {\n      return Roles.userIsInRole(Meteor.userId(), 'admin');\n    },\n    welcomeMessage() {\n      // Example: Accessing shared logic from imports/loan-management.js\n      return 'Welcome to the Loan Management App!';\n    }\n  });\n  Template.registerHelper('formatDate', function (date) {\n    return moment(date).format('MMMM D, YYYY');\n  });\n  Template.dashboard.helpers({\n    loans() {\n      return Loans.find();\n    }\n  });\n  Template.dashboard.events({\n    'click #requestLoan'(event, instance) {\n      const amount = parseFloat(prompt('Enter loan amount:'));\n      if (!isNaN(amount) && amount > 0) {\n        Meteor.call('requestLoan', amount);\n      }\n    },\n    'click #confirmPayment'(event, instance) {\n      const loanId = event.target.dataset.id;\n      if (confirm('Confirm payment for this loan?')) {\n        Meteor.call('confirmPayment', loanId);\n      }\n    }\n  });\n\n  // Define the Loans collection\n  Loans = new Mongo.Collection('loans');\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".css\",\n    \".jsx\"\n  ]\n});\n\nvar exports = require(\"/client/main.jsx\");","hash":"5c5b0759d5b5d6cb3cc594762eba77b31a5444ed","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/loan-management.js","client/main.jsx"],"names":["Meteor","methods","calculateSquare","number","Error","SharedCollection","Mongo","Collection","call","module","Accounts","ui","config","passwordSignupFields","Template","body","helpers","isAdmin","Roles","userIsInRole","userId","welcomeMessage","registerHelper","date","moment","format","dashboard","loans","Loans","find","events","click #requestLoan","event","instance","amount","parseFloat","prompt","isNaN","click #confirmPayment","loanId","target","dataset","id","confirm"],"mappings":";;;;;;;;;;;;;;;;;;;;;;EAAA;;EAIA;EACAA,MAAM,CAACC,OAAO,CAAC;IACbC,eAAeA,CAACC,MAAM,EAAE;MACtB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAM,IAAIH,MAAM,CAACI,KAAK,CAAC,eAAe,EAAE,wBAAwB,CAAC;MACnE;MAEA,OAAOD,MAAM,GAAGA,MAAM;IACxB;EACF,CAAC,CAAC;;EAEF;EACAE,gBAAgB,GAAG,IAAIC,KAAK,CAACC,UAAU,CAAC,kBAAkB,CAAC;AAAA,EAAAC,IAAA,OAAAC,MAAA,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EChB3D;;EAYAC,QAAQ,CAACC,EAAE,CAACC,MAAM,CAAC;IACjBC,oBAAoB,EAAE;EACxB,CAAC,CAAC;EAEFC,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC;IACpBC,OAAOA,CAAA,EAAG;MACR,OAAOC,KAAK,CAACC,YAAY,CAACnB,MAAM,CAACoB,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC;IACrD,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf;MACA,OAAO,qCAAqC;IAC9C;EACF,CAAC,CAAC;EAEFP,QAAQ,CAACQ,cAAc,CAAC,YAAY,EAAE,UAAUC,IAAI,EAAE;IACpD,OAAOC,MAAM,CAACD,IAAI,CAAC,CAACE,MAAM,CAAC,cAAc,CAAC;EAC5C,CAAC,CAAC;EAEFX,QAAQ,CAACY,SAAS,CAACV,OAAO,CAAC;IACzBW,KAAKA,CAAA,EAAG;MACN,OAAOC,KAAK,CAACC,IAAI,CAAC,CAAC;IACrB;EACF,CAAC,CAAC;EAEFf,QAAQ,CAACY,SAAS,CAACI,MAAM,CAAC;IACxB,oBAAoBC,CAACC,KAAK,EAAEC,QAAQ,EAAE;MACpC,MAAMC,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC,oBAAoB,CAAC,CAAC;MACvD,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;QAChClC,MAAM,CAACQ,IAAI,CAAC,aAAa,EAAE0B,MAAM,CAAC;MACpC;IACF,CAAC;IAED,uBAAuBI,CAACN,KAAK,EAAEC,QAAQ,EAAE;MACvC,MAAMM,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAACC,OAAO,CAACC,EAAE;MACtC,IAAIC,OAAO,CAAC,gCAAgC,CAAC,EAAE;QAC7C3C,MAAM,CAACQ,IAAI,CAAC,gBAAgB,EAAE+B,MAAM,CAAC;MACvC;IACF;EACF,CAAC,CAAC;;EAEF;EACAX,KAAK,GAAG,IAAItB,KAAK,CAACC,UAAU,CAAC,OAAO,CAAC;AAAA,EAAAC,IAAA,OAAAC,MAAA,E","file":"/app.js","sourcesContent":["// imports/loan-management.js\r\nimport { Meteor } from \"meteor/meteor\";\r\nimport { Mongo } from \"meteor/mongo\";\r\n\r\n// Shared methods\r\nMeteor.methods({\r\n  calculateSquare(number) {\r\n    if (typeof number !== \"number\") {\r\n      throw new Meteor.Error(\"invalid-input\", \"Input must be a number\");\r\n    }\r\n\r\n    return number * number;\r\n  },\r\n});\r\n\r\n// Shared collection\r\nSharedCollection = new Mongo.Collection(\"sharedCollection\");\r\n","// client/main.js\nimport { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Roles } from 'meteor/alanning:roles';\nimport { moment } from 'meteor/momentjs:moment';\n\n// Importing the shared logic file\nimport '/imports/loan-management.js';\n\n// Importing the server-side logic file (Note: this import does not execute code on the client)\nimport '/server/main.js';\n\nAccounts.ui.config({\n  passwordSignupFields: 'USERNAME_AND_EMAIL',\n});\n\nTemplate.body.helpers({\n  isAdmin() {\n    return Roles.userIsInRole(Meteor.userId(), 'admin');\n  },\n  welcomeMessage() {\n    // Example: Accessing shared logic from imports/loan-management.js\n    return 'Welcome to the Loan Management App!';\n  },\n});\n\nTemplate.registerHelper('formatDate', function (date) {\n  return moment(date).format('MMMM D, YYYY');\n});\n\nTemplate.dashboard.helpers({\n  loans() {\n    return Loans.find();\n  },\n});\n\nTemplate.dashboard.events({\n  'click #requestLoan'(event, instance) {\n    const amount = parseFloat(prompt('Enter loan amount:'));\n    if (!isNaN(amount) && amount > 0) {\n      Meteor.call('requestLoan', amount);\n    }\n  },\n\n  'click #confirmPayment'(event, instance) {\n    const loanId = event.target.dataset.id;\n    if (confirm('Confirm payment for this loan?')) {\n      Meteor.call('confirmPayment', loanId);\n    }\n  },\n});\n\n// Define the Loans collection\nLoans = new Mongo.Collection('loans');\n"]}}]