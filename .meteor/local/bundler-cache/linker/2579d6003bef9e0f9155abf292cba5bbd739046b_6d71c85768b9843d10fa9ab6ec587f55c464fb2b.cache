[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar Hook = Package['callback-hook'].Hook;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar URL = Package.url.URL;\nvar URLSearchParams = Package.url.URLSearchParams;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Accounts;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"client_main.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/client_main.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Accounts: function () {\n    return Accounts;\n  },\n  AccountsClient: function () {\n    return AccountsClient;\n  },\n  AccountsTest: function () {\n    return AccountsTest;\n  },\n  \"default\": function () {\n    return exports;\n  }\n});\nvar AccountsClient, AccountsTest;\nmodule.link(\"./accounts_client.js\", {\n  AccountsClient: function (v) {\n    AccountsClient = v;\n  },\n  AccountsTest: function (v) {\n    AccountsTest = v;\n  }\n}, 0);\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nmodule.runSetters(Accounts = new AccountsClient(), [\"Accounts\"]);\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_client.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_client.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\nmodule.export({\n  AccountsClient: function () {\n    return AccountsClient;\n  },\n  AccountsTest: function () {\n    return AccountsTest;\n  }\n});\nvar AccountsCommon;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon: function (v) {\n    AccountsCommon = v;\n  }\n}, 0);\nvar AccountsClient = /*#__PURE__*/function (_AccountsCommon) {\n  _inheritsLoose(AccountsClient, _AccountsCommon);\n  function AccountsClient(options) {\n    var _this;\n    _this = _AccountsCommon.call(this, options) || this;\n    _this._loggingIn = new ReactiveVar(false);\n    _this._loggingOut = new ReactiveVar(false);\n    _this._loginServicesHandle = _this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n    _this._pageLoadLoginCallbacks = [];\n    _this._pageLoadLoginAttemptInfo = null;\n    _this.savedHash = window.location.hash;\n    _this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    _this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    _this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    _this._loginCallbacksCalled = false;\n    return _this;\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  var _proto = AccountsClient.prototype;\n  _proto.userId = function () {\n    function userId() {\n      return this.connection.userId();\n    }\n    return userId;\n  }() // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  ;\n  _proto._setLoggingIn = function () {\n    function _setLoggingIn(x) {\n      this._loggingIn.set(x);\n    }\n    return _setLoggingIn;\n  }()\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  ;\n  _proto.loggingIn = function () {\n    function loggingIn() {\n      return this._loggingIn.get();\n    }\n    return loggingIn;\n  }()\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  ;\n  _proto.loggingOut = function () {\n    function loggingOut() {\n      return this._loggingOut.get();\n    }\n    return loggingOut;\n  }()\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  ;\n  _proto.registerClientLoginFunction = function () {\n    function registerClientLoginFunction(funcName, func) {\n      if (this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" has been defined already\");\n      }\n      this._loginFuncs[funcName] = func;\n    }\n    return registerClientLoginFunction;\n  }()\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  ;\n  _proto.callLoginFunction = function () {\n    function callLoginFunction(funcName) {\n      if (!this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" was not defined\");\n      }\n      for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        funcArgs[_key - 1] = arguments[_key];\n      }\n      return this._loginFuncs[funcName].apply(this, funcArgs);\n    }\n    return callLoginFunction;\n  }()\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  ;\n  _proto.applyLoginFunction = function () {\n    function applyLoginFunction(funcName, funcArgs) {\n      if (!this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" was not defined\");\n      }\n      return this._loginFuncs[funcName].apply(this, funcArgs);\n    }\n    return applyLoginFunction;\n  }()\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  ;\n  _proto.logout = function () {\n    function logout(callback) {\n      var _this2 = this;\n      this._loggingOut.set(true);\n      this.connection.apply('logout', [], {\n        wait: true\n      }, function (error, result) {\n        _this2._loggingOut.set(false);\n        _this2._loginCallbacksCalled = false;\n        if (error) {\n          callback && callback(error);\n        } else {\n          _this2.makeClientLoggedOut();\n          callback && callback();\n        }\n      });\n    }\n    return logout;\n  }()\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  ;\n  _proto.logoutOtherClients = function () {\n    function logoutOtherClients(callback) {\n      var _this3 = this;\n      // We need to make two method calls: one to replace our current token,\n      // and another to remove all tokens except the current one. We want to\n      // call these two methods one after the other, without any other\n      // methods running between them. For example, we don't want `logout`\n      // to be called in between our two method calls (otherwise the second\n      // method call would return an error). Another example: we don't want\n      // logout to be called before the callback for `getNewToken`;\n      // otherwise we would momentarily log the user out and then write a\n      // new token to localStorage.\n      //\n      // To accomplish this, we make both calls as wait methods, and queue\n      // them one after the other, without spinning off the event loop in\n      // between. Even though we queue `removeOtherTokens` before\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call\n      // until the `getNewToken` callback has finished running, because they\n      // are both wait methods.\n      this.connection.apply('getNewToken', [], {\n        wait: true\n      }, function (err, result) {\n        if (!err) {\n          _this3._storeLoginToken(_this3.userId(), result.token, result.tokenExpires);\n        }\n      });\n      this.connection.apply('removeOtherTokens', [], {\n        wait: true\n      }, function (err) {\n        return callback && callback(err);\n      });\n    }\n    return logoutOtherClients;\n  }() ///\n  /// LOGIN METHODS\n  ///\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  ;\n  _proto.callLoginMethod = function () {\n    function callLoginMethod(options) {\n      var _this4 = this;\n      options = _objectSpread({\n        methodName: 'login',\n        methodArguments: [{}],\n        _suppressLoggingIn: false\n      }, options);\n\n      // Set defaults for callback arguments to no-op functions; make sure we\n      // override falsey values too.\n      ['validateResult', 'userCallback'].forEach(function (f) {\n        if (!options[f]) options[f] = function () {\n          return null;\n        };\n      });\n      var called;\n      // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n      var loginCallbacks = function (_ref) {\n        var error = _ref.error,\n          loginDetails = _ref.loginDetails;\n        if (!called) {\n          called = true;\n          if (!error) {\n            _this4._onLoginHook.forEach(function (callback) {\n              callback(loginDetails);\n              return true;\n            });\n            _this4._loginCallbacksCalled = true;\n          } else {\n            _this4._loginCallbacksCalled = false;\n            _this4._onLoginFailureHook.forEach(function (callback) {\n              callback({\n                error: error\n              });\n              return true;\n            });\n          }\n          options.userCallback(error, loginDetails);\n        }\n      };\n      var reconnected = false;\n\n      // We want to set up onReconnect as soon as we get a result token back from\n      // the server, without having to wait for subscriptions to rerun. This is\n      // because if we disconnect and reconnect between getting the result and\n      // getting the results of subscription rerun, we WILL NOT re-send this\n      // method (because we never re-send methods whose results we've received)\n      // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n      // time. This will lead to makeClientLoggedIn(result.id) even though we\n      // haven't actually sent a login method!\n      //\n      // But by making sure that we send this \"resume\" login in that case (and\n      // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n      // client-side userId. (It's important that livedata_connection guarantees\n      // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n      // will occur before the callback from the resume login call.)\n      var onResultReceived = function (err, result) {\n        if (err || !result || !result.token) {\n          // Leave onReconnect alone if there was an error, so that if the user was\n          // already logged in they will still get logged in on reconnect.\n          // See issue #4970.\n        } else {\n          // First clear out any previously set Acccounts login onReconnect\n          // callback (to make sure we don't keep piling up duplicate callbacks,\n          // which would then all be triggered when reconnecting).\n          if (_this4._reconnectStopper) {\n            _this4._reconnectStopper.stop();\n          }\n          _this4._reconnectStopper = DDP.onReconnect(function (conn) {\n            if (conn != _this4.connection) {\n              return;\n            }\n            reconnected = true;\n            // If our token was updated in storage, use the latest one.\n            var storedToken = _this4._storedLoginToken();\n            if (storedToken) {\n              result = {\n                token: storedToken,\n                tokenExpires: _this4._storedLoginTokenExpires()\n              };\n            }\n            if (!result.tokenExpires) result.tokenExpires = _this4._tokenExpiration(new Date());\n            if (_this4._tokenExpiresSoon(result.tokenExpires)) {\n              _this4.makeClientLoggedOut();\n            } else {\n              _this4.callLoginMethod({\n                methodArguments: [{\n                  resume: result.token\n                }],\n                // Reconnect quiescence ensures that the user doesn't see an\n                // intermediate state before the login method finishes. So we don't\n                // need to show a logging-in animation.\n                _suppressLoggingIn: true,\n                userCallback: function (error, loginDetails) {\n                  var storedTokenNow = _this4._storedLoginToken();\n                  if (error) {\n                    // If we had a login error AND the current stored token is the\n                    // one that we tried to log in with, then declare ourselves\n                    // logged out. If there's a token in storage but it's not the\n                    // token that we tried to log in with, we don't know anything\n                    // about whether that token is valid or not, so do nothing. The\n                    // periodic localStorage poll will decide if we are logged in or\n                    // out with this token, if it hasn't already. Of course, even\n                    // with this check, another tab could insert a new valid token\n                    // immediately before we clear localStorage here, which would\n                    // lead to both tabs being logged out, but by checking the token\n                    // in storage right now we hope to make that unlikely to happen.\n                    //\n                    // If there is no token in storage right now, we don't have to\n                    // do anything; whatever code removed the token from storage was\n                    // responsible for calling `makeClientLoggedOut()`, or the\n                    // periodic localStorage poll will call `makeClientLoggedOut`\n                    // eventually if another tab wiped the token from storage.\n                    if (storedTokenNow && storedTokenNow === result.token) {\n                      _this4.makeClientLoggedOut();\n                    }\n                  }\n                  // Possibly a weird callback to call, but better than nothing if\n                  // there is a reconnect between \"login result received\" and \"data\n                  // ready\".\n                  loginCallbacks({\n                    error: error,\n                    loginDetails: loginDetails\n                  });\n                }\n              });\n            }\n          });\n        }\n      };\n\n      // This callback is called once the local cache of the current-user\n      // subscription (and all subscriptions, in fact) are guaranteed to be up to\n      // date.\n      var loggedInAndDataReadyCallback = function (error, result) {\n        // If the login method returns its result but the connection is lost\n        // before the data is in the local cache, it'll set an onReconnect (see\n        // above). The onReconnect will try to log in using the token, and *it*\n        // will call userCallback via its own version of this\n        // loggedInAndDataReadyCallback. So we don't have to do anything here.\n        if (reconnected) return;\n\n        // Note that we need to call this even if _suppressLoggingIn is true,\n        // because it could be matching a _setLoggingIn(true) from a\n        // half-completed pre-reconnect login method.\n        _this4._setLoggingIn(false);\n        if (error || !result) {\n          error = error || new Error(\"No result from call to \" + options.methodName);\n          loginCallbacks({\n            error: error\n          });\n          return;\n        }\n        try {\n          options.validateResult(result);\n        } catch (e) {\n          loginCallbacks({\n            error: e\n          });\n          return;\n        }\n\n        // Make the client logged in. (The user data should already be loaded!)\n        _this4.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n        loginCallbacks({\n          loginDetails: result\n        });\n      };\n      if (!options._suppressLoggingIn) {\n        this._setLoggingIn(true);\n      }\n      this.connection.apply(options.methodName, options.methodArguments, {\n        wait: true,\n        onResultReceived: onResultReceived\n      }, loggedInAndDataReadyCallback);\n    }\n    return callLoginMethod;\n  }();\n  _proto.makeClientLoggedOut = function () {\n    function makeClientLoggedOut() {\n      // Ensure client was successfully logged in before running logout hooks.\n      if (this.connection._userId) {\n        this._onLogoutHook.each(function (callback) {\n          callback();\n          return true;\n        });\n      }\n      this._unstoreLoginToken();\n      this.connection.setUserId(null);\n      this._reconnectStopper && this._reconnectStopper.stop();\n    }\n    return makeClientLoggedOut;\n  }();\n  _proto.makeClientLoggedIn = function () {\n    function makeClientLoggedIn(userId, token, tokenExpires) {\n      this._storeLoginToken(userId, token, tokenExpires);\n      this.connection.setUserId(userId);\n    }\n    return makeClientLoggedIn;\n  }() ///\n  /// LOGIN SERVICES\n  ///\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  ;\n  _proto.loginServicesConfigured = function () {\n    function loginServicesConfigured() {\n      return this._loginServicesHandle.ready();\n    }\n    return loginServicesConfigured;\n  }();\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  _proto.onPageLoadLogin = function () {\n    function onPageLoadLogin(f) {\n      if (this._pageLoadLoginAttemptInfo) {\n        f(this._pageLoadLoginAttemptInfo);\n      } else {\n        this._pageLoadLoginCallbacks.push(f);\n      }\n    }\n    return onPageLoadLogin;\n  }();\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _proto._pageLoadLogin = function () {\n    function _pageLoadLogin(attemptInfo) {\n      if (this._pageLoadLoginAttemptInfo) {\n        Meteor._debug('Ignoring unexpected duplicate page load login attempt info');\n        return;\n      }\n      this._pageLoadLoginCallbacks.forEach(function (callback) {\n        return callback(attemptInfo);\n      });\n      this._pageLoadLoginCallbacks = [];\n      this._pageLoadLoginAttemptInfo = attemptInfo;\n    }\n    return _pageLoadLogin;\n  }() // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  ;\n  _proto._startupCallback = function () {\n    function _startupCallback(callback) {\n      // Are we already logged in?\n      if (this._loginCallbacksCalled) {\n        // If already logged in before handler is registered, it's safe to\n        // assume type is a 'resume', so we execute the callback at the end\n        // of the queue so that Meteor.startup can complete before any\n        // embedded onLogin callbacks would execute.\n        Meteor.setTimeout(function () {\n          return callback({\n            type: 'resume'\n          });\n        }, 0);\n      }\n    }\n    return _startupCallback;\n  }() ///\n  /// LOGIN TOKENS\n  ///\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n  ;\n  _proto.loginWithToken = function () {\n    function loginWithToken(token, callback) {\n      this.callLoginMethod({\n        methodArguments: [{\n          resume: token\n        }],\n        userCallback: callback\n      });\n    }\n    return loginWithToken;\n  }();\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _proto._enableAutoLogin = function () {\n    function _enableAutoLogin() {\n      this._autoLoginEnabled = true;\n      this._pollStoredLoginToken();\n    }\n    return _enableAutoLogin;\n  }();\n  ///\n  /// STORING\n  ///\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _proto._isolateLoginTokenForTest = function () {\n    function _isolateLoginTokenForTest() {\n      this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n      this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n    }\n    return _isolateLoginTokenForTest;\n  }();\n  _proto._storeLoginToken = function () {\n    function _storeLoginToken(userId, token, tokenExpires) {\n      Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n      Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n      if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n      Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n      // to ensure that the localstorage poller doesn't end up trying to\n      // connect a second time\n      this._lastLoginTokenWhenPolled = token;\n    }\n    return _storeLoginToken;\n  }();\n  _proto._unstoreLoginToken = function () {\n    function _unstoreLoginToken() {\n      Meteor._localStorage.removeItem(this.USER_ID_KEY);\n      Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n      Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n      // to ensure that the localstorage poller doesn't end up trying to\n      // connect a second time\n      this._lastLoginTokenWhenPolled = null;\n    }\n    return _unstoreLoginToken;\n  }();\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _proto._storedLoginToken = function () {\n    function _storedLoginToken() {\n      return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n    }\n    return _storedLoginToken;\n  }();\n  _proto._storedLoginTokenExpires = function () {\n    function _storedLoginTokenExpires() {\n      return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n    }\n    return _storedLoginTokenExpires;\n  }();\n  _proto._storedUserId = function () {\n    function _storedUserId() {\n      return Meteor._localStorage.getItem(this.USER_ID_KEY);\n    }\n    return _storedUserId;\n  }();\n  _proto._unstoreLoginTokenIfExpiresSoon = function () {\n    function _unstoreLoginTokenIfExpiresSoon() {\n      var tokenExpires = this._storedLoginTokenExpires();\n      if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n        this._unstoreLoginToken();\n      }\n    }\n    return _unstoreLoginTokenIfExpiresSoon;\n  }();\n  ///\n  /// AUTO-LOGIN\n  ///\n  _proto._initLocalStorage = function () {\n    function _initLocalStorage() {\n      var _this5 = this;\n      // Key names to use in localStorage\n      this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n      this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n      this.USER_ID_KEY = \"Meteor.userId\";\n      var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n      if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n        // We want to keep using the same keys for existing apps that do not\n        // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n        // to log in again after an app updates to a version of Meteor that\n        // contains this code, but it's generally preferable to namespace the\n        // keys so that connections from distinct apps to distinct DDP URLs\n        // will be distinct in Meteor._localStorage.\n        var namespace = \":\" + this.connection._stream.rawUrl;\n        if (rootUrlPathPrefix) {\n          namespace += \":\" + rootUrlPathPrefix;\n        }\n        this.LOGIN_TOKEN_KEY += namespace;\n        this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n        this.USER_ID_KEY += namespace;\n      }\n      var token;\n      if (this._autoLoginEnabled) {\n        // Immediately try to log in via local storage, so that any DDP\n        // messages are sent after we have established our user account\n        this._unstoreLoginTokenIfExpiresSoon();\n        token = this._storedLoginToken();\n        if (token) {\n          // On startup, optimistically present us as logged in while the\n          // request is in flight. This reduces page flicker on startup.\n          var userId = this._storedUserId();\n          userId && this.connection.setUserId(userId);\n          this.loginWithToken(token, function (err) {\n            if (err) {\n              Meteor._debug(\"Error logging in with token: \" + err);\n              _this5.makeClientLoggedOut();\n            }\n            _this5._pageLoadLogin({\n              type: \"resume\",\n              allowed: !err,\n              error: err,\n              methodName: \"login\",\n              // XXX This is duplicate code with loginWithToken, but\n              // loginWithToken can also be called at other times besides\n              // page load.\n              methodArguments: [{\n                resume: token\n              }]\n            });\n          });\n        }\n      }\n\n      // Poll local storage every 3 seconds to login if someone logged in in\n      // another tab\n      this._lastLoginTokenWhenPolled = token;\n      if (this._pollIntervalTimer) {\n        // Unlikely that _initLocalStorage will be called more than once for\n        // the same AccountsClient instance, but just in case...\n        clearInterval(this._pollIntervalTimer);\n      }\n      this._pollIntervalTimer = setInterval(function () {\n        _this5._pollStoredLoginToken();\n      }, 3000);\n    }\n    return _initLocalStorage;\n  }();\n  _proto._pollStoredLoginToken = function () {\n    function _pollStoredLoginToken() {\n      var _this6 = this;\n      if (!this._autoLoginEnabled) {\n        return;\n      }\n      var currentLoginToken = this._storedLoginToken();\n\n      // != instead of !== just to make sure undefined and null are treated the same\n      if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n        if (currentLoginToken) {\n          this.loginWithToken(currentLoginToken, function (err) {\n            if (err) {\n              _this6.makeClientLoggedOut();\n            }\n          });\n        } else {\n          this.logout();\n        }\n      }\n      this._lastLoginTokenWhenPolled = currentLoginToken;\n    }\n    return _pollStoredLoginToken;\n  }();\n  ///\n  /// URLS\n  ///\n  _proto._initUrlMatching = function () {\n    function _initUrlMatching() {\n      // By default, allow the autologin process to happen.\n      this._autoLoginEnabled = true;\n\n      // We only support one callback per URL.\n      this._accountsCallbacks = {};\n\n      // Try to match the saved value of window.location.hash.\n      this._attemptToMatchHash();\n    }\n    return _initUrlMatching;\n  }();\n  // Separate out this functionality for testing\n  _proto._attemptToMatchHash = function () {\n    function _attemptToMatchHash() {\n      attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n    }\n    return _attemptToMatchHash;\n  }();\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  _proto.onResetPasswordLink = function () {\n    function onResetPasswordLink(callback) {\n      if (this._accountsCallbacks[\"reset-password\"]) {\n        Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n      }\n      this._accountsCallbacks[\"reset-password\"] = callback;\n    }\n    return onResetPasswordLink;\n  }();\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  _proto.onEmailVerificationLink = function () {\n    function onEmailVerificationLink(callback) {\n      if (this._accountsCallbacks[\"verify-email\"]) {\n        Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n      }\n      this._accountsCallbacks[\"verify-email\"] = callback;\n    }\n    return onEmailVerificationLink;\n  }();\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  _proto.onEnrollmentLink = function () {\n    function onEnrollmentLink(callback) {\n      if (this._accountsCallbacks[\"enroll-account\"]) {\n        Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n      }\n      this._accountsCallbacks[\"enroll-account\"] = callback;\n    }\n    return onEnrollmentLink;\n  }();\n  return AccountsClient;\n}(AccountsCommon);\n;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = function () {\n  return Accounts.loggingOut();\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  var Template = Package.blaze.Blaze.Template;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', function () {\n    return Meteor.loggingOut();\n  });\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingInOrOut', function () {\n    return Meteor.loggingIn() || Meteor.loggingOut();\n  });\n}\nvar defaultSuccessHandler = function (token, urlPart) {\n  var _this7 = this;\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (_this7._accountsCallbacks[urlPart]) {\n      _this7._accountsCallbacks[urlPart](token, function () {\n        return _this7._enableAutoLogin();\n      });\n    }\n  });\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nvar attemptToMatchHash = function (accounts, hash, success) {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(function (urlPart) {\n    var token;\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n};\n\n// Export for testing\nvar AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_common.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_common.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 1);\nmodule.export({\n  AccountsCommon: function () {\n    return AccountsCommon;\n  },\n  EXPIRE_TOKENS_INTERVAL_MS: function () {\n    return EXPIRE_TOKENS_INTERVAL_MS;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\n// config option keys\nvar VALID_CONFIG_KEYS = ['sendVerificationEmail', 'forbidClientAccountCreation', 'passwordEnrollTokenExpiration', 'passwordEnrollTokenExpirationInDays', 'restrictCreationByEmailDomain', 'loginExpirationInDays', 'loginExpiration', 'passwordResetTokenExpirationInDays', 'passwordResetTokenExpiration', 'ambiguousErrorMessages', 'bcryptRounds', 'defaultFieldSelector', 'loginTokenExpirationHours', 'tokenSequenceLength', 'collection'];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nvar AccountsCommon = /*#__PURE__*/function () {\n  function AccountsCommon(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback'\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback'\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback'\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    var lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n  var _proto = AccountsCommon.prototype;\n  _proto._initializeCollection = function () {\n    function _initializeCollection(options) {\n      if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n        throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n      }\n      var collectionName = 'users';\n      if (typeof options.collection === 'string') {\n        collectionName = options.collection;\n      }\n      var collection;\n      if (options.collection instanceof Mongo.Collection) {\n        collection = options.collection;\n      } else {\n        collection = new Mongo.Collection(collectionName, {\n          _preventAutopublish: true,\n          connection: this.connection\n        });\n      }\n      return collection;\n    }\n    return _initializeCollection;\n  }()\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  ;\n  _proto.userId = function () {\n    function userId() {\n      throw new Error('userId method not implemented');\n    }\n    return userId;\n  }() // merge the defaultFieldSelector with an existing options object\n  ;\n  _proto._addDefaultFieldSelector = function () {\n    function _addDefaultFieldSelector() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // this will be the most common case for most people, so make it quick\n      if (!this._options.defaultFieldSelector) return options;\n\n      // if no field selector then just use defaultFieldSelector\n      if (!options.fields) return _objectSpread(_objectSpread({}, options), {}, {\n        fields: this._options.defaultFieldSelector\n      });\n\n      // if empty field selector then the full user object is explicitly requested, so obey\n      var keys = Object.keys(options.fields);\n      if (!keys.length) return options;\n\n      // if the requested fields are +ve then ignore defaultFieldSelector\n      // assume they are all either +ve or -ve because Mongo doesn't like mixed\n      if (!!options.fields[keys[0]]) return options;\n\n      // The requested fields are -ve.\n      // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n      var keys2 = Object.keys(this._options.defaultFieldSelector);\n      return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread(_objectSpread({}, options), {}, {\n        fields: _objectSpread(_objectSpread({}, options.fields), this._options.defaultFieldSelector)\n      });\n    }\n    return _addDefaultFieldSelector;\n  }()\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  ;\n  _proto.user = function () {\n    function user(options) {\n      var userId = this.userId();\n      return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n    }\n    return user;\n  }()\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  ;\n  _proto.userAsync = function () {\n    function userAsync(options) {\n      var userId;\n      return _regeneratorRuntime.async(function () {\n        function userAsync$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              userId = this.userId();\n              return _context.abrupt(\"return\", userId ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options)) : null);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return userAsync$;\n      }(), null, this, null, Promise);\n    }\n    return userAsync;\n  }() // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   */\n  ;\n  _proto.config = function () {\n    function config(options) {\n      var _this = this;\n      // We don't want users to accidentally only call Accounts.config on the\n      // client, where some of the options will have partial effects (eg removing\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n      // is set, or redirecting Google login to a specific-domain page) without\n      // having their full effects.\n      if (Meteor.isServer) {\n        __meteor_runtime_config__.accountsConfigCalled = true;\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n        // XXX would be nice to \"crash\" the client and replace the UI with an error\n        // message, but there's no trivial way to do this.\n        Meteor._debug('Accounts.config was called on the client but not on the ' + 'server; some configuration options may not take effect.');\n      }\n\n      // We need to validate the oauthSecretKey option at the time\n      // Accounts.config is called. We also deliberately don't store the\n      // oauthSecretKey in Accounts._options.\n      if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n        if (Meteor.isClient) {\n          throw new Error('The oauthSecretKey option may only be specified on the server');\n        }\n        if (!Package['oauth-encryption']) {\n          throw new Error('The oauth-encryption package must be loaded to set oauthSecretKey');\n        }\n        Package['oauth-encryption'].OAuthEncryption.loadKey(options.oauthSecretKey);\n        options = _objectSpread({}, options);\n        delete options.oauthSecretKey;\n      }\n\n      // Validate config options keys\n      Object.keys(options).forEach(function (key) {\n        if (!VALID_CONFIG_KEYS.includes(key)) {\n          // TODO Consider just logging a debug message instead to allow for additional keys in the settings here?\n          throw new Meteor.Error(\"Accounts.config: Invalid key: \" + key);\n        }\n      });\n\n      // set values in Accounts._options\n      VALID_CONFIG_KEYS.forEach(function (key) {\n        if (key in options) {\n          if (key in _this._options) {\n            if (key !== 'collection') {\n              throw new Meteor.Error(\"Can't set `\" + key + \"` more than once\");\n            }\n          }\n          _this._options[key] = options[key];\n        }\n      });\n      if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n        this.users = this._initializeCollection(options);\n      }\n    }\n    return config;\n  }()\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  ;\n  _proto.onLogin = function () {\n    function onLogin(func) {\n      var ret = this._onLoginHook.register(func);\n      // call the just registered callback if already logged in\n      this._startupCallback(ret.callback);\n      return ret;\n    }\n    return onLogin;\n  }()\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  ;\n  _proto.onLoginFailure = function () {\n    function onLoginFailure(func) {\n      return this._onLoginFailureHook.register(func);\n    }\n    return onLoginFailure;\n  }()\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  ;\n  _proto.onLogout = function () {\n    function onLogout(func) {\n      return this._onLogoutHook.register(func);\n    }\n    return onLogout;\n  }();\n  _proto._initConnection = function () {\n    function _initConnection(options) {\n      if (!Meteor.isClient) {\n        return;\n      }\n\n      // The connection used by the Accounts system. This is the connection\n      // that will get logged in by Meteor.login(), and this is the\n      // connection whose login state will be reflected by Meteor.userId().\n      //\n      // It would be much preferable for this to be in accounts_client.js,\n      // but it has to be here because it's needed to create the\n      // Meteor.users collection.\n      if (options.connection) {\n        this.connection = options.connection;\n      } else if (options.ddpUrl) {\n        this.connection = DDP.connect(options.ddpUrl);\n      } else if (typeof __meteor_runtime_config__ !== 'undefined' && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client\n        // to a different authentication server. This is for a very\n        // particular use case that comes up when implementing a oauth\n        // server. Unsupported and may go away at any point in time.\n        //\n        // We will eventually provide a general way to use account-base\n        // against any DDP connection, not just one special one.\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n      } else {\n        this.connection = Meteor.connection;\n      }\n    }\n    return _initConnection;\n  }();\n  _proto._getTokenLifetimeMs = function () {\n    function _getTokenLifetimeMs() {\n      // When loginExpirationInDays is set to null, we'll use a really high\n      // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n      // unexpiring token.\n      var loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n      return this._options.loginExpiration || (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;\n    }\n    return _getTokenLifetimeMs;\n  }();\n  _proto._getPasswordResetTokenLifetimeMs = function () {\n    function _getPasswordResetTokenLifetimeMs() {\n      return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;\n    }\n    return _getPasswordResetTokenLifetimeMs;\n  }();\n  _proto._getPasswordEnrollTokenLifetimeMs = function () {\n    function _getPasswordEnrollTokenLifetimeMs() {\n      return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;\n    }\n    return _getPasswordEnrollTokenLifetimeMs;\n  }();\n  _proto._tokenExpiration = function () {\n    function _tokenExpiration(when) {\n      // We pass when through the Date constructor for backwards compatibility;\n      // `when` used to be a number.\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n    }\n    return _tokenExpiration;\n  }();\n  _proto._tokenExpiresSoon = function () {\n    function _tokenExpiresSoon(when) {\n      var minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n      if (minLifetimeMs > minLifetimeCapMs) {\n        minLifetimeMs = minLifetimeCapMs;\n      }\n      return new Date() > new Date(when) - minLifetimeMs;\n    }\n    return _tokenExpiresSoon;\n  }() // No-op on the server, overridden on the client.\n  ;\n  _proto._startupCallback = function () {\n    function _startupCallback(callback) {}\n    return _startupCallback;\n  }();\n  return AccountsCommon;\n}();\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = function (options) {\n  return Accounts.user(options);\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = function (options) {\n  return Accounts.userAsync(options);\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nvar EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;\n// 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nvar LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/accounts-base/client_main.js\");\n\n/* Exports */\nPackage._define(\"accounts-base\", exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["packages/accounts-base/client_main.js","packages/accounts-base/accounts_client.js","packages/accounts-base/accounts_common.js"],"names":["module","export","Accounts","AccountsClient","AccountsTest","default","exports","link","v","runSetters","Meteor","users","_objectSpread","_inheritsLoose","AccountsCommon","_AccountsCommon","options","_this","call","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","savedHash","window","location","hash","_initUrlMatching","_initLocalStorage","_loginFuncs","_loginCallbacksCalled","_proto","prototype","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","_len","arguments","length","funcArgs","Array","_key","apply","applyLoginFunction","logout","callback","_this2","wait","error","result","makeClientLoggedOut","logoutOtherClients","_this3","err","_storeLoginToken","token","tokenExpires","callLoginMethod","_this4","methodName","methodArguments","_suppressLoggingIn","forEach","f","called","loginCallbacks","_ref","loginDetails","_onLoginHook","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","_userId","_onLogoutHook","each","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","_startupCallback","setTimeout","type","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","_this5","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","_this6","currentLoginToken","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink","Package","blaze","Template","Blaze","registerHelper","user","urlPart","_this7","startup","accounts","success","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","_regeneratorRuntime","EXPIRE_TOKENS_INTERVAL_MS","VALID_CONFIG_KEYS","_options","undefined","_initConnection","_initializeCollection","Hook","bindEnvironment","debugPrintExceptions","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError","collection","Mongo","Collection","collectionName","_preventAutopublish","_addDefaultFieldSelector","defaultFieldSelector","fields","keys","Object","keys2","findOne","userAsync","async","userAsync$","_context","prev","next","abrupt","findOneAsync","Promise","config","isServer","accountsConfigCalled","hasOwnProperty","isClient","OAuthEncryption","loadKey","oauthSecretKey","key","includes","_name","onLogin","ret","register","onLoginFailure","onLogout","ddpUrl","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","loginExpiration","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpiration","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpiration","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","when","getTime","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {\n  AccountsClient,\n  AccountsTest,\n} from \"./accounts_client.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  Accounts,\n  AccountsClient,\n  AccountsTest,\n  // For backwards compatibility. Note that exporting an object as the\n  // default export is *not* the same as exporting its properties as named\n  // exports, as was previously assumed.\n  exports as default,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    this._loginCallbacksCalled = false;\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      this._loginCallbacksCalled = false;\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      (err, result) => {\n        if (! err) {\n          this._storeLoginToken(\n            this.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    this.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      err => callback && callback(err)\n    );\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = {\n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false,\n      ...options,\n    };\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f])\n        options[f] = () => null;\n    });\n\n    let called;\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    const loginCallbacks = ({ error, loginDetails }) => {\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.forEach(callback => {\n            callback(loginDetails);\n            return true;\n          });\n          this._loginCallbacksCalled = true;\n        } else {\n          this._loginCallbacksCalled = false;\n          this._onLoginFailureHook.forEach(callback => {\n            callback({ error });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    };\n\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires)\n            result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{resume: result.token}],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({ error, loginDetails });\n              }});\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected)\n        return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\n          `No result from call to ${options.methodName}`\n        );\n        loginCallbacks({ error });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({ error: e });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({ loginDetails: result });\n    };\n\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(\n      options.methodName,\n      options.methodArguments,\n      { wait: true, onResultReceived: onResultReceived },\n      loggedInAndDataReadyCallback);\n  }\n\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n\n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  };\n\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  };\n\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug(\n        'Ignoring unexpected duplicate page load login attempt info'\n      );\n      return;\n    }\n\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  _startupCallback(callback) {\n    // Are we already logged in?\n    if (this._loginCallbacksCalled) {\n      // If already logged in before handler is registered, it's safe to\n      // assume type is a 'resume', so we execute the callback at the end\n      // of the queue so that Meteor.startup can complete before any\n      // embedded onLogin callbacks would execute.\n      Meteor.setTimeout(() => callback({ type: 'resume' }), 0);\n    }\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  };\n\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  };\n\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  };\n\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (! tokenExpires)\n      tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  };\n\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  };\n\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  };\n\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  };\n\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  };\n\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  };\n\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = `:${this.connection._stream.rawUrl}`;\n      if (rootUrlPathPrefix) {\n        namespace += `:${rootUrlPathPrefix}`;\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(`Error logging in with token: ${err}`);\n            this.makeClientLoggedOut();\n          }\n\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{resume: token}]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  };\n\n  _pollStoredLoginToken() {\n    if (! this._autoLoginEnabled) {\n      return;\n    }\n\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, (err) => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  };\n\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n\n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n\n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  };\n\n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  };\n\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  };\n\n};\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) =>\n  Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const { Template } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper(\n    'loggingInOrOut',\n    () => Meteor.loggingIn() || Meteor.loggingOut()\n  );\n}\n\nconst defaultSuccessHandler = function(token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n}\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n\n    const tokenRegex = new RegExp(`^\\\\#\\\\/${urlPart}\\\\/(.*)$`);\n    const match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\n// Export for testing\nexport const AccountsTest = {\n  attemptToMatchHash: (hash, success) =>\n    attemptToMatchHash(Accounts, hash, success),\n};\n","import { Meteor } from 'meteor/meteor';\n\n// config option keys\nconst VALID_CONFIG_KEYS = [\n  'sendVerificationEmail',\n  'forbidClientAccountCreation',\n  'passwordEnrollTokenExpiration',\n  'passwordEnrollTokenExpirationInDays',\n  'restrictCreationByEmailDomain',\n  'loginExpirationInDays',\n  'loginExpiration',\n  'passwordResetTokenExpirationInDays',\n  'passwordResetTokenExpiration',\n  'ambiguousErrorMessages',\n  'bcryptRounds',\n  'defaultFieldSelector',\n  'loginTokenExpirationHours',\n  'tokenSequenceLength',\n  'collection',\n];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback',\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback',\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback',\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function(\n      description\n    ) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n\n  _initializeCollection(options) {\n    if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n      throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n    }\n\n    let collectionName = 'users';\n    if (typeof options.collection === 'string') {\n      collectionName = options.collection;\n    }\n\n    let collection;\n    if (options.collection instanceof Mongo.Collection) {\n      collection = options.collection;\n    } else {\n      collection = new Mongo.Collection(collectionName, {\n        _preventAutopublish: true,\n        connection: this.connection,\n      });\n    }\n\n    return collection;\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error('userId method not implemented');\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields)\n      return {\n        ...options,\n        fields: this._options.defaultFieldSelector,\n      };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]]\n      ? options\n      : {\n          ...options,\n          fields: {\n            ...options.fields,\n            ...this._options.defaultFieldSelector,\n          },\n        };\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOne(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  async userAsync(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\n        'Accounts.config was called on the client but not on the ' +\n          'server; some configuration options may not take effect.'\n      );\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\n          'The oauthSecretKey option may only be specified on the server'\n        );\n      }\n      if (!Package['oauth-encryption']) {\n        throw new Error(\n          'The oauth-encryption package must be loaded to set oauthSecretKey'\n        );\n      }\n      Package['oauth-encryption'].OAuthEncryption.loadKey(\n        options.oauthSecretKey\n      );\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // Validate config options keys\n    Object.keys(options).forEach(key => {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        // TODO Consider just logging a debug message instead to allow for additional keys in the settings here?\n        throw new Meteor.Error(`Accounts.config: Invalid key: ${key}`);\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_CONFIG_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          if (key !== 'collection') {\n            throw new Meteor.Error(`Can't set \\`${key}\\` more than once`);\n          }\n        }\n        this._options[key] = options[key];\n      }\n    });\n\n    if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n      this.users = this._initializeCollection(options);\n    }\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (\n      typeof __meteor_runtime_config__ !== 'undefined' &&\n      __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n    ) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(\n        __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n      );\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      this._options.loginExpirationInDays === null\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (\n      this._options.loginExpiration ||\n      (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (\n      this._options.passwordResetTokenExpiration ||\n      (this._options.passwordResetTokenExpirationInDays ||\n        DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (\n      this._options.passwordEnrollTokenExpiration ||\n      (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > new Date(when) - minLifetimeMs;\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = options => Accounts.user(options);\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = options => Accounts.userAsync(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n"]}}]