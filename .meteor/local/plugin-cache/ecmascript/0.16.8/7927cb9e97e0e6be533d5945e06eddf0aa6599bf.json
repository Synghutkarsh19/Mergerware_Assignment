{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"D:\\mergerware\\loan-management-app\\packages\\blaze\\view.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/blaze/view.js","filename":"D:\\mergerware\\loan-management-app\\packages\\blaze\\view.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"D:\\mergerware\\loan-management-app","root":"D:\\mergerware\\loan-management-app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"MemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"D:\\mergerware\\loan-management-app\\packages\\blaze\\view.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/blaze/view.js"}},"code":"/// [new] Blaze.View([name], renderMethod)\n///\n/// Blaze.View is the building block of reactive DOM.  Views have\n/// the following features:\n///\n/// * lifecycle callbacks - Views are created, rendered, and destroyed,\n///   and callbacks can be registered to fire when these things happen.\n///\n/// * parent pointer - A View points to its parentView, which is the\n///   View that caused it to be rendered.  These pointers form a\n///   hierarchy or tree of Views.\n///\n/// * render() method - A View's render() method specifies the DOM\n///   (or HTML) content of the View.  If the method establishes\n///   reactive dependencies, it may be re-run.\n///\n/// * a DOMRange - If a View is rendered to DOM, its position and\n///   extent in the DOM are tracked using a DOMRange object.\n///\n/// When a View is constructed by calling Blaze.View, the View is\n/// not yet considered \"created.\"  It doesn't have a parentView yet,\n/// and no logic has been run to initialize the View.  All real\n/// work is deferred until at least creation time, when the onViewCreated\n/// callbacks are fired, which happens when the View is \"used\" in\n/// some way that requires it to be rendered.\n///\n/// ...more lifecycle stuff\n///\n/// `name` is an optional string tag identifying the View.  The only\n/// time it's used is when looking in the View tree for a View of a\n/// particular name; for example, data contexts are stored on Views\n/// of name \"with\".  Names are also useful when debugging, so in\n/// general it's good for functions that create Views to set the name.\n/// Views associated with templates have names of the form \"Template.foo\".\n\n/**\n * A binding is either `undefined` (pending), `{ error }` (rejected), or\n * `{ value }` (resolved). Synchronous values are immediately resolved (i.e.,\n * `{ value }` is used). The other states are reserved for asynchronous bindings\n * (i.e., values wrapped with `Promise`s).\n * @typedef {{ error: unknown } | { value: unknown } | undefined} Binding\n */\n\n/**\n * @class\n * @summary Constructor for a View, which represents a reactive region of DOM.\n * @locus Client\n * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).\n * @param {Function} renderFunction A function that returns [*renderable content*](#Renderable-Content).  In this function, `this` is bound to the View.\n */\nBlaze.View = function (name, render) {\n  if (!(this instanceof Blaze.View))\n    // called without `new`\n    return new Blaze.View(name, render);\n  if (typeof name === 'function') {\n    // omitted \"name\" argument\n    render = name;\n    name = '';\n  }\n  this.name = name;\n  this._render = render;\n  this._callbacks = {\n    created: null,\n    rendered: null,\n    destroyed: null\n  };\n\n  // Setting all properties here is good for readability,\n  // and also may help Chrome optimize the code by keeping\n  // the View object from changing shape too much.\n  this.isCreated = false;\n  this._isCreatedForExpansion = false;\n  this.isRendered = false;\n  this._isAttached = false;\n  this.isDestroyed = false;\n  this._isInRender = false;\n  this.parentView = null;\n  this._domrange = null;\n  // This flag is normally set to false except for the cases when view's parent\n  // was generated as part of expanding some syntactic sugar expressions or\n  // methods.\n  // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular\n  // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the\n  // users don't know anything about these generated parent views, Blaze needs\n  // this information to be available on views to make smarter decisions. For\n  // example: removing the generated parent view with the view on Blaze.remove.\n  this._hasGeneratedParent = false;\n  // Bindings accessible to children views (via view.lookup('name')) within the\n  // closest template view.\n  /** @type {Record<string, ReactiveVar<Binding>>} */\n  this._scopeBindings = {};\n  this.renderCount = 0;\n};\nBlaze.View.prototype._render = function () {\n  return null;\n};\nBlaze.View.prototype.onViewCreated = function (cb) {\n  this._callbacks.created = this._callbacks.created || [];\n  this._callbacks.created.push(cb);\n};\nBlaze.View.prototype._onViewRendered = function (cb) {\n  this._callbacks.rendered = this._callbacks.rendered || [];\n  this._callbacks.rendered.push(cb);\n};\nBlaze.View.prototype.onViewReady = function (cb) {\n  var self = this;\n  var fire = function () {\n    Tracker.afterFlush(function () {\n      if (!self.isDestroyed) {\n        Blaze._withCurrentView(self, function () {\n          cb.call(self);\n        });\n      }\n    });\n  };\n  self._onViewRendered(function () {\n    function onViewRendered() {\n      if (self.isDestroyed) return;\n      if (!self._domrange.attached) self._domrange.onAttached(fire);else fire();\n    }\n    return onViewRendered;\n  }());\n};\nBlaze.View.prototype.onViewDestroyed = function (cb) {\n  this._callbacks.destroyed = this._callbacks.destroyed || [];\n  this._callbacks.destroyed.push(cb);\n};\nBlaze.View.prototype.removeViewDestroyedListener = function (cb) {\n  var destroyed = this._callbacks.destroyed;\n  if (!destroyed) return;\n  var index = destroyed.lastIndexOf(cb);\n  if (index !== -1) {\n    // XXX You'd think the right thing to do would be splice, but _fireCallbacks\n    // gets sad if you remove callbacks while iterating over the list.  Should\n    // change this to use callback-hook or EventEmitter or something else that\n    // properly supports removal.\n    destroyed[index] = null;\n  }\n};\n\n/// View#autorun(func)\n///\n/// Sets up a Tracker autorun that is \"scoped\" to this View in two\n/// important ways: 1) Blaze.currentView is automatically set\n/// on every re-run, and 2) the autorun is stopped when the\n/// View is destroyed.  As with Tracker.autorun, the first run of\n/// the function is immediate, and a Computation object that can\n/// be used to stop the autorun is returned.\n///\n/// View#autorun is meant to be called from View callbacks like\n/// onViewCreated, or from outside the rendering process.  It may not\n/// be called before the onViewCreated callbacks are fired (too early),\n/// or from a render() method (too confusing).\n///\n/// Typically, autoruns that update the state\n/// of the View (as in Blaze.With) should be started from an onViewCreated\n/// callback.  Autoruns that update the DOM should be started\n/// from either onViewCreated (guarded against the absence of\n/// view._domrange), or onViewReady.\nBlaze.View.prototype.autorun = function (f, _inViewScope, displayName) {\n  var self = this;\n\n  // The restrictions on when View#autorun can be called are in order\n  // to avoid bad patterns, like creating a Blaze.View and immediately\n  // calling autorun on it.  A freshly created View is not ready to\n  // have logic run on it; it doesn't have a parentView, for example.\n  // It's when the View is materialized or expanded that the onViewCreated\n  // handlers are fired and the View starts up.\n  //\n  // Letting the render() method call `this.autorun()` is problematic\n  // because of re-render.  The best we can do is to stop the old\n  // autorun and start a new one for each render, but that's a pattern\n  // we try to avoid internally because it leads to helpers being\n  // called extra times, in the case where the autorun causes the\n  // view to re-render (and thus the autorun to be torn down and a\n  // new one established).\n  //\n  // We could lift these restrictions in various ways.  One interesting\n  // idea is to allow you to call `view.autorun` after instantiating\n  // `view`, and automatically wrap it in `view.onViewCreated`, deferring\n  // the autorun so that it starts at an appropriate time.  However,\n  // then we can't return the Computation object to the caller, because\n  // it doesn't exist yet.\n  if (!self.isCreated) {\n    throw new Error(\"View#autorun must be called from the created callback at the earliest\");\n  }\n  if (this._isInRender) {\n    throw new Error(\"Can't call View#autorun from inside render(); try calling it from the created or rendered callback\");\n  }\n  var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;\n  var func = function () {\n    function viewAutorun(c) {\n      return Blaze._withCurrentView(_inViewScope || self, function () {\n        return Blaze.Template._withTemplateInstanceFunc(templateInstanceFunc, function () {\n          return f.call(self, c);\n        });\n      });\n    }\n    return viewAutorun;\n  }();\n\n  // Give the autorun function a better name for debugging and profiling.\n  // The `displayName` property is not part of the spec but browsers like Chrome\n  // and Firefox prefer it in debuggers over the name function was declared by.\n  func.displayName = (self.name || 'anonymous') + ':' + (displayName || 'anonymous');\n  var comp = Tracker.autorun(func);\n  var stopComputation = function () {\n    comp.stop();\n  };\n  self.onViewDestroyed(stopComputation);\n  comp.onStop(function () {\n    self.removeViewDestroyedListener(stopComputation);\n  });\n  return comp;\n};\nBlaze.View.prototype._errorIfShouldntCallSubscribe = function () {\n  var self = this;\n  if (!self.isCreated) {\n    throw new Error(\"View#subscribe must be called from the created callback at the earliest\");\n  }\n  if (self._isInRender) {\n    throw new Error(\"Can't call View#subscribe from inside render(); try calling it from the created or rendered callback\");\n  }\n  if (self.isDestroyed) {\n    throw new Error(\"Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.\");\n  }\n};\n\n/**\n * Just like Blaze.View#autorun, but with Meteor.subscribe instead of\n * Tracker.autorun. Stop the subscription when the view is destroyed.\n * @return {SubscriptionHandle} A handle to the subscription so that you can\n * see if it is ready, or stop it manually\n */\nBlaze.View.prototype.subscribe = function (args, options) {\n  var self = this;\n  options = options || {};\n  self._errorIfShouldntCallSubscribe();\n  var subHandle;\n  if (options.connection) {\n    subHandle = options.connection.subscribe.apply(options.connection, args);\n  } else {\n    subHandle = Meteor.subscribe.apply(Meteor, args);\n  }\n  self.onViewDestroyed(function () {\n    subHandle.stop();\n  });\n  return subHandle;\n};\nBlaze.View.prototype.firstNode = function () {\n  if (!this._isAttached) throw new Error(\"View must be attached before accessing its DOM\");\n  return this._domrange.firstNode();\n};\nBlaze.View.prototype.lastNode = function () {\n  if (!this._isAttached) throw new Error(\"View must be attached before accessing its DOM\");\n  return this._domrange.lastNode();\n};\nBlaze._fireCallbacks = function (view, which) {\n  Blaze._withCurrentView(view, function () {\n    Tracker.nonreactive(function () {\n      function fireCallbacks() {\n        var cbs = view._callbacks[which];\n        for (var i = 0, N = cbs && cbs.length; i < N; i++) cbs[i] && cbs[i].call(view);\n      }\n      return fireCallbacks;\n    }());\n  });\n};\nBlaze._createView = function (view, parentView, forExpansion) {\n  if (view.isCreated) throw new Error(\"Can't render the same View twice\");\n  view.parentView = parentView || null;\n  view.isCreated = true;\n  if (forExpansion) view._isCreatedForExpansion = true;\n  Blaze._fireCallbacks(view, 'created');\n};\nvar doFirstRender = function (view, initialContent) {\n  var domrange = new Blaze._DOMRange(initialContent);\n  view._domrange = domrange;\n  domrange.view = view;\n  view.isRendered = true;\n  Blaze._fireCallbacks(view, 'rendered');\n  var teardownHook = null;\n  domrange.onAttached(function () {\n    function attached(range, element) {\n      view._isAttached = true;\n      teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(element, function () {\n        function teardown() {\n          Blaze._destroyView(view, true /* _skipNodes */);\n        }\n        return teardown;\n      }());\n    }\n    return attached;\n  }());\n\n  // tear down the teardown hook\n  view.onViewDestroyed(function () {\n    teardownHook && teardownHook.stop();\n    teardownHook = null;\n  });\n  return domrange;\n};\n\n// Take an uncreated View `view` and create and render it to DOM,\n// setting up the autorun that updates the View.  Returns a new\n// DOMRange, which has been associated with the View.\n//\n// The private arguments `_workStack` and `_intoArray` are passed in\n// by Blaze._materializeDOM and are only present for recursive calls\n// (when there is some other _materializeView on the stack).  If\n// provided, then we avoid the mutual recursion of calling back into\n// Blaze._materializeDOM so that deep View hierarchies don't blow the\n// stack.  Instead, we push tasks onto workStack for the initial\n// rendering and subsequent setup of the View, and they are done after\n// we return.  When there is a _workStack, we do not return the new\n// DOMRange, but instead push it into _intoArray from a _workStack\n// task.\nBlaze._materializeView = function (view, parentView, _workStack, _intoArray) {\n  Blaze._createView(view, parentView);\n  var domrange;\n  var lastHtmljs;\n  // We don't expect to be called in a Computation, but just in case,\n  // wrap in Tracker.nonreactive.\n  Tracker.nonreactive(function () {\n    view.autorun(function () {\n      function doRender(c) {\n        // `view.autorun` sets the current view.\n        view.renderCount++;\n        view._isInRender = true;\n        // Any dependencies that should invalidate this Computation come\n        // from this line:\n        var htmljs = view._render();\n        view._isInRender = false;\n        if (!c.firstRun && !Blaze._isContentEqual(lastHtmljs, htmljs)) {\n          Tracker.nonreactive(function () {\n            function doMaterialize() {\n              // re-render\n              var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);\n              domrange.setMembers(rangesAndNodes);\n              Blaze._fireCallbacks(view, 'rendered');\n            }\n            return doMaterialize;\n          }());\n        }\n        lastHtmljs = htmljs;\n\n        // Causes any nested views to stop immediately, not when we call\n        // `setMembers` the next time around the autorun.  Otherwise,\n        // helpers in the DOM tree to be replaced might be scheduled\n        // to re-run before we have a chance to stop them.\n        Tracker.onInvalidate(function () {\n          if (domrange) {\n            domrange.destroyMembers();\n          }\n        });\n      }\n      return doRender;\n    }(), undefined, 'materialize');\n\n    // first render.  lastHtmljs is the first htmljs.\n    var initialContents;\n    if (!_workStack) {\n      initialContents = Blaze._materializeDOM(lastHtmljs, [], view);\n      domrange = doFirstRender(view, initialContents);\n      initialContents = null; // help GC because we close over this scope a lot\n    } else {\n      // We're being called from Blaze._materializeDOM, so to avoid\n      // recursion and save stack space, provide a description of the\n      // work to be done instead of doing it.  Tasks pushed onto\n      // _workStack will be done in LIFO order after we return.\n      // The work will still be done within a Tracker.nonreactive,\n      // because it will be done by some call to Blaze._materializeDOM\n      // (which is always called in a Tracker.nonreactive).\n      initialContents = [];\n      // push this function first so that it happens last\n      _workStack.push(function () {\n        domrange = doFirstRender(view, initialContents);\n        initialContents = null; // help GC because of all the closures here\n        _intoArray.push(domrange);\n      });\n      // now push the task that calculates initialContents\n      _workStack.push(Blaze._bind(Blaze._materializeDOM, null, lastHtmljs, initialContents, view, _workStack));\n    }\n  });\n  if (!_workStack) {\n    return domrange;\n  } else {\n    return null;\n  }\n};\n\n// Expands a View to HTMLjs, calling `render` recursively on all\n// Views and evaluating any dynamic attributes.  Calls the `created`\n// callback, but not the `materialized` or `rendered` callbacks.\n// Destroys the view immediately, unless called in a Tracker Computation,\n// in which case the view will be destroyed when the Computation is\n// invalidated.  If called in a Tracker Computation, the result is a\n// reactive string; that is, the Computation will be invalidated\n// if any changes are made to the view or subviews that might affect\n// the HTML.\nBlaze._expandView = function (view, parentView) {\n  Blaze._createView(view, parentView, true /*forExpansion*/);\n  view._isInRender = true;\n  var htmljs = Blaze._withCurrentView(view, function () {\n    return view._render();\n  });\n  view._isInRender = false;\n  var result = Blaze._expand(htmljs, view);\n  if (Tracker.active) {\n    Tracker.onInvalidate(function () {\n      Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n  return result;\n};\n\n// Options: `parentView`\nBlaze._HTMLJSExpander = HTML.TransformingVisitor.extend();\nBlaze._HTMLJSExpander.def({\n  visitObject: function (x) {\n    if (x instanceof Blaze.Template) x = x.constructView();\n    if (x instanceof Blaze.View) return Blaze._expandView(x, this.parentView);\n\n    // this will throw an error; other objects are not allowed!\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    // expand dynamic attributes\n    if (typeof attrs === 'function') attrs = Blaze._withCurrentView(this.parentView, attrs);\n\n    // call super (e.g. for case where `attrs` is an array)\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    // expand attribute values that are functions.  Any attribute value\n    // that contains Views must be wrapped in a function.\n    if (typeof value === 'function') value = Blaze._withCurrentView(this.parentView, value);\n    return HTML.TransformingVisitor.prototype.visitAttribute.call(this, name, value, tag);\n  }\n});\n\n// Return Blaze.currentView, but only if it is being rendered\n// (i.e. we are in its render() method).\nvar currentViewIfRendering = function () {\n  var view = Blaze.currentView;\n  return view && view._isInRender ? view : null;\n};\nBlaze._expand = function (htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return new Blaze._HTMLJSExpander({\n    parentView: parentView\n  }).visit(htmljs);\n};\nBlaze._expandAttributes = function (attrs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return new Blaze._HTMLJSExpander({\n    parentView: parentView\n  }).visitAttributes(attrs);\n};\nBlaze._destroyView = function (view, _skipNodes) {\n  if (view.isDestroyed) return;\n  view.isDestroyed = true;\n\n  // Destroy views and elements recursively.  If _skipNodes,\n  // only recurse up to views, not elements, for the case where\n  // the backend (jQuery) is recursing over the elements already.\n\n  if (view._domrange) view._domrange.destroyMembers(_skipNodes);\n\n  // XXX: fire callbacks after potential members are destroyed\n  // otherwise it's tracker.flush will cause the above line will\n  // not be called and their views won't be destroyed\n  // Involved issues: DOMRange \"Must be attached\" error, mem leak\n\n  Blaze._fireCallbacks(view, 'destroyed');\n};\nBlaze._destroyNode = function (node) {\n  if (node.nodeType === 1) Blaze._DOMBackend.Teardown.tearDownElement(node);\n};\n\n// Are the HTMLjs entities `a` and `b` the same?  We could be\n// more elaborate here but the point is to catch the most basic\n// cases.\nBlaze._isContentEqual = function (a, b) {\n  if (a instanceof HTML.Raw) {\n    return b instanceof HTML.Raw && a.value === b.value;\n  } else if (a == null) {\n    return b == null;\n  } else {\n    return a === b && (typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string');\n  }\n};\n\n/**\n * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n * @locus Client\n * @type {Blaze.View}\n */\nBlaze.currentView = null;\n\n/**\n * @template T\n * @param {Blaze.View} view\n * @param {() => T} func\n * @returns {T}\n */\nBlaze._withCurrentView = function (view, func) {\n  var oldView = Blaze.currentView;\n  try {\n    Blaze.currentView = view;\n    return func();\n  } finally {\n    Blaze.currentView = oldView;\n  }\n};\n\n// Blaze.render publicly takes a View or a Template.\n// Privately, it takes any HTMLJS (extended with Views and Templates)\n// except null or undefined, or a function that returns any extended\n// HTMLJS.\nvar checkRenderContent = function (content) {\n  if (content === null) throw new Error(\"Can't render null\");\n  if (typeof content === 'undefined') throw new Error(\"Can't render undefined\");\n  if (content instanceof Blaze.View || content instanceof Blaze.Template || typeof content === 'function') return;\n  try {\n    // Throw if content doesn't look like HTMLJS at the top level\n    // (i.e. verify that this is an HTML.Tag, or an array,\n    // or a primitive, etc.)\n    new HTML.Visitor().visit(content);\n  } catch (e) {\n    // Make error message suitable for public API\n    throw new Error(\"Expected Template or View\");\n  }\n};\n\n// For Blaze.render and Blaze.toHTML, take content and\n// wrap it in a View, unless it's a single View or\n// Template already.\nvar contentAsView = function (content) {\n  checkRenderContent(content);\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    var func = content;\n    if (typeof func !== 'function') {\n      func = function () {\n        return content;\n      };\n    }\n    return Blaze.View('render', func);\n  }\n};\n\n// For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content\n// in a function, if necessary, so it can be a content arg to\n// a Blaze.With.\nvar contentAsFunc = function (content) {\n  checkRenderContent(content);\n  if (typeof content !== 'function') {\n    return function () {\n      return content;\n    };\n  } else {\n    return content;\n  }\n};\nBlaze.__rootViews = [];\n\n/**\n * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#Blaze-View) which can be passed to [`Blaze.remove`](#Blaze-remove).\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.render = function (content, parentElement, nextNode, parentView) {\n  if (!parentElement) {\n    Blaze._warn(\"Blaze.render without a parent element is deprecated. \" + \"You must specify where to insert the rendered content.\");\n  }\n  if (nextNode instanceof Blaze.View) {\n    // handle omitted nextNode\n    parentView = nextNode;\n    nextNode = null;\n  }\n\n  // parentElement must be a DOM node. in particular, can't be the\n  // result of a call to `$`. Can't check if `parentElement instanceof\n  // Node` since 'Node' is undefined in IE8.\n  if (parentElement && typeof parentElement.nodeType !== 'number') throw new Error(\"'parentElement' must be a DOM node\");\n  if (nextNode && typeof nextNode.nodeType !== 'number')\n    // 'nextNode' is optional\n    throw new Error(\"'nextNode' must be a DOM node\");\n  parentView = parentView || currentViewIfRendering();\n  var view = contentAsView(content);\n\n  // TODO: this is only needed in development\n  if (!parentView) {\n    view.onViewCreated(function () {\n      Blaze.__rootViews.push(view);\n    });\n    view.onViewDestroyed(function () {\n      var index = Blaze.__rootViews.indexOf(view);\n      if (index > -1) {\n        Blaze.__rootViews.splice(index, 1);\n      }\n    });\n  }\n  Blaze._materializeView(view, parentView);\n  if (parentElement) {\n    view._domrange.attach(parentElement, nextNode);\n  }\n  return view;\n};\nBlaze.insert = function (view, parentElement, nextNode) {\n  Blaze._warn(\"Blaze.insert has been deprecated.  Specify where to insert the \" + \"rendered content in the call to Blaze.render.\");\n  if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error(\"Expected template rendered with Blaze.render\");\n  view._domrange.attach(parentElement, nextNode);\n};\n\n/**\n * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.\n * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {\n  // We defer the handling of optional arguments to Blaze.render.  At this point,\n  // `nextNode` may actually be `parentView`.\n  return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)), parentElement, nextNode, parentView);\n};\n\n/**\n * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.\n * @locus Client\n * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.\n */\nBlaze.remove = function (view) {\n  if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error(\"Expected template rendered with Blaze.render\");\n  while (view) {\n    if (!view.isDestroyed) {\n      var range = view._domrange;\n      range.destroy();\n      if (range.attached && !range.parentRange) {\n        range.detach();\n      }\n    }\n    view = view._hasGeneratedParent && view.parentView;\n  }\n};\n\n/**\n * @summary Renders a template or View to a string of HTML.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n */\nBlaze.toHTML = function (content, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));\n};\n\n/**\n * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n * @param {Object|Function} data The data context to use, or a function returning a data context.\n */\nBlaze.toHTMLWithData = function (content, data, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(data, contentAsFunc(content)), parentView));\n};\nBlaze._toText = function (htmljs, parentView, textMode) {\n  if (typeof htmljs === 'function') throw new Error(\"Blaze._toText doesn't take a function, just HTMLjs\");\n  if (parentView != null && !(parentView instanceof Blaze.View)) {\n    // omitted parentView argument\n    textMode = parentView;\n    parentView = null;\n  }\n  parentView = parentView || currentViewIfRendering();\n  if (!textMode) throw new Error(\"textMode required\");\n  if (!(textMode === HTML.TEXTMODE.STRING || textMode === HTML.TEXTMODE.RCDATA || textMode === HTML.TEXTMODE.ATTRIBUTE)) throw new Error(\"Unknown textMode: \" + textMode);\n  return HTML.toText(Blaze._expand(htmljs, parentView), textMode);\n};\n\n/**\n * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.\n * @locus Client\n * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.\n */\nBlaze.getData = function (elementOrView) {\n  var theWith;\n  if (!elementOrView) {\n    theWith = Blaze.getView('with');\n  } else if (elementOrView instanceof Blaze.View) {\n    var view = elementOrView;\n    theWith = view.name === 'with' ? view : Blaze.getView(view, 'with');\n  } else if (typeof elementOrView.nodeType === 'number') {\n    if (elementOrView.nodeType !== 1) throw new Error(\"Expected DOM element\");\n    theWith = Blaze.getView(elementOrView, 'with');\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n  return theWith ? theWith.dataVar.get() : null;\n};\n\n// For back-compat\nBlaze.getElementData = function (element) {\n  Blaze._warn(\"Blaze.getElementData has been deprecated.  Use \" + \"Blaze.getData(element) instead.\");\n  if (element.nodeType !== 1) throw new Error(\"Expected DOM element\");\n  return Blaze.getData(element);\n};\n\n// Both arguments are optional.\n\n/**\n * @summary Gets either the current View, or the View enclosing the given DOM element.\n * @locus Client\n * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.\n */\nBlaze.getView = function (elementOrView, _viewName) {\n  var viewName = _viewName;\n  if (typeof elementOrView === 'string') {\n    // omitted elementOrView; viewName present\n    viewName = elementOrView;\n    elementOrView = null;\n  }\n\n  // We could eventually shorten the code by folding the logic\n  // from the other methods into this method.\n  if (!elementOrView) {\n    return Blaze._getCurrentView(viewName);\n  } else if (elementOrView instanceof Blaze.View) {\n    return Blaze._getParentView(elementOrView, viewName);\n  } else if (typeof elementOrView.nodeType === 'number') {\n    return Blaze._getElementView(elementOrView, viewName);\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n};\n\n// Gets the current view or its nearest ancestor of name\n// `name`.\nBlaze._getCurrentView = function (name) {\n  var view = Blaze.currentView;\n  // Better to fail in cases where it doesn't make sense\n  // to use Blaze._getCurrentView().  There will be a current\n  // view anywhere it does.  You can check Blaze.currentView\n  // if you want to know whether there is one or not.\n  if (!view) throw new Error(\"There is no current view\");\n  if (name) {\n    while (view && view.name !== name) view = view.parentView;\n    return view || null;\n  } else {\n    // Blaze._getCurrentView() with no arguments just returns\n    // Blaze.currentView.\n    return view;\n  }\n};\nBlaze._getParentView = function (view, name) {\n  var v = view.parentView;\n  if (name) {\n    while (v && v.name !== name) v = v.parentView;\n  }\n  return v || null;\n};\nBlaze._getElementView = function (elem, name) {\n  var range = Blaze._DOMRange.forElement(elem);\n  var view = null;\n  while (range && !view) {\n    view = range.view || null;\n    if (!view) {\n      if (range.parentRange) range = range.parentRange;else range = Blaze._DOMRange.forElement(range.parentElement);\n    }\n  }\n  if (name) {\n    while (view && view.name !== name) view = view.parentView;\n    return view || null;\n  } else {\n    return view;\n  }\n};\nBlaze._addEventMap = function (view, eventMap, thisInHandler) {\n  thisInHandler = thisInHandler || null;\n  var handles = [];\n  if (!view._domrange) throw new Error(\"View must have a DOMRange\");\n  view._domrange.onAttached(function () {\n    function attached_eventMaps(range, element) {\n      Object.keys(eventMap).forEach(function (spec) {\n        var handler = eventMap[spec];\n        var clauses = spec.split(/,\\s+/);\n        // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n        clauses.forEach(function (clause) {\n          var parts = clause.split(/\\s+/);\n          if (parts.length === 0) return;\n          var newEvents = parts.shift();\n          var selector = parts.join(' ');\n          handles.push(Blaze._EventSupport.listen(element, newEvents, selector, function (evt) {\n            if (!range.containsElement(evt.currentTarget, selector, newEvents)) return null;\n            var handlerThis = thisInHandler || this;\n            var handlerArgs = arguments;\n            return Blaze._withCurrentView(view, function () {\n              return handler.apply(handlerThis, handlerArgs);\n            });\n          }, range, function (r) {\n            return r.parentRange;\n          }));\n        });\n      });\n    }\n    return attached_eventMaps;\n  }());\n  view.onViewDestroyed(function () {\n    handles.forEach(function (h) {\n      h.stop();\n    });\n    handles.length = 0;\n  });\n};","map":{"version":3,"names":["Blaze","View","name","render","_render","_callbacks","created","rendered","destroyed","isCreated","_isCreatedForExpansion","isRendered","_isAttached","isDestroyed","_isInRender","parentView","_domrange","_hasGeneratedParent","_scopeBindings","renderCount","prototype","onViewCreated","cb","push","_onViewRendered","onViewReady","self","fire","Tracker","afterFlush","_withCurrentView","call","onViewRendered","attached","onAttached","onViewDestroyed","removeViewDestroyedListener","index","lastIndexOf","autorun","f","_inViewScope","displayName","Error","templateInstanceFunc","Template","_currentTemplateInstanceFunc","func","viewAutorun","c","_withTemplateInstanceFunc","comp","stopComputation","stop","onStop","_errorIfShouldntCallSubscribe","subscribe","args","options","subHandle","connection","apply","Meteor","firstNode","lastNode","_fireCallbacks","view","which","nonreactive","fireCallbacks","cbs","i","N","length","_createView","forExpansion","doFirstRender","initialContent","domrange","_DOMRange","teardownHook","range","element","_DOMBackend","Teardown","onElementTeardown","teardown","_destroyView","_materializeView","_workStack","_intoArray","lastHtmljs","doRender","htmljs","firstRun","_isContentEqual","doMaterialize","rangesAndNodes","_materializeDOM","setMembers","onInvalidate","destroyMembers","undefined","initialContents","_bind","_expandView","result","_expand","active","_HTMLJSExpander","HTML","TransformingVisitor","extend","def","visitObject","x","constructView","visitAttributes","attrs","visitAttribute","value","tag","currentViewIfRendering","currentView","visit","_expandAttributes","_skipNodes","_destroyNode","node","nodeType","tearDownElement","a","b","Raw","oldView","checkRenderContent","content","Visitor","e","contentAsView","contentAsFunc","__rootViews","parentElement","nextNode","_warn","indexOf","splice","attach","insert","renderWithData","data","_TemplateWith","remove","destroy","parentRange","detach","toHTML","toHTMLWithData","_toText","textMode","TEXTMODE","STRING","RCDATA","ATTRIBUTE","toText","getData","elementOrView","theWith","getView","dataVar","get","getElementData","_viewName","viewName","_getCurrentView","_getParentView","_getElementView","v","elem","forElement","_addEventMap","eventMap","thisInHandler","handles","attached_eventMaps","Object","keys","forEach","spec","handler","clauses","split","clause","parts","newEvents","shift","selector","join","_EventSupport","listen","evt","containsElement","currentTarget","handlerThis","handlerArgs","arguments","r","h"],"sources":["packages/blaze/view.js"],"sourcesContent":["/// [new] Blaze.View([name], renderMethod)\n///\n/// Blaze.View is the building block of reactive DOM.  Views have\n/// the following features:\n///\n/// * lifecycle callbacks - Views are created, rendered, and destroyed,\n///   and callbacks can be registered to fire when these things happen.\n///\n/// * parent pointer - A View points to its parentView, which is the\n///   View that caused it to be rendered.  These pointers form a\n///   hierarchy or tree of Views.\n///\n/// * render() method - A View's render() method specifies the DOM\n///   (or HTML) content of the View.  If the method establishes\n///   reactive dependencies, it may be re-run.\n///\n/// * a DOMRange - If a View is rendered to DOM, its position and\n///   extent in the DOM are tracked using a DOMRange object.\n///\n/// When a View is constructed by calling Blaze.View, the View is\n/// not yet considered \"created.\"  It doesn't have a parentView yet,\n/// and no logic has been run to initialize the View.  All real\n/// work is deferred until at least creation time, when the onViewCreated\n/// callbacks are fired, which happens when the View is \"used\" in\n/// some way that requires it to be rendered.\n///\n/// ...more lifecycle stuff\n///\n/// `name` is an optional string tag identifying the View.  The only\n/// time it's used is when looking in the View tree for a View of a\n/// particular name; for example, data contexts are stored on Views\n/// of name \"with\".  Names are also useful when debugging, so in\n/// general it's good for functions that create Views to set the name.\n/// Views associated with templates have names of the form \"Template.foo\".\n\n/**\n * A binding is either `undefined` (pending), `{ error }` (rejected), or\n * `{ value }` (resolved). Synchronous values are immediately resolved (i.e.,\n * `{ value }` is used). The other states are reserved for asynchronous bindings\n * (i.e., values wrapped with `Promise`s).\n * @typedef {{ error: unknown } | { value: unknown } | undefined} Binding\n */\n\n/**\n * @class\n * @summary Constructor for a View, which represents a reactive region of DOM.\n * @locus Client\n * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).\n * @param {Function} renderFunction A function that returns [*renderable content*](#Renderable-Content).  In this function, `this` is bound to the View.\n */\nBlaze.View = function (name, render) {\n  if (! (this instanceof Blaze.View))\n    // called without `new`\n    return new Blaze.View(name, render);\n\n  if (typeof name === 'function') {\n    // omitted \"name\" argument\n    render = name;\n    name = '';\n  }\n  this.name = name;\n  this._render = render;\n\n  this._callbacks = {\n    created: null,\n    rendered: null,\n    destroyed: null\n  };\n\n  // Setting all properties here is good for readability,\n  // and also may help Chrome optimize the code by keeping\n  // the View object from changing shape too much.\n  this.isCreated = false;\n  this._isCreatedForExpansion = false;\n  this.isRendered = false;\n  this._isAttached = false;\n  this.isDestroyed = false;\n  this._isInRender = false;\n  this.parentView = null;\n  this._domrange = null;\n  // This flag is normally set to false except for the cases when view's parent\n  // was generated as part of expanding some syntactic sugar expressions or\n  // methods.\n  // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular\n  // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the\n  // users don't know anything about these generated parent views, Blaze needs\n  // this information to be available on views to make smarter decisions. For\n  // example: removing the generated parent view with the view on Blaze.remove.\n  this._hasGeneratedParent = false;\n  // Bindings accessible to children views (via view.lookup('name')) within the\n  // closest template view.\n  /** @type {Record<string, ReactiveVar<Binding>>} */\n  this._scopeBindings = {};\n\n  this.renderCount = 0;\n};\n\nBlaze.View.prototype._render = function () { return null; };\n\nBlaze.View.prototype.onViewCreated = function (cb) {\n  this._callbacks.created = this._callbacks.created || [];\n  this._callbacks.created.push(cb);\n};\n\nBlaze.View.prototype._onViewRendered = function (cb) {\n  this._callbacks.rendered = this._callbacks.rendered || [];\n  this._callbacks.rendered.push(cb);\n};\n\nBlaze.View.prototype.onViewReady = function (cb) {\n  var self = this;\n  var fire = function () {\n    Tracker.afterFlush(function () {\n      if (! self.isDestroyed) {\n        Blaze._withCurrentView(self, function () {\n          cb.call(self);\n        });\n      }\n    });\n  };\n  self._onViewRendered(function onViewRendered() {\n    if (self.isDestroyed)\n      return;\n    if (! self._domrange.attached)\n      self._domrange.onAttached(fire);\n    else\n      fire();\n  });\n};\n\nBlaze.View.prototype.onViewDestroyed = function (cb) {\n  this._callbacks.destroyed = this._callbacks.destroyed || [];\n  this._callbacks.destroyed.push(cb);\n};\nBlaze.View.prototype.removeViewDestroyedListener = function (cb) {\n  var destroyed = this._callbacks.destroyed;\n  if (! destroyed)\n    return;\n  var index = destroyed.lastIndexOf(cb);\n  if (index !== -1) {\n    // XXX You'd think the right thing to do would be splice, but _fireCallbacks\n    // gets sad if you remove callbacks while iterating over the list.  Should\n    // change this to use callback-hook or EventEmitter or something else that\n    // properly supports removal.\n    destroyed[index] = null;\n  }\n};\n\n/// View#autorun(func)\n///\n/// Sets up a Tracker autorun that is \"scoped\" to this View in two\n/// important ways: 1) Blaze.currentView is automatically set\n/// on every re-run, and 2) the autorun is stopped when the\n/// View is destroyed.  As with Tracker.autorun, the first run of\n/// the function is immediate, and a Computation object that can\n/// be used to stop the autorun is returned.\n///\n/// View#autorun is meant to be called from View callbacks like\n/// onViewCreated, or from outside the rendering process.  It may not\n/// be called before the onViewCreated callbacks are fired (too early),\n/// or from a render() method (too confusing).\n///\n/// Typically, autoruns that update the state\n/// of the View (as in Blaze.With) should be started from an onViewCreated\n/// callback.  Autoruns that update the DOM should be started\n/// from either onViewCreated (guarded against the absence of\n/// view._domrange), or onViewReady.\nBlaze.View.prototype.autorun = function (f, _inViewScope, displayName) {\n  var self = this;\n\n  // The restrictions on when View#autorun can be called are in order\n  // to avoid bad patterns, like creating a Blaze.View and immediately\n  // calling autorun on it.  A freshly created View is not ready to\n  // have logic run on it; it doesn't have a parentView, for example.\n  // It's when the View is materialized or expanded that the onViewCreated\n  // handlers are fired and the View starts up.\n  //\n  // Letting the render() method call `this.autorun()` is problematic\n  // because of re-render.  The best we can do is to stop the old\n  // autorun and start a new one for each render, but that's a pattern\n  // we try to avoid internally because it leads to helpers being\n  // called extra times, in the case where the autorun causes the\n  // view to re-render (and thus the autorun to be torn down and a\n  // new one established).\n  //\n  // We could lift these restrictions in various ways.  One interesting\n  // idea is to allow you to call `view.autorun` after instantiating\n  // `view`, and automatically wrap it in `view.onViewCreated`, deferring\n  // the autorun so that it starts at an appropriate time.  However,\n  // then we can't return the Computation object to the caller, because\n  // it doesn't exist yet.\n  if (! self.isCreated) {\n    throw new Error(\"View#autorun must be called from the created callback at the earliest\");\n  }\n  if (this._isInRender) {\n    throw new Error(\"Can't call View#autorun from inside render(); try calling it from the created or rendered callback\");\n  }\n\n  var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;\n\n  var func = function viewAutorun(c) {\n    return Blaze._withCurrentView(_inViewScope || self, function () {\n      return Blaze.Template._withTemplateInstanceFunc(\n        templateInstanceFunc, function () {\n          return f.call(self, c);\n        });\n    });\n  };\n\n  // Give the autorun function a better name for debugging and profiling.\n  // The `displayName` property is not part of the spec but browsers like Chrome\n  // and Firefox prefer it in debuggers over the name function was declared by.\n  func.displayName =\n    (self.name || 'anonymous') + ':' + (displayName || 'anonymous');\n  var comp = Tracker.autorun(func);\n\n  var stopComputation = function () { comp.stop(); };\n  self.onViewDestroyed(stopComputation);\n  comp.onStop(function () {\n    self.removeViewDestroyedListener(stopComputation);\n  });\n\n  return comp;\n};\n\nBlaze.View.prototype._errorIfShouldntCallSubscribe = function () {\n  var self = this;\n\n  if (! self.isCreated) {\n    throw new Error(\"View#subscribe must be called from the created callback at the earliest\");\n  }\n  if (self._isInRender) {\n    throw new Error(\"Can't call View#subscribe from inside render(); try calling it from the created or rendered callback\");\n  }\n  if (self.isDestroyed) {\n    throw new Error(\"Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.\");\n  }\n};\n\n/**\n * Just like Blaze.View#autorun, but with Meteor.subscribe instead of\n * Tracker.autorun. Stop the subscription when the view is destroyed.\n * @return {SubscriptionHandle} A handle to the subscription so that you can\n * see if it is ready, or stop it manually\n */\nBlaze.View.prototype.subscribe = function (args, options) {\n  var self = this;\n  options = options || {};\n\n  self._errorIfShouldntCallSubscribe();\n\n  var subHandle;\n  if (options.connection) {\n    subHandle = options.connection.subscribe.apply(options.connection, args);\n  } else {\n    subHandle = Meteor.subscribe.apply(Meteor, args);\n  }\n\n  self.onViewDestroyed(function () {\n    subHandle.stop();\n  });\n\n  return subHandle;\n};\n\nBlaze.View.prototype.firstNode = function () {\n  if (! this._isAttached)\n    throw new Error(\"View must be attached before accessing its DOM\");\n\n  return this._domrange.firstNode();\n};\n\nBlaze.View.prototype.lastNode = function () {\n  if (! this._isAttached)\n    throw new Error(\"View must be attached before accessing its DOM\");\n\n  return this._domrange.lastNode();\n};\n\nBlaze._fireCallbacks = function (view, which) {\n  Blaze._withCurrentView(view, function () {\n    Tracker.nonreactive(function fireCallbacks() {\n      var cbs = view._callbacks[which];\n      for (var i = 0, N = (cbs && cbs.length); i < N; i++)\n        cbs[i] && cbs[i].call(view);\n    });\n  });\n};\n\nBlaze._createView = function (view, parentView, forExpansion) {\n  if (view.isCreated)\n    throw new Error(\"Can't render the same View twice\");\n\n  view.parentView = (parentView || null);\n  view.isCreated = true;\n  if (forExpansion)\n    view._isCreatedForExpansion = true;\n\n  Blaze._fireCallbacks(view, 'created');\n};\n\nvar doFirstRender = function (view, initialContent) {\n  var domrange = new Blaze._DOMRange(initialContent);\n  view._domrange = domrange;\n  domrange.view = view;\n  view.isRendered = true;\n  Blaze._fireCallbacks(view, 'rendered');\n\n  var teardownHook = null;\n\n  domrange.onAttached(function attached(range, element) {\n    view._isAttached = true;\n\n    teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(\n      element, function teardown() {\n        Blaze._destroyView(view, true /* _skipNodes */);\n      });\n  });\n\n  // tear down the teardown hook\n  view.onViewDestroyed(function () {\n    teardownHook && teardownHook.stop();\n    teardownHook = null;\n  });\n\n  return domrange;\n};\n\n// Take an uncreated View `view` and create and render it to DOM,\n// setting up the autorun that updates the View.  Returns a new\n// DOMRange, which has been associated with the View.\n//\n// The private arguments `_workStack` and `_intoArray` are passed in\n// by Blaze._materializeDOM and are only present for recursive calls\n// (when there is some other _materializeView on the stack).  If\n// provided, then we avoid the mutual recursion of calling back into\n// Blaze._materializeDOM so that deep View hierarchies don't blow the\n// stack.  Instead, we push tasks onto workStack for the initial\n// rendering and subsequent setup of the View, and they are done after\n// we return.  When there is a _workStack, we do not return the new\n// DOMRange, but instead push it into _intoArray from a _workStack\n// task.\nBlaze._materializeView = function (view, parentView, _workStack, _intoArray) {\n  Blaze._createView(view, parentView);\n\n  var domrange;\n  var lastHtmljs;\n  // We don't expect to be called in a Computation, but just in case,\n  // wrap in Tracker.nonreactive.\n  Tracker.nonreactive(function () {\n    view.autorun(function doRender(c) {\n      // `view.autorun` sets the current view.\n      view.renderCount++;\n      view._isInRender = true;\n      // Any dependencies that should invalidate this Computation come\n      // from this line:\n      var htmljs = view._render();\n      view._isInRender = false;\n\n      if (! c.firstRun && ! Blaze._isContentEqual(lastHtmljs, htmljs)) {\n        Tracker.nonreactive(function doMaterialize() {\n          // re-render\n          var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);\n          domrange.setMembers(rangesAndNodes);\n          Blaze._fireCallbacks(view, 'rendered');\n        });\n      }\n      lastHtmljs = htmljs;\n\n      // Causes any nested views to stop immediately, not when we call\n      // `setMembers` the next time around the autorun.  Otherwise,\n      // helpers in the DOM tree to be replaced might be scheduled\n      // to re-run before we have a chance to stop them.\n      Tracker.onInvalidate(function () {\n        if (domrange) {\n          domrange.destroyMembers();\n        }\n      });\n    }, undefined, 'materialize');\n\n    // first render.  lastHtmljs is the first htmljs.\n    var initialContents;\n    if (! _workStack) {\n      initialContents = Blaze._materializeDOM(lastHtmljs, [], view);\n      domrange = doFirstRender(view, initialContents);\n      initialContents = null; // help GC because we close over this scope a lot\n    } else {\n      // We're being called from Blaze._materializeDOM, so to avoid\n      // recursion and save stack space, provide a description of the\n      // work to be done instead of doing it.  Tasks pushed onto\n      // _workStack will be done in LIFO order after we return.\n      // The work will still be done within a Tracker.nonreactive,\n      // because it will be done by some call to Blaze._materializeDOM\n      // (which is always called in a Tracker.nonreactive).\n      initialContents = [];\n      // push this function first so that it happens last\n      _workStack.push(function () {\n        domrange = doFirstRender(view, initialContents);\n        initialContents = null; // help GC because of all the closures here\n        _intoArray.push(domrange);\n      });\n      // now push the task that calculates initialContents\n      _workStack.push(Blaze._bind(Blaze._materializeDOM, null,\n                             lastHtmljs, initialContents, view, _workStack));\n    }\n  });\n\n  if (! _workStack) {\n    return domrange;\n  } else {\n    return null;\n  }\n};\n\n// Expands a View to HTMLjs, calling `render` recursively on all\n// Views and evaluating any dynamic attributes.  Calls the `created`\n// callback, but not the `materialized` or `rendered` callbacks.\n// Destroys the view immediately, unless called in a Tracker Computation,\n// in which case the view will be destroyed when the Computation is\n// invalidated.  If called in a Tracker Computation, the result is a\n// reactive string; that is, the Computation will be invalidated\n// if any changes are made to the view or subviews that might affect\n// the HTML.\nBlaze._expandView = function (view, parentView) {\n  Blaze._createView(view, parentView, true /*forExpansion*/);\n\n  view._isInRender = true;\n  var htmljs = Blaze._withCurrentView(view, function () {\n    return view._render();\n  });\n  view._isInRender = false;\n\n  var result = Blaze._expand(htmljs, view);\n\n  if (Tracker.active) {\n    Tracker.onInvalidate(function () {\n      Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n\n  return result;\n};\n\n// Options: `parentView`\nBlaze._HTMLJSExpander = HTML.TransformingVisitor.extend();\nBlaze._HTMLJSExpander.def({\n  visitObject: function (x) {\n    if (x instanceof Blaze.Template)\n      x = x.constructView();\n    if (x instanceof Blaze.View)\n      return Blaze._expandView(x, this.parentView);\n\n    // this will throw an error; other objects are not allowed!\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    // expand dynamic attributes\n    if (typeof attrs === 'function')\n      attrs = Blaze._withCurrentView(this.parentView, attrs);\n\n    // call super (e.g. for case where `attrs` is an array)\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    // expand attribute values that are functions.  Any attribute value\n    // that contains Views must be wrapped in a function.\n    if (typeof value === 'function')\n      value = Blaze._withCurrentView(this.parentView, value);\n\n    return HTML.TransformingVisitor.prototype.visitAttribute.call(\n      this, name, value, tag);\n  }\n});\n\n// Return Blaze.currentView, but only if it is being rendered\n// (i.e. we are in its render() method).\nvar currentViewIfRendering = function () {\n  var view = Blaze.currentView;\n  return (view && view._isInRender) ? view : null;\n};\n\nBlaze._expand = function (htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new Blaze._HTMLJSExpander(\n    {parentView: parentView})).visit(htmljs);\n};\n\nBlaze._expandAttributes = function (attrs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new Blaze._HTMLJSExpander(\n    {parentView: parentView})).visitAttributes(attrs);\n};\n\nBlaze._destroyView = function (view, _skipNodes) {\n  if (view.isDestroyed)\n    return;\n  view.isDestroyed = true;\n\n\n  // Destroy views and elements recursively.  If _skipNodes,\n  // only recurse up to views, not elements, for the case where\n  // the backend (jQuery) is recursing over the elements already.\n\n  if (view._domrange) view._domrange.destroyMembers(_skipNodes);\n\n  // XXX: fire callbacks after potential members are destroyed\n  // otherwise it's tracker.flush will cause the above line will\n  // not be called and their views won't be destroyed\n  // Involved issues: DOMRange \"Must be attached\" error, mem leak\n  \n  Blaze._fireCallbacks(view, 'destroyed');\n};\n\nBlaze._destroyNode = function (node) {\n  if (node.nodeType === 1)\n    Blaze._DOMBackend.Teardown.tearDownElement(node);\n};\n\n// Are the HTMLjs entities `a` and `b` the same?  We could be\n// more elaborate here but the point is to catch the most basic\n// cases.\nBlaze._isContentEqual = function (a, b) {\n  if (a instanceof HTML.Raw) {\n    return (b instanceof HTML.Raw) && (a.value === b.value);\n  } else if (a == null) {\n    return (b == null);\n  } else {\n    return (a === b) &&\n      ((typeof a === 'number') || (typeof a === 'boolean') ||\n       (typeof a === 'string'));\n  }\n};\n\n/**\n * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n * @locus Client\n * @type {Blaze.View}\n */\nBlaze.currentView = null;\n\n/**\n * @template T\n * @param {Blaze.View} view\n * @param {() => T} func\n * @returns {T}\n */\nBlaze._withCurrentView = function (view, func) {\n  var oldView = Blaze.currentView;\n  try {\n    Blaze.currentView = view;\n    return func();\n  } finally {\n    Blaze.currentView = oldView;\n  }\n};\n\n// Blaze.render publicly takes a View or a Template.\n// Privately, it takes any HTMLJS (extended with Views and Templates)\n// except null or undefined, or a function that returns any extended\n// HTMLJS.\nvar checkRenderContent = function (content) {\n  if (content === null)\n    throw new Error(\"Can't render null\");\n  if (typeof content === 'undefined')\n    throw new Error(\"Can't render undefined\");\n\n  if ((content instanceof Blaze.View) ||\n      (content instanceof Blaze.Template) ||\n      (typeof content === 'function'))\n    return;\n\n  try {\n    // Throw if content doesn't look like HTMLJS at the top level\n    // (i.e. verify that this is an HTML.Tag, or an array,\n    // or a primitive, etc.)\n    (new HTML.Visitor).visit(content);\n  } catch (e) {\n    // Make error message suitable for public API\n    throw new Error(\"Expected Template or View\");\n  }\n};\n\n// For Blaze.render and Blaze.toHTML, take content and\n// wrap it in a View, unless it's a single View or\n// Template already.\nvar contentAsView = function (content) {\n  checkRenderContent(content);\n\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    var func = content;\n    if (typeof func !== 'function') {\n      func = function () {\n        return content;\n      };\n    }\n    return Blaze.View('render', func);\n  }\n};\n\n// For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content\n// in a function, if necessary, so it can be a content arg to\n// a Blaze.With.\nvar contentAsFunc = function (content) {\n  checkRenderContent(content);\n\n  if (typeof content !== 'function') {\n    return function () {\n      return content;\n    };\n  } else {\n    return content;\n  }\n};\n\nBlaze.__rootViews = [];\n\n/**\n * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#Blaze-View) which can be passed to [`Blaze.remove`](#Blaze-remove).\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.render = function (content, parentElement, nextNode, parentView) {\n  if (! parentElement) {\n    Blaze._warn(\"Blaze.render without a parent element is deprecated. \" +\n                \"You must specify where to insert the rendered content.\");\n  }\n\n  if (nextNode instanceof Blaze.View) {\n    // handle omitted nextNode\n    parentView = nextNode;\n    nextNode = null;\n  }\n\n  // parentElement must be a DOM node. in particular, can't be the\n  // result of a call to `$`. Can't check if `parentElement instanceof\n  // Node` since 'Node' is undefined in IE8.\n  if (parentElement && typeof parentElement.nodeType !== 'number')\n    throw new Error(\"'parentElement' must be a DOM node\");\n  if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional\n    throw new Error(\"'nextNode' must be a DOM node\");\n\n  parentView = parentView || currentViewIfRendering();\n\n  var view = contentAsView(content);\n\n  // TODO: this is only needed in development\n  if (!parentView) {\n    view.onViewCreated(function () {\n      Blaze.__rootViews.push(view);\n    });\n\n    view.onViewDestroyed(function () {\n      var index = Blaze.__rootViews.indexOf(view);\n      if (index > -1) {\n        Blaze.__rootViews.splice(index, 1);\n      }\n    });\n  }\n\n  Blaze._materializeView(view, parentView);\n  if (parentElement) {\n    view._domrange.attach(parentElement, nextNode);\n  }\n\n  return view;\n};\n\nBlaze.insert = function (view, parentElement, nextNode) {\n  Blaze._warn(\"Blaze.insert has been deprecated.  Specify where to insert the \" +\n              \"rendered content in the call to Blaze.render.\");\n\n  if (! (view && (view._domrange instanceof Blaze._DOMRange)))\n    throw new Error(\"Expected template rendered with Blaze.render\");\n\n  view._domrange.attach(parentElement, nextNode);\n};\n\n/**\n * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.\n * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {\n  // We defer the handling of optional arguments to Blaze.render.  At this point,\n  // `nextNode` may actually be `parentView`.\n  return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)),\n                          parentElement, nextNode, parentView);\n};\n\n/**\n * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.\n * @locus Client\n * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.\n */\nBlaze.remove = function (view) {\n  if (! (view && (view._domrange instanceof Blaze._DOMRange)))\n    throw new Error(\"Expected template rendered with Blaze.render\");\n\n  while (view) {\n    if (! view.isDestroyed) {\n      var range = view._domrange;\n      range.destroy();\n\n      if (range.attached && ! range.parentRange) {\n        range.detach();\n      }\n    }\n\n    view = view._hasGeneratedParent && view.parentView;\n  }\n};\n\n/**\n * @summary Renders a template or View to a string of HTML.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n */\nBlaze.toHTML = function (content, parentView) {\n  parentView = parentView || currentViewIfRendering();\n\n  return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));\n};\n\n/**\n * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n * @param {Object|Function} data The data context to use, or a function returning a data context.\n */\nBlaze.toHTMLWithData = function (content, data, parentView) {\n  parentView = parentView || currentViewIfRendering();\n\n  return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(\n    data, contentAsFunc(content)), parentView));\n};\n\nBlaze._toText = function (htmljs, parentView, textMode) {\n  if (typeof htmljs === 'function')\n    throw new Error(\"Blaze._toText doesn't take a function, just HTMLjs\");\n\n  if ((parentView != null) && ! (parentView instanceof Blaze.View)) {\n    // omitted parentView argument\n    textMode = parentView;\n    parentView = null;\n  }\n  parentView = parentView || currentViewIfRendering();\n\n  if (! textMode)\n    throw new Error(\"textMode required\");\n  if (! (textMode === HTML.TEXTMODE.STRING ||\n         textMode === HTML.TEXTMODE.RCDATA ||\n         textMode === HTML.TEXTMODE.ATTRIBUTE))\n    throw new Error(\"Unknown textMode: \" + textMode);\n\n  return HTML.toText(Blaze._expand(htmljs, parentView), textMode);\n};\n\n/**\n * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.\n * @locus Client\n * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.\n */\nBlaze.getData = function (elementOrView) {\n  var theWith;\n\n  if (! elementOrView) {\n    theWith = Blaze.getView('with');\n  } else if (elementOrView instanceof Blaze.View) {\n    var view = elementOrView;\n    theWith = (view.name === 'with' ? view :\n               Blaze.getView(view, 'with'));\n  } else if (typeof elementOrView.nodeType === 'number') {\n    if (elementOrView.nodeType !== 1)\n      throw new Error(\"Expected DOM element\");\n    theWith = Blaze.getView(elementOrView, 'with');\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n\n  return theWith ? theWith.dataVar.get() : null;\n};\n\n// For back-compat\nBlaze.getElementData = function (element) {\n  Blaze._warn(\"Blaze.getElementData has been deprecated.  Use \" +\n              \"Blaze.getData(element) instead.\");\n\n  if (element.nodeType !== 1)\n    throw new Error(\"Expected DOM element\");\n\n  return Blaze.getData(element);\n};\n\n// Both arguments are optional.\n\n/**\n * @summary Gets either the current View, or the View enclosing the given DOM element.\n * @locus Client\n * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.\n */\nBlaze.getView = function (elementOrView, _viewName) {\n  var viewName = _viewName;\n\n  if ((typeof elementOrView) === 'string') {\n    // omitted elementOrView; viewName present\n    viewName = elementOrView;\n    elementOrView = null;\n  }\n\n  // We could eventually shorten the code by folding the logic\n  // from the other methods into this method.\n  if (! elementOrView) {\n    return Blaze._getCurrentView(viewName);\n  } else if (elementOrView instanceof Blaze.View) {\n    return Blaze._getParentView(elementOrView, viewName);\n  } else if (typeof elementOrView.nodeType === 'number') {\n    return Blaze._getElementView(elementOrView, viewName);\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n};\n\n// Gets the current view or its nearest ancestor of name\n// `name`.\nBlaze._getCurrentView = function (name) {\n  var view = Blaze.currentView;\n  // Better to fail in cases where it doesn't make sense\n  // to use Blaze._getCurrentView().  There will be a current\n  // view anywhere it does.  You can check Blaze.currentView\n  // if you want to know whether there is one or not.\n  if (! view)\n    throw new Error(\"There is no current view\");\n\n  if (name) {\n    while (view && view.name !== name)\n      view = view.parentView;\n    return view || null;\n  } else {\n    // Blaze._getCurrentView() with no arguments just returns\n    // Blaze.currentView.\n    return view;\n  }\n};\n\nBlaze._getParentView = function (view, name) {\n  var v = view.parentView;\n\n  if (name) {\n    while (v && v.name !== name)\n      v = v.parentView;\n  }\n\n  return v || null;\n};\n\nBlaze._getElementView = function (elem, name) {\n  var range = Blaze._DOMRange.forElement(elem);\n  var view = null;\n  while (range && ! view) {\n    view = (range.view || null);\n    if (! view) {\n      if (range.parentRange)\n        range = range.parentRange;\n      else\n        range = Blaze._DOMRange.forElement(range.parentElement);\n    }\n  }\n\n  if (name) {\n    while (view && view.name !== name)\n      view = view.parentView;\n    return view || null;\n  } else {\n    return view;\n  }\n};\n\nBlaze._addEventMap = function (view, eventMap, thisInHandler) {\n  thisInHandler = (thisInHandler || null);\n  var handles = [];\n\n  if (! view._domrange)\n    throw new Error(\"View must have a DOMRange\");\n\n  view._domrange.onAttached(function attached_eventMaps(range, element) {\n    Object.keys(eventMap).forEach(function (spec) {\n      let handler = eventMap[spec];\n      var clauses = spec.split(/,\\s+/);\n      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n      clauses.forEach(function (clause) {\n        var parts = clause.split(/\\s+/);\n        if (parts.length === 0)\n          return;\n\n        var newEvents = parts.shift();\n        var selector = parts.join(' ');\n        handles.push(Blaze._EventSupport.listen(\n          element, newEvents, selector,\n          function (evt) {\n            if (! range.containsElement(evt.currentTarget, selector, newEvents))\n              return null;\n            var handlerThis = thisInHandler || this;\n            var handlerArgs = arguments;\n            return Blaze._withCurrentView(view, function () {\n              return handler.apply(handlerThis, handlerArgs);\n            });\n          },\n          range, function (r) {\n            return r.parentRange;\n          }));\n      });\n    });\n  });\n\n  view.onViewDestroyed(function () {\n    handles.forEach(function (h) {\n      h.stop();\n    });\n    handles.length = 0;\n  });\n};\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"7927cb9e97e0e6be533d5945e06eddf0aa6599bf"}
