{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"D:\\mergerware\\loan-management-app\\packages\\alanning:roles\\roles\\roles_common_async.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/alanning:roles/roles/roles_common_async.js","filename":"D:\\mergerware\\loan-management-app\\packages\\alanning:roles\\roles\\roles_common_async.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"D:\\mergerware\\loan-management-app","root":"D:\\mergerware\\loan-management-app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"MemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"D:\\mergerware\\loan-management-app\\packages\\alanning:roles\\roles\\roles_common_async.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/alanning:roles/roles/roles_common_async.js"}},"code":"!function (module1) {\n  var _regeneratorRuntime;\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 0);\n  var _typeof;\n  module1.link(\"@babel/runtime/helpers/typeof\", {\n    default: function (v) {\n      _typeof = v;\n    }\n  }, 1);\n  var _toConsumableArray;\n  module1.link(\"@babel/runtime/helpers/toConsumableArray\", {\n    default: function (v) {\n      _toConsumableArray = v;\n    }\n  }, 2);\n  var _createForOfIteratorHelperLoose;\n  module1.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n    default: function (v) {\n      _createForOfIteratorHelperLoose = v;\n    }\n  }, 3);\n  var Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor: function (v) {\n      Meteor = v;\n    }\n  }, 0);\n  var Mongo;\n  module1.link(\"meteor/mongo\", {\n    Mongo: function (v) {\n      Mongo = v;\n    }\n  }, 1);\n  /**\n   * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n   *\n   * Roles are accessible throgh `Meteor.roles` collection and documents consist of:\n   *  - `_id`: role name\n   *  - `children`: list of subdocuments:\n   *    - `_id`\n   *\n   * Children list elements are subdocuments so that they can be easier extended in the future or by plugins.\n   *\n   * Roles can have multiple parents and can be children (subroles) of multiple roles.\n   *\n   * Example: `{_id: 'admin', children: [{_id: 'editor'}]}`\n   *\n   * The assignment of a role to a user is stored in a collection, accessible through `Meteor.roleAssignment`.\n   * It's documents consist of\n   *  - `_id`: Internal MongoDB id\n   *  - `role`: A role object which got assigned. Usually only contains the `_id` property\n   *  - `user`: A user object, usually only contains the `_id` property\n   *  - `scope`: scope name\n   *  - `inheritedRoles`: A list of all the roles objects inherited by the assigned role.\n   *\n   * @module Roles\n   */\n  if (!Meteor.roles) {\n    Meteor.roles = new Mongo.Collection('roles');\n  }\n  if (!Meteor.roleAssignment) {\n    Meteor.roleAssignment = new Mongo.Collection('role-assignment');\n  }\n\n  /**\n   * @class Roles\n   */\n  if (typeof Roles === 'undefined') {\n    Roles = {}; // eslint-disable-line no-global-assign\n  }\n  var getGroupsForUserDeprecationWarning = false;\n\n  /**\n   * Helper, resolves async some\n   * @param {*} arr\n   * @param {*} predicate\n   * @returns {Promise<Boolean>}\n   */\n  var asyncSome = function () {\n    function _callee(arr, predicate) {\n      var _iterator, _step, e;\n      return _regeneratorRuntime.async(function () {\n        function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelperLoose(arr);\n            case 1:\n              if ((_step = _iterator()).done) {\n                _context.next = 9;\n                break;\n              }\n              e = _step.value;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(predicate(e));\n            case 5:\n              if (!_context.sent) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt(\"return\", true);\n            case 7:\n              _context.next = 1;\n              break;\n            case 9:\n              return _context.abrupt(\"return\", false);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return _callee$;\n      }(), null, null, null, Promise);\n    }\n    return _callee;\n  }();\n  Object.assign(Roles, {\n    /**\n     * Used as a global group (now scope) name. Not used anymore.\n     *\n     * @property GLOBAL_GROUP\n     * @static\n     * @deprecated\n     */\n    GLOBAL_GROUP: null,\n    /**\n     * Create a new role.\n     *\n     * @method createRoleAsync\n     * @param {String} roleName Name of role.\n     * @param {Object} [options] Options:\n     *   - `unlessExists`: if `true`, exception will not be thrown in the role already exists\n     * @return {Promise<String>} ID of the new role or null.\n     * @static\n     */\n    createRoleAsync: function () {\n      function _callee2(roleName, options) {\n        var insertedId, existingRole;\n        return _regeneratorRuntime.async(function () {\n          function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                Roles._checkRoleName(roleName);\n                options = Object.assign({\n                  unlessExists: false\n                }, options);\n                insertedId = null;\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: roleName\n                }));\n              case 5:\n                existingRole = _context2.sent;\n                if (!existingRole) {\n                  _context2.next = 12;\n                  break;\n                }\n                _context2.next = 9;\n                return _regeneratorRuntime.awrap(Meteor.roles.updateAsync({\n                  _id: roleName\n                }, {\n                  $setOnInsert: {\n                    children: []\n                  }\n                }));\n              case 9:\n                return _context2.abrupt(\"return\", null);\n              case 12:\n                _context2.next = 14;\n                return _regeneratorRuntime.awrap(Meteor.roles.insertAsync({\n                  _id: roleName,\n                  children: []\n                }));\n              case 14:\n                insertedId = _context2.sent;\n              case 15:\n                if (insertedId) {\n                  _context2.next = 19;\n                  break;\n                }\n                if (!options.unlessExists) {\n                  _context2.next = 18;\n                  break;\n                }\n                return _context2.abrupt(\"return\", null);\n              case 18:\n                throw new Error(\"Role '\" + roleName + \"' already exists.\");\n              case 19:\n                return _context2.abrupt(\"return\", insertedId);\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n          return _callee2$;\n        }(), null, null, null, Promise);\n      }\n      return _callee2;\n    }(),\n    /**\n     * Delete an existing role.\n     *\n     * If the role is set for any user, it is automatically unset.\n     *\n     * @method deleteRoleAsync\n     * @param {String} roleName Name of role.\n     * @returns {Promise}\n     * @static\n     */\n    deleteRoleAsync: function () {\n      function _callee3(roleName) {\n        var roles, inheritedRoles, _iterator2, _step2, r;\n        return _regeneratorRuntime.async(function () {\n          function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                Roles._checkRoleName(roleName);\n\n                // Remove all assignments\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.removeAsync({\n                  'role._id': roleName\n                }));\n              case 3:\n                _context3.t0 = Roles;\n                _context3.next = 6;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: roleName\n                }));\n              case 6:\n                _context3.t1 = _context3.sent;\n                roles = _context3.t0._getParentRoleNames.call(_context3.t0, _context3.t1);\n                _context3.t2 = _createForOfIteratorHelperLoose;\n                _context3.next = 11;\n                return _regeneratorRuntime.awrap(Meteor.roles.find({\n                  _id: {\n                    $in: roles\n                  }\n                }).fetchAsync());\n              case 11:\n                _context3.t3 = _context3.sent;\n                _iterator2 = (0, _context3.t2)(_context3.t3);\n              case 13:\n                if ((_step2 = _iterator2()).done) {\n                  _context3.next = 30;\n                  break;\n                }\n                r = _step2.value;\n                _context3.next = 17;\n                return _regeneratorRuntime.awrap(Meteor.roles.updateAsync({\n                  _id: r._id\n                }, {\n                  $pull: {\n                    children: {\n                      _id: roleName\n                    }\n                  }\n                }));\n              case 17:\n                _context3.t4 = _regeneratorRuntime;\n                _context3.t5 = Roles;\n                _context3.next = 21;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: r._id\n                }));\n              case 21:\n                _context3.t6 = _context3.sent;\n                _context3.t7 = _context3.t5._getInheritedRoleNamesAsync.call(_context3.t5, _context3.t6);\n                _context3.next = 25;\n                return _context3.t4.awrap.call(_context3.t4, _context3.t7);\n              case 25:\n                inheritedRoles = _context3.sent;\n                _context3.next = 28;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.updateAsync({\n                  'role._id': r._id\n                }, {\n                  $set: {\n                    inheritedRoles: [r._id].concat(_toConsumableArray(inheritedRoles)).map(function (r2) {\n                      return {\n                        _id: r2\n                      };\n                    })\n                  }\n                }, {\n                  multi: true\n                }));\n              case 28:\n                _context3.next = 13;\n                break;\n              case 30:\n                if (roles.length > 0) {\n                  _context3.next = 3;\n                  break;\n                }\n              case 31:\n                _context3.next = 33;\n                return _regeneratorRuntime.awrap(Meteor.roles.removeAsync({\n                  _id: roleName\n                }));\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n          return _callee3$;\n        }(), null, null, null, Promise);\n      }\n      return _callee3;\n    }(),\n    /**\n     * Rename an existing role.\n     *\n     * @method renameRoleAsync\n     * @param {String} oldName Old name of a role.\n     * @param {String} newName New name of a role.\n     * @returns {Promise}\n     * @static\n     */\n    renameRoleAsync: function () {\n      function _callee4(oldName, newName) {\n        var count, role;\n        return _regeneratorRuntime.async(function () {\n          function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                Roles._checkRoleName(oldName);\n                Roles._checkRoleName(newName);\n                if (!(oldName === newName)) {\n                  _context4.next = 4;\n                  break;\n                }\n                return _context4.abrupt(\"return\");\n              case 4:\n                _context4.next = 6;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: oldName\n                }));\n              case 6:\n                role = _context4.sent;\n                if (role) {\n                  _context4.next = 9;\n                  break;\n                }\n                throw new Error(\"Role '\" + oldName + \"' does not exist.\");\n              case 9:\n                role._id = newName;\n                _context4.next = 12;\n                return _regeneratorRuntime.awrap(Meteor.roles.insertAsync(role));\n              case 12:\n                _context4.next = 14;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.updateAsync({\n                  'role._id': oldName\n                }, {\n                  $set: {\n                    'role._id': newName\n                  }\n                }, {\n                  multi: true\n                }));\n              case 14:\n                count = _context4.sent;\n              case 15:\n                if (count > 0) {\n                  _context4.next = 12;\n                  break;\n                }\n              case 16:\n                _context4.next = 18;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.updateAsync({\n                  'inheritedRoles._id': oldName\n                }, {\n                  $set: {\n                    'inheritedRoles.$._id': newName\n                  }\n                }, {\n                  multi: true\n                }));\n              case 18:\n                count = _context4.sent;\n              case 19:\n                if (count > 0) {\n                  _context4.next = 16;\n                  break;\n                }\n              case 20:\n                _context4.next = 22;\n                return _regeneratorRuntime.awrap(Meteor.roles.updateAsync({\n                  'children._id': oldName\n                }, {\n                  $set: {\n                    'children.$._id': newName\n                  }\n                }, {\n                  multi: true\n                }));\n              case 22:\n                count = _context4.sent;\n              case 23:\n                if (count > 0) {\n                  _context4.next = 20;\n                  break;\n                }\n              case 24:\n                _context4.next = 26;\n                return _regeneratorRuntime.awrap(Meteor.roles.removeAsync({\n                  _id: oldName\n                }));\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n          return _callee4$;\n        }(), null, null, null, Promise);\n      }\n      return _callee4;\n    }(),\n    /**\n     * Add role parent to roles.\n     *\n     * Previous parents are kept (role can have multiple parents). For users which have the\n     * parent role set, new subroles are added automatically.\n     *\n     * @method addRolesToParentAsync\n     * @param {Array|String} rolesNames Name(s) of role(s).\n     * @param {String} parentName Name of parent role.\n     * @returns {Promise}\n     * @static\n     */\n    addRolesToParentAsync: function () {\n      function _callee5(rolesNames, parentName) {\n        var _iterator3, _step3, roleName;\n        return _regeneratorRuntime.async(function () {\n          function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                // ensure arrays\n                if (!Array.isArray(rolesNames)) rolesNames = [rolesNames];\n                _iterator3 = _createForOfIteratorHelperLoose(rolesNames);\n              case 2:\n                if ((_step3 = _iterator3()).done) {\n                  _context5.next = 8;\n                  break;\n                }\n                roleName = _step3.value;\n                _context5.next = 6;\n                return _regeneratorRuntime.awrap(Roles._addRoleToParentAsync(roleName, parentName));\n              case 6:\n                _context5.next = 2;\n                break;\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n          return _callee5$;\n        }(), null, null, null, Promise);\n      }\n      return _callee5;\n    }(),\n    /**\n     * @method _addRoleToParentAsync\n     * @param {String} roleName Name of role.\n     * @param {String} parentName Name of parent role.\n     * @returns {Promise}\n     * @private\n     * @static\n     */\n    _addRoleToParentAsync: function () {\n      function _callee6(roleName, parentName) {\n        var role, count;\n        return _regeneratorRuntime.async(function () {\n          function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                Roles._checkRoleName(roleName);\n                Roles._checkRoleName(parentName);\n\n                // query to get role's children\n                _context6.next = 4;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: roleName\n                }));\n              case 4:\n                role = _context6.sent;\n                if (role) {\n                  _context6.next = 7;\n                  break;\n                }\n                throw new Error(\"Role '\" + roleName + \"' does not exist.\");\n              case 7:\n                _context6.next = 9;\n                return _regeneratorRuntime.awrap(Roles._getInheritedRoleNamesAsync(role));\n              case 9:\n                if (!_context6.sent.includes(parentName)) {\n                  _context6.next = 11;\n                  break;\n                }\n                throw new Error(\"Roles '\" + roleName + \"' and '\" + parentName + \"' would form a cycle.\");\n              case 11:\n                _context6.next = 13;\n                return _regeneratorRuntime.awrap(Meteor.roles.updateAsync({\n                  _id: parentName,\n                  'children._id': {\n                    $ne: role._id\n                  }\n                }, {\n                  $push: {\n                    children: {\n                      _id: role._id\n                    }\n                  }\n                }));\n              case 13:\n                count = _context6.sent;\n                if (count) {\n                  _context6.next = 16;\n                  break;\n                }\n                return _context6.abrupt(\"return\");\n              case 16:\n                _context6.t0 = _regeneratorRuntime;\n                _context6.t1 = Meteor.roleAssignment;\n                _context6.t2 = {\n                  'inheritedRoles._id': parentName\n                };\n                _context6.t3 = [role._id];\n                _context6.t4 = _toConsumableArray;\n                _context6.next = 23;\n                return _regeneratorRuntime.awrap(Roles._getInheritedRoleNamesAsync(role));\n              case 23:\n                _context6.t5 = _context6.sent;\n                _context6.t6 = (0, _context6.t4)(_context6.t5);\n                _context6.t7 = _context6.t3.concat.call(_context6.t3, _context6.t6).map(function (r) {\n                  return {\n                    _id: r\n                  };\n                });\n                _context6.t8 = {\n                  $each: _context6.t7\n                };\n                _context6.t9 = {\n                  inheritedRoles: _context6.t8\n                };\n                _context6.t10 = {\n                  $push: _context6.t9\n                };\n                _context6.t11 = {\n                  multi: true\n                };\n                _context6.t12 = _context6.t1.updateAsync.call(_context6.t1, _context6.t2, _context6.t10, _context6.t11);\n                _context6.next = 33;\n                return _context6.t0.awrap.call(_context6.t0, _context6.t12);\n              case 33:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n          return _callee6$;\n        }(), null, null, null, Promise);\n      }\n      return _callee6;\n    }(),\n    /**\n     * Remove role parent from roles.\n     *\n     * Other parents are kept (role can have multiple parents). For users which have the\n     * parent role set, removed subrole is removed automatically.\n     *\n     * @method removeRolesFromParentAsync\n     * @param {Array|String} rolesNames Name(s) of role(s).\n     * @param {String} parentName Name of parent role.\n     * @returns {Promise}\n     * @static\n     */\n    removeRolesFromParentAsync: function () {\n      function _callee7(rolesNames, parentName) {\n        var _iterator4, _step4, roleName;\n        return _regeneratorRuntime.async(function () {\n          function _callee7$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                // ensure arrays\n                if (!Array.isArray(rolesNames)) rolesNames = [rolesNames];\n                _iterator4 = _createForOfIteratorHelperLoose(rolesNames);\n              case 2:\n                if ((_step4 = _iterator4()).done) {\n                  _context7.next = 8;\n                  break;\n                }\n                roleName = _step4.value;\n                _context7.next = 6;\n                return _regeneratorRuntime.awrap(Roles._removeRoleFromParentAsync(roleName, parentName));\n              case 6:\n                _context7.next = 2;\n                break;\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n          return _callee7$;\n        }(), null, null, null, Promise);\n      }\n      return _callee7;\n    }(),\n    /**\n     * @method _removeRoleFromParentAsync\n     * @param {String} roleName Name of role.\n     * @param {String} parentName Name of parent role.\n     * @returns {Promise}\n     * @private\n     * @static\n     */\n    _removeRoleFromParentAsync: function () {\n      function _callee8(roleName, parentName) {\n        var role, count, roles, _iterator5, _step5, r, inheritedRoles;\n        return _regeneratorRuntime.async(function () {\n          function _callee8$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                Roles._checkRoleName(roleName);\n                Roles._checkRoleName(parentName);\n\n                // check for role existence\n                // this would not really be needed, but we are trying to match addRolesToParent\n                _context8.next = 4;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: roleName\n                }, {\n                  fields: {\n                    _id: 1\n                  }\n                }));\n              case 4:\n                role = _context8.sent;\n                if (role) {\n                  _context8.next = 7;\n                  break;\n                }\n                throw new Error(\"Role '\" + roleName + \"' does not exist.\");\n              case 7:\n                _context8.next = 9;\n                return _regeneratorRuntime.awrap(Meteor.roles.updateAsync({\n                  _id: parentName\n                }, {\n                  $pull: {\n                    children: {\n                      _id: role._id\n                    }\n                  }\n                }));\n              case 9:\n                count = _context8.sent;\n                if (count) {\n                  _context8.next = 12;\n                  break;\n                }\n                return _context8.abrupt(\"return\");\n              case 12:\n                _context8.t0 = [];\n                _context8.t1 = _toConsumableArray;\n                _context8.t2 = _regeneratorRuntime;\n                _context8.t3 = Roles;\n                _context8.next = 18;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: parentName\n                }));\n              case 18:\n                _context8.t4 = _context8.sent;\n                _context8.t5 = _context8.t3._getParentRoleNamesAsync.call(_context8.t3, _context8.t4);\n                _context8.next = 22;\n                return _context8.t2.awrap.call(_context8.t2, _context8.t5);\n              case 22:\n                _context8.t6 = _context8.sent;\n                _context8.t7 = (0, _context8.t1)(_context8.t6);\n                _context8.t8 = [parentName];\n                roles = _context8.t0.concat.call(_context8.t0, _context8.t7, _context8.t8);\n                _context8.t9 = _createForOfIteratorHelperLoose;\n                _context8.next = 29;\n                return _regeneratorRuntime.awrap(Meteor.roles.find({\n                  _id: {\n                    $in: roles\n                  }\n                }).fetchAsync());\n              case 29:\n                _context8.t10 = _context8.sent;\n                _iterator5 = (0, _context8.t9)(_context8.t10);\n              case 31:\n                if ((_step5 = _iterator5()).done) {\n                  _context8.next = 46;\n                  break;\n                }\n                r = _step5.value;\n                _context8.t11 = _regeneratorRuntime;\n                _context8.t12 = Roles;\n                _context8.next = 37;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: r._id\n                }));\n              case 37:\n                _context8.t13 = _context8.sent;\n                _context8.t14 = _context8.t12._getInheritedRoleNamesAsync.call(_context8.t12, _context8.t13);\n                _context8.next = 41;\n                return _context8.t11.awrap.call(_context8.t11, _context8.t14);\n              case 41:\n                inheritedRoles = _context8.sent;\n                _context8.next = 44;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.updateAsync({\n                  'role._id': r._id,\n                  'inheritedRoles._id': role._id\n                }, {\n                  $set: {\n                    inheritedRoles: [r._id].concat(_toConsumableArray(inheritedRoles)).map(function (r2) {\n                      return {\n                        _id: r2\n                      };\n                    })\n                  }\n                }, {\n                  multi: true\n                }));\n              case 44:\n                _context8.next = 31;\n                break;\n              case 46:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n          return _callee8$;\n        }(), null, null, null, Promise);\n      }\n      return _callee8;\n    }(),\n    /**\n     * Add users to roles.\n     *\n     * Adds roles to existing roles for each user.\n     *\n     * @example\n     *     Roles.addUsersToRolesAsync(userId, 'admin')\n     *     Roles.addUsersToRolesAsync(userId, ['view-secrets'], 'example.com')\n     *     Roles.addUsersToRolesAsync([user1, user2], ['user','editor'])\n     *     Roles.addUsersToRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n     *\n     * @method addUsersToRolesAsync\n     * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n     * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope, or `null` for the global role\n     *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n     * @returns {Promise}\n     *\n     * Alternatively, it can be a scope name string.\n     * @static\n     */\n    addUsersToRolesAsync: function () {\n      function _callee9(users, roles, options) {\n        var id, _iterator6, _step6, user, _iterator7, _step7, role;\n        return _regeneratorRuntime.async(function () {\n          function _callee9$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                if (users) {\n                  _context9.next = 2;\n                  break;\n                }\n                throw new Error(\"Missing 'users' param.\");\n              case 2:\n                if (roles) {\n                  _context9.next = 4;\n                  break;\n                }\n                throw new Error(\"Missing 'roles' param.\");\n              case 4:\n                options = Roles._normalizeOptions(options);\n\n                // ensure arrays\n                if (!Array.isArray(users)) users = [users];\n                if (!Array.isArray(roles)) roles = [roles];\n                Roles._checkScopeName(options.scope);\n                options = Object.assign({\n                  ifExists: false\n                }, options);\n                _iterator6 = _createForOfIteratorHelperLoose(users);\n              case 10:\n                if ((_step6 = _iterator6()).done) {\n                  _context9.next = 22;\n                  break;\n                }\n                user = _step6.value;\n                if (_typeof(user) === 'object') {\n                  id = user._id;\n                } else {\n                  id = user;\n                }\n                _iterator7 = _createForOfIteratorHelperLoose(roles);\n              case 14:\n                if ((_step7 = _iterator7()).done) {\n                  _context9.next = 20;\n                  break;\n                }\n                role = _step7.value;\n                _context9.next = 18;\n                return _regeneratorRuntime.awrap(Roles._addUserToRoleAsync(id, role, options));\n              case 18:\n                _context9.next = 14;\n                break;\n              case 20:\n                _context9.next = 10;\n                break;\n              case 22:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n          return _callee9$;\n        }(), null, null, null, Promise);\n      }\n      return _callee9;\n    }(),\n    /**\n     * Set users' roles.\n     *\n     * Replaces all existing roles with a new set of roles.\n     *\n     * @example\n     *     await Roles.setUserRolesAsync(userId, 'admin')\n     *     await Roles.setUserRolesAsync(userId, ['view-secrets'], 'example.com')\n     *     await Roles.setUserRolesAsync([user1, user2], ['user','editor'])\n     *     await Roles.setUserRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n     *\n     * @method setUserRolesAsync\n     * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n     * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope, or `null` for the global role\n     *   - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n     *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n     * @returns {Promise}\n     *\n     * Alternatively, it can be a scope name string.\n     * @static\n     */\n    setUserRolesAsync: function () {\n      function _callee10(users, roles, options) {\n        var id, _iterator8, _step8, user, selector, _iterator9, _step9, role;\n        return _regeneratorRuntime.async(function () {\n          function _callee10$(_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                if (users) {\n                  _context10.next = 2;\n                  break;\n                }\n                throw new Error(\"Missing 'users' param.\");\n              case 2:\n                if (roles) {\n                  _context10.next = 4;\n                  break;\n                }\n                throw new Error(\"Missing 'roles' param.\");\n              case 4:\n                options = Roles._normalizeOptions(options);\n\n                // ensure arrays\n                if (!Array.isArray(users)) users = [users];\n                if (!Array.isArray(roles)) roles = [roles];\n                Roles._checkScopeName(options.scope);\n                options = Object.assign({\n                  ifExists: false,\n                  anyScope: false\n                }, options);\n                _iterator8 = _createForOfIteratorHelperLoose(users);\n              case 10:\n                if ((_step8 = _iterator8()).done) {\n                  _context10.next = 26;\n                  break;\n                }\n                user = _step8.value;\n                if (_typeof(user) === 'object') {\n                  id = user._id;\n                } else {\n                  id = user;\n                }\n                // we first clear all roles for the user\n                selector = {\n                  'user._id': id\n                };\n                if (!options.anyScope) {\n                  selector.scope = options.scope;\n                }\n                _context10.next = 17;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.removeAsync(selector));\n              case 17:\n                _iterator9 = _createForOfIteratorHelperLoose(roles);\n              case 18:\n                if ((_step9 = _iterator9()).done) {\n                  _context10.next = 24;\n                  break;\n                }\n                role = _step9.value;\n                _context10.next = 22;\n                return _regeneratorRuntime.awrap(Roles._addUserToRole(id, role, options));\n              case 22:\n                _context10.next = 18;\n                break;\n              case 24:\n                _context10.next = 10;\n                break;\n              case 26:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n          return _callee10$;\n        }(), null, null, null, Promise);\n      }\n      return _callee10;\n    }(),\n    /**\n     * Add one user to one role.\n     *\n     * @method _addUserToRole\n     * @param {String} userId The user ID.\n     * @param {String} roleName Name of the role to add the user to. The role have to exist.\n     * @param {Object} options Options:\n     *   - `scope`: name of the scope, or `null` for the global role\n     *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n     * @returns {Promise}\n     * @private\n     * @static\n     */\n    _addUserToRoleAsync: function () {\n      function _callee11(userId, roleName, options) {\n        var role, existingAssignment, insertedId, res;\n        return _regeneratorRuntime.async(function () {\n          function _callee11$(_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                Roles._checkRoleName(roleName);\n                Roles._checkScopeName(options.scope);\n                if (userId) {\n                  _context11.next = 4;\n                  break;\n                }\n                return _context11.abrupt(\"return\");\n              case 4:\n                _context11.next = 6;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: roleName\n                }, {\n                  fields: {\n                    children: 1\n                  }\n                }));\n              case 6:\n                role = _context11.sent;\n                if (role) {\n                  _context11.next = 13;\n                  break;\n                }\n                if (!options.ifExists) {\n                  _context11.next = 12;\n                  break;\n                }\n                return _context11.abrupt(\"return\", []);\n              case 12:\n                throw new Error(\"Role '\" + roleName + \"' does not exist.\");\n              case 13:\n                _context11.next = 15;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.findOneAsync({\n                  'user._id': userId,\n                  'role._id': roleName,\n                  scope: options.scope\n                }));\n              case 15:\n                existingAssignment = _context11.sent;\n                if (!existingAssignment) {\n                  _context11.next = 24;\n                  break;\n                }\n                _context11.next = 19;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.updateAsync(existingAssignment._id, {\n                  $set: {\n                    user: {\n                      _id: userId\n                    },\n                    role: {\n                      _id: roleName\n                    },\n                    scope: options.scope\n                  }\n                }));\n              case 19:\n                _context11.next = 21;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.findOneAsync(existingAssignment._id));\n              case 21:\n                res = _context11.sent;\n                _context11.next = 27;\n                break;\n              case 24:\n                _context11.next = 26;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.insertAsync({\n                  user: {\n                    _id: userId\n                  },\n                  role: {\n                    _id: roleName\n                  },\n                  scope: options.scope\n                }));\n              case 26:\n                insertedId = _context11.sent;\n              case 27:\n                if (!insertedId) {\n                  _context11.next = 46;\n                  break;\n                }\n                _context11.t0 = _regeneratorRuntime;\n                _context11.t1 = Meteor.roleAssignment;\n                _context11.t2 = {\n                  _id: insertedId\n                };\n                _context11.t3 = [roleName];\n                _context11.t4 = _toConsumableArray;\n                _context11.next = 35;\n                return _regeneratorRuntime.awrap(Roles._getInheritedRoleNamesAsync(role));\n              case 35:\n                _context11.t5 = _context11.sent;\n                _context11.t6 = (0, _context11.t4)(_context11.t5);\n                _context11.t7 = _context11.t3.concat.call(_context11.t3, _context11.t6).map(function (r) {\n                  return {\n                    _id: r\n                  };\n                });\n                _context11.t8 = {\n                  inheritedRoles: _context11.t7\n                };\n                _context11.t9 = {\n                  $set: _context11.t8\n                };\n                _context11.t10 = _context11.t1.updateAsync.call(_context11.t1, _context11.t2, _context11.t9);\n                _context11.next = 43;\n                return _context11.t0.awrap.call(_context11.t0, _context11.t10);\n              case 43:\n                _context11.next = 45;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.findOneAsync({\n                  _id: insertedId\n                }));\n              case 45:\n                res = _context11.sent;\n              case 46:\n                res.insertedId = insertedId; // For backward compatibility\n                return _context11.abrupt(\"return\", res);\n              case 48:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n          return _callee11$;\n        }(), null, null, null, Promise);\n      }\n      return _callee11;\n    }(),\n    /**\n     * Returns an array of role names the given role name is a child of.\n     *\n     * @example\n     *     Roles._getParentRoleNames({ _id: 'admin', children; [] })\n     *\n     * @method _getParentRoleNames\n     * @param {object} role The role object\n     * @returns {Promise}\n     * @private\n     * @static\n     */\n    _getParentRoleNamesAsync: function () {\n      function _callee12(role) {\n        var parentRoles, _iterator10, _step10, roleName, _iterator11, _step11, parentRole;\n        return _regeneratorRuntime.async(function () {\n          function _callee12$(_context12) {\n            while (1) switch (_context12.prev = _context12.next) {\n              case 0:\n                if (role) {\n                  _context12.next = 2;\n                  break;\n                }\n                return _context12.abrupt(\"return\", []);\n              case 2:\n                parentRoles = new Set([role._id]);\n                _iterator10 = _createForOfIteratorHelperLoose(parentRoles);\n              case 4:\n                if ((_step10 = _iterator10()).done) {\n                  _context12.next = 18;\n                  break;\n                }\n                roleName = _step10.value;\n                _context12.t0 = _createForOfIteratorHelperLoose;\n                _context12.next = 9;\n                return _regeneratorRuntime.awrap(Meteor.roles.find({\n                  'children._id': roleName\n                }).fetchAsync());\n              case 9:\n                _context12.t1 = _context12.sent;\n                _iterator11 = (0, _context12.t0)(_context12.t1);\n              case 11:\n                if ((_step11 = _iterator11()).done) {\n                  _context12.next = 16;\n                  break;\n                }\n                parentRole = _step11.value;\n                parentRoles.add(parentRole._id);\n              case 14:\n                _context12.next = 11;\n                break;\n              case 16:\n                _context12.next = 4;\n                break;\n              case 18:\n                parentRoles.delete(role._id);\n                return _context12.abrupt(\"return\", _toConsumableArray(parentRoles));\n              case 20:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n          return _callee12$;\n        }(), null, null, null, Promise);\n      }\n      return _callee12;\n    }(),\n    /**\n     * Returns an array of role names the given role name is a parent of.\n     *\n     * @example\n     *     Roles._getInheritedRoleNames({ _id: 'admin', children; [] })\n     *\n     * @method _getInheritedRoleNames\n     * @param {object} role The role object\n     * @returns {Promise}\n     * @private\n     * @static\n     */\n    _getInheritedRoleNamesAsync: function () {\n      function _callee13(role) {\n        var inheritedRoles, nestedRoles, _iterator12, _step12, r, roles, _iterator13, _step13, r2;\n        return _regeneratorRuntime.async(function () {\n          function _callee13$(_context13) {\n            while (1) switch (_context13.prev = _context13.next) {\n              case 0:\n                inheritedRoles = new Set();\n                nestedRoles = new Set([role]);\n                _iterator12 = _createForOfIteratorHelperLoose(nestedRoles);\n              case 3:\n                if ((_step12 = _iterator12()).done) {\n                  _context13.next = 11;\n                  break;\n                }\n                r = _step12.value;\n                _context13.next = 7;\n                return _regeneratorRuntime.awrap(Meteor.roles.find({\n                  _id: {\n                    $in: r.children.map(function (r) {\n                      return r._id;\n                    })\n                  }\n                }, {\n                  fields: {\n                    children: 1\n                  }\n                }).fetchAsync());\n              case 7:\n                roles = _context13.sent;\n                for (_iterator13 = _createForOfIteratorHelperLoose(roles); !(_step13 = _iterator13()).done;) {\n                  r2 = _step13.value;\n                  inheritedRoles.add(r2._id);\n                  nestedRoles.add(r2);\n                }\n              case 9:\n                _context13.next = 3;\n                break;\n              case 11:\n                return _context13.abrupt(\"return\", _toConsumableArray(inheritedRoles));\n              case 12:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n          return _callee13$;\n        }(), null, null, null, Promise);\n      }\n      return _callee13;\n    }(),\n    /**\n     * Remove users from assigned roles.\n     *\n     * @example\n     *     await Roles.removeUsersFromRolesAsync(userId, 'admin')\n     *     await Roles.removeUsersFromRolesAsync([userId, user2], ['editor'])\n     *     await Roles.removeUsersFromRolesAsync(userId, ['user'], 'group1')\n     *\n     * @method removeUsersFromRolesAsync\n     * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n     * @param {Array|String} roles Name(s) of roles to remove users from. Roles have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope, or `null` for the global role\n     *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n     * @returns {Promise}\n     *\n     * Alternatively, it can be a scope name string.\n     * @static\n     */\n    removeUsersFromRolesAsync: function () {\n      function _callee14(users, roles, options) {\n        var _iterator14, _step14, user, _iterator15, _step15, role, id;\n        return _regeneratorRuntime.async(function () {\n          function _callee14$(_context14) {\n            while (1) switch (_context14.prev = _context14.next) {\n              case 0:\n                if (users) {\n                  _context14.next = 2;\n                  break;\n                }\n                throw new Error(\"Missing 'users' param.\");\n              case 2:\n                if (roles) {\n                  _context14.next = 4;\n                  break;\n                }\n                throw new Error(\"Missing 'roles' param.\");\n              case 4:\n                options = Roles._normalizeOptions(options);\n\n                // ensure arrays\n                if (!Array.isArray(users)) users = [users];\n                if (!Array.isArray(roles)) roles = [roles];\n                Roles._checkScopeName(options.scope);\n                _iterator14 = _createForOfIteratorHelperLoose(users);\n              case 9:\n                if ((_step14 = _iterator14()).done) {\n                  _context14.next = 24;\n                  break;\n                }\n                user = _step14.value;\n                if (user) {\n                  _context14.next = 13;\n                  break;\n                }\n                return _context14.abrupt(\"return\");\n              case 13:\n                _iterator15 = _createForOfIteratorHelperLoose(roles);\n              case 14:\n                if ((_step15 = _iterator15()).done) {\n                  _context14.next = 22;\n                  break;\n                }\n                role = _step15.value;\n                id = void 0;\n                if (_typeof(user) === 'object') {\n                  id = user._id;\n                } else {\n                  id = user;\n                }\n                _context14.next = 20;\n                return _regeneratorRuntime.awrap(Roles._removeUserFromRoleAsync(id, role, options));\n              case 20:\n                _context14.next = 14;\n                break;\n              case 22:\n                _context14.next = 9;\n                break;\n              case 24:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n          return _callee14$;\n        }(), null, null, null, Promise);\n      }\n      return _callee14;\n    }(),\n    /**\n     * Remove one user from one role.\n     *\n     * @method _removeUserFromRole\n     * @param {String} userId The user ID.\n     * @param {String} roleName Name of the role to add the user to. The role have to exist.\n     * @param {Object} options Options:\n     *   - `scope`: name of the scope, or `null` for the global role\n     *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n     * @returns {Promise}\n     * @private\n     * @static\n     */\n    _removeUserFromRoleAsync: function () {\n      function _callee15(userId, roleName, options) {\n        var selector;\n        return _regeneratorRuntime.async(function () {\n          function _callee15$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                Roles._checkRoleName(roleName);\n                Roles._checkScopeName(options.scope);\n                if (userId) {\n                  _context15.next = 4;\n                  break;\n                }\n                return _context15.abrupt(\"return\");\n              case 4:\n                selector = {\n                  'user._id': userId,\n                  'role._id': roleName\n                };\n                if (!options.anyScope) {\n                  selector.scope = options.scope;\n                }\n                _context15.next = 8;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.removeAsync(selector));\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n          return _callee15$;\n        }(), null, null, null, Promise);\n      }\n      return _callee15;\n    }(),\n    /**\n     * Check if user has specified roles.\n     *\n     * @example\n     *     // global roles\n     *     await Roles.userIsInRoleAsync(user, 'admin')\n     *     await Roles.userIsInRoleAsync(user, ['admin','editor'])\n     *     await Roles.userIsInRoleAsync(userId, 'admin')\n     *     await Roles.userIsInRoleAsync(userId, ['admin','editor'])\n     *\n     *     // scope roles (global roles are still checked)\n     *     await Roles.userIsInRoleAsync(user, 'admin', 'group1')\n     *     await Roles.userIsInRoleAsync(userId, ['admin','editor'], 'group1')\n     *     await Roles.userIsInRoleAsync(userId, ['admin','editor'], {scope: 'group1'})\n     *\n     * @method userIsInRoleAsync\n     * @param {String|Object} user User ID or an actual user object.\n     * @param {Array|String} roles Name of role or an array of roles to check against. If array,\n     *                             will return `true` if user is in _any_ role.\n     *                             Roles do not have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope; if supplied, limits check to just that scope\n     *     the user's global roles will always be checked whether scope is specified or not\n     *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n     *\n     * Alternatively, it can be a scope name string.\n     * @return {Promise<Boolean>} `true` if user is in _any_ of the target roles\n     * @static\n     */\n    userIsInRoleAsync: function () {\n      function _callee17(user, roles, options) {\n        var id, selector, res;\n        return _regeneratorRuntime.async(function () {\n          function _callee17$(_context17) {\n            while (1) switch (_context17.prev = _context17.next) {\n              case 0:\n                options = Roles._normalizeOptions(options);\n\n                // ensure array to simplify code\n                if (!Array.isArray(roles)) roles = [roles];\n                roles = roles.filter(function (r) {\n                  return r != null;\n                });\n                if (roles.length) {\n                  _context17.next = 5;\n                  break;\n                }\n                return _context17.abrupt(\"return\", false);\n              case 5:\n                Roles._checkScopeName(options.scope);\n                options = Object.assign({\n                  anyScope: false\n                }, options);\n                if (user && _typeof(user) === 'object') {\n                  id = user._id;\n                } else {\n                  id = user;\n                }\n                if (id) {\n                  _context17.next = 10;\n                  break;\n                }\n                return _context17.abrupt(\"return\", false);\n              case 10:\n                if (!(typeof id !== 'string')) {\n                  _context17.next = 12;\n                  break;\n                }\n                return _context17.abrupt(\"return\", false);\n              case 12:\n                selector = {\n                  'user._id': id\n                };\n                if (!options.anyScope) {\n                  selector.scope = {\n                    $in: [options.scope, null]\n                  };\n                }\n                _context17.next = 16;\n                return _regeneratorRuntime.awrap(asyncSome(roles, function () {\n                  function _callee16(roleName) {\n                    var out;\n                    return _regeneratorRuntime.async(function () {\n                      function _callee16$(_context16) {\n                        while (1) switch (_context16.prev = _context16.next) {\n                          case 0:\n                            selector['inheritedRoles._id'] = roleName;\n                            _context16.next = 3;\n                            return _regeneratorRuntime.awrap(Meteor.roleAssignment.find(selector, {\n                              limit: 1\n                            }).countAsync());\n                          case 3:\n                            _context16.t0 = _context16.sent;\n                            out = _context16.t0 > 0;\n                            return _context16.abrupt(\"return\", out);\n                          case 6:\n                          case \"end\":\n                            return _context16.stop();\n                        }\n                      }\n                      return _callee16$;\n                    }(), null, null, null, Promise);\n                  }\n                  return _callee16;\n                }()));\n              case 16:\n                res = _context17.sent;\n                return _context17.abrupt(\"return\", res);\n              case 18:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n          return _callee17$;\n        }(), null, null, null, Promise);\n      }\n      return _callee17;\n    }(),\n    /**\n     * Retrieve user's roles.\n     *\n     * @method getRolesForUserAsync\n     * @param {String|Object} user User ID or an actual user object.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n     *   - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n     *   - `onlyScoped`: if set, only roles in the specified scope are returned\n     *   - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n     *   - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n     *     If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n     *     result strongly dependent on the internal data structure of this plugin.\n     *\n     * Alternatively, it can be a scope name string.\n     * @return {Promise<Array>} Array of user's roles, unsorted.\n     * @static\n     */\n    getRolesForUserAsync: function () {\n      function _callee18(user, options) {\n        var id, selector, filter, roles;\n        return _regeneratorRuntime.async(function () {\n          function _callee18$(_context18) {\n            while (1) switch (_context18.prev = _context18.next) {\n              case 0:\n                options = Roles._normalizeOptions(options);\n                Roles._checkScopeName(options.scope);\n                options = Object.assign({\n                  fullObjects: false,\n                  onlyAssigned: false,\n                  anyScope: false,\n                  onlyScoped: false\n                }, options);\n                if (user && _typeof(user) === 'object') {\n                  id = user._id;\n                } else {\n                  id = user;\n                }\n                if (id) {\n                  _context18.next = 6;\n                  break;\n                }\n                return _context18.abrupt(\"return\", []);\n              case 6:\n                selector = {\n                  'user._id': id\n                };\n                filter = {\n                  fields: {\n                    'inheritedRoles._id': 1\n                  }\n                };\n                if (!options.anyScope) {\n                  selector.scope = {\n                    $in: [options.scope]\n                  };\n                  if (!options.onlyScoped) {\n                    selector.scope.$in.push(null);\n                  }\n                }\n                if (options.onlyAssigned) {\n                  delete filter.fields['inheritedRoles._id'];\n                  filter.fields['role._id'] = 1;\n                }\n                if (options.fullObjects) {\n                  delete filter.fields;\n                }\n                _context18.next = 13;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.find(selector, filter).fetchAsync());\n              case 13:\n                roles = _context18.sent;\n                if (!options.fullObjects) {\n                  _context18.next = 16;\n                  break;\n                }\n                return _context18.abrupt(\"return\", roles);\n              case 16:\n                return _context18.abrupt(\"return\", _toConsumableArray(new Set(roles.reduce(function (rev, current) {\n                  if (current.inheritedRoles) {\n                    return rev.concat(current.inheritedRoles.map(function (r) {\n                      return r._id;\n                    }));\n                  } else if (current.role) {\n                    rev.push(current.role._id);\n                  }\n                  return rev;\n                }, []))));\n              case 17:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n          return _callee18$;\n        }(), null, null, null, Promise);\n      }\n      return _callee18;\n    }(),\n    /**\n     * Retrieve cursor of all existing roles.\n     *\n     * @method getAllRoles\n     * @param {Object} [queryOptions] Options which are passed directly\n     *                                through to `Meteor.roles.find(query, options)`.\n     * @return {Cursor} Cursor of existing roles.\n     * @static\n     */\n    getAllRoles: function (queryOptions) {\n      queryOptions = queryOptions || {\n        sort: {\n          _id: 1\n        }\n      };\n      return Meteor.roles.find({}, queryOptions);\n    },\n    /**\n     * Retrieve all users who are in target role.\n     *\n     * Options:\n     *\n     * @method getUsersInRoleAsync\n     * @param {Array|String} roles Name of role or an array of roles. If array, users\n     *                             returned will have at least one of the roles\n     *                             specified but need not have _all_ roles.\n     *                             Roles do not have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope to restrict roles to; user's global\n     *     roles will also be checked\n     *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n     *   - `onlyScoped`: if set, only roles in the specified scope are returned\n     *   - `queryOptions`: options which are passed directly\n     *     through to `Meteor.users.find(query, options)`\n     *\n     * Alternatively, it can be a scope name string.\n     * @param {Object} [queryOptions] Options which are passed directly\n     *                                through to `Meteor.users.find(query, options)`\n     * @return {Promise<Cursor>} Cursor of users in roles.\n     * @static\n     */\n    getUsersInRoleAsync: function () {\n      function _callee19(roles, options, queryOptions) {\n        var ids;\n        return _regeneratorRuntime.async(function () {\n          function _callee19$(_context19) {\n            while (1) switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return _regeneratorRuntime.awrap(Roles.getUserAssignmentsForRole(roles, options).fetchAsync());\n              case 2:\n                ids = _context19.sent.map(function (a) {\n                  return a.user._id;\n                });\n                return _context19.abrupt(\"return\", Meteor.users.find({\n                  _id: {\n                    $in: ids\n                  }\n                }, options && options.queryOptions || queryOptions || {}));\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n          return _callee19$;\n        }(), null, null, null, Promise);\n      }\n      return _callee19;\n    }(),\n    /**\n     * Retrieve all assignments of a user which are for the target role.\n     *\n     * Options:\n     *\n     * @method getUserAssignmentsForRole\n     * @param {Array|String} roles Name of role or an array of roles. If array, users\n     *                             returned will have at least one of the roles\n     *                             specified but need not have _all_ roles.\n     *                             Roles do not have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope to restrict roles to; user's global\n     *     roles will also be checked\n     *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n     *   - `queryOptions`: options which are passed directly\n     *     through to `Meteor.roleAssignment.find(query, options)`\n      * Alternatively, it can be a scope name string.\n     * @return {Cursor} Cursor of user assignments for roles.\n     * @static\n     */\n    getUserAssignmentsForRole: function (roles, options) {\n      options = Roles._normalizeOptions(options);\n      options = Object.assign({\n        anyScope: false,\n        queryOptions: {}\n      }, options);\n      return Roles._getUsersInRoleCursor(roles, options, options.queryOptions);\n    },\n    /**\n     * @method _getUsersInRoleCursor\n     * @param {Array|String} roles Name of role or an array of roles. If array, ids of users are\n     *                             returned which have at least one of the roles\n     *                             assigned but need not have _all_ roles.\n     *                             Roles do not have to exist.\n     * @param {Object|String} [options] Options:\n     *   - `scope`: name of the scope to restrict roles to; user's global\n     *     roles will also be checked\n     *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n     *\n     * Alternatively, it can be a scope name string.\n     * @param {Object} [filter] Options which are passed directly\n     *                                through to `Meteor.roleAssignment.find(query, options)`\n     * @return {Object} Cursor to the assignment documents\n     * @private\n     * @static\n     */\n    _getUsersInRoleCursor: function (roles, options, filter) {\n      options = Roles._normalizeOptions(options);\n      options = Object.assign({\n        anyScope: false,\n        onlyScoped: false\n      }, options);\n\n      // ensure array to simplify code\n      if (!Array.isArray(roles)) roles = [roles];\n      Roles._checkScopeName(options.scope);\n      filter = Object.assign({\n        fields: {\n          'user._id': 1\n        }\n      }, filter);\n      var selector = {\n        'inheritedRoles._id': {\n          $in: roles\n        }\n      };\n      if (!options.anyScope) {\n        selector.scope = {\n          $in: [options.scope]\n        };\n        if (!options.onlyScoped) {\n          selector.scope.$in.push(null);\n        }\n      }\n      return Meteor.roleAssignment.find(selector, filter);\n    },\n    /**\n     * Deprecated. Use `getScopesForUser` instead.\n     *\n     * @method getGroupsForUserAsync\n     * @returns {Promise<Array>}\n     * @static\n     * @deprecated\n     */\n    getGroupsForUserAsync: function () {\n      function _callee20() {\n        var _Roles;\n        var _args20 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function _callee20$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                if (!getGroupsForUserDeprecationWarning) {\n                  getGroupsForUserDeprecationWarning = true;\n                  console && console.warn('getGroupsForUser has been deprecated. Use getScopesForUser instead.');\n                }\n                _context20.next = 3;\n                return _regeneratorRuntime.awrap((_Roles = Roles).getScopesForUser.apply(_Roles, _args20));\n              case 3:\n                return _context20.abrupt(\"return\", _context20.sent);\n              case 4:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n          return _callee20$;\n        }(), null, null, null, Promise);\n      }\n      return _callee20;\n    }(),\n    /**\n     * Retrieve users scopes, if any.\n     *\n     * @method getScopesForUserAsync\n     * @param {String|Object} user User ID or an actual user object.\n     * @param {Array|String} [roles] Name of roles to restrict scopes to.\n     *\n     * @return {Promise<Array>} Array of user's scopes, unsorted.\n     * @static\n     */\n    getScopesForUserAsync: function () {\n      function _callee21(user, roles) {\n        var id, selector, scopes;\n        return _regeneratorRuntime.async(function () {\n          function _callee21$(_context21) {\n            while (1) switch (_context21.prev = _context21.next) {\n              case 0:\n                if (roles && !Array.isArray(roles)) roles = [roles];\n                if (user && _typeof(user) === 'object') {\n                  id = user._id;\n                } else {\n                  id = user;\n                }\n                if (id) {\n                  _context21.next = 4;\n                  break;\n                }\n                return _context21.abrupt(\"return\", []);\n              case 4:\n                selector = {\n                  'user._id': id,\n                  scope: {\n                    $ne: null\n                  }\n                };\n                if (roles) {\n                  selector['inheritedRoles._id'] = {\n                    $in: roles\n                  };\n                }\n                _context21.next = 8;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.find(selector, {\n                  fields: {\n                    scope: 1\n                  }\n                }).fetchAsync());\n              case 8:\n                scopes = _context21.sent.map(function (obi) {\n                  return obi.scope;\n                });\n                return _context21.abrupt(\"return\", _toConsumableArray(new Set(scopes)));\n              case 10:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n          return _callee21$;\n        }(), null, null, null, Promise);\n      }\n      return _callee21;\n    }(),\n    /**\n     * Rename a scope.\n     *\n     * Roles assigned with a given scope are changed to be under the new scope.\n     *\n     * @method renameScopeAsync\n     * @param {String} oldName Old name of a scope.\n     * @param {String} newName New name of a scope.\n     * @returns {Promise}\n     * @static\n     */\n    renameScopeAsync: function () {\n      function _callee22(oldName, newName) {\n        var count;\n        return _regeneratorRuntime.async(function () {\n          function _callee22$(_context22) {\n            while (1) switch (_context22.prev = _context22.next) {\n              case 0:\n                Roles._checkScopeName(oldName);\n                Roles._checkScopeName(newName);\n                if (!(oldName === newName)) {\n                  _context22.next = 4;\n                  break;\n                }\n                return _context22.abrupt(\"return\");\n              case 4:\n                _context22.next = 6;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.updateAsync({\n                  scope: oldName\n                }, {\n                  $set: {\n                    scope: newName\n                  }\n                }, {\n                  multi: true\n                }));\n              case 6:\n                count = _context22.sent;\n              case 7:\n                if (count > 0) {\n                  _context22.next = 4;\n                  break;\n                }\n              case 8:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n          return _callee22$;\n        }(), null, null, null, Promise);\n      }\n      return _callee22;\n    }(),\n    /**\n     * Remove a scope.\n     *\n     * Roles assigned with a given scope are removed.\n     *\n     * @method removeScopeAsync\n     * @param {String} name The name of a scope.\n     * @returns {Promise}\n     * @static\n     */\n    removeScopeAsync: function () {\n      function _callee23(name) {\n        return _regeneratorRuntime.async(function () {\n          function _callee23$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                Roles._checkScopeName(name);\n                _context23.next = 3;\n                return _regeneratorRuntime.awrap(Meteor.roleAssignment.removeAsync({\n                  scope: name\n                }));\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n          return _callee23$;\n        }(), null, null, null, Promise);\n      }\n      return _callee23;\n    }(),\n    /**\n     * Throw an exception if `roleName` is an invalid role name.\n     *\n     * @method _checkRoleName\n     * @param {String} roleName A role name to match against.\n     * @private\n     * @static\n     */\n    _checkRoleName: function (roleName) {\n      if (!roleName || typeof roleName !== 'string' || roleName.trim() !== roleName) {\n        throw new Error(\"Invalid role name '\" + roleName + \"'.\");\n      }\n    },\n    /**\n     * Find out if a role is an ancestor of another role.\n     *\n     * WARNING: If you check this on the client, please make sure all roles are published.\n     *\n     * @method isParentOfAsync\n     * @param {String} parentRoleName The role you want to research.\n     * @param {String} childRoleName The role you expect to be among the children of parentRoleName.\n     * @returns {Promise}\n     * @static\n     */\n    isParentOfAsync: function () {\n      function _callee24(parentRoleName, childRoleName) {\n        var rolesToCheck, roleName, role;\n        return _regeneratorRuntime.async(function () {\n          function _callee24$(_context24) {\n            while (1) switch (_context24.prev = _context24.next) {\n              case 0:\n                if (!(parentRoleName === childRoleName)) {\n                  _context24.next = 2;\n                  break;\n                }\n                return _context24.abrupt(\"return\", true);\n              case 2:\n                if (!(parentRoleName == null || childRoleName == null)) {\n                  _context24.next = 4;\n                  break;\n                }\n                return _context24.abrupt(\"return\", false);\n              case 4:\n                Roles._checkRoleName(parentRoleName);\n                Roles._checkRoleName(childRoleName);\n                rolesToCheck = [parentRoleName];\n              case 7:\n                if (!(rolesToCheck.length !== 0)) {\n                  _context24.next = 19;\n                  break;\n                }\n                roleName = rolesToCheck.pop();\n                if (!(roleName === childRoleName)) {\n                  _context24.next = 11;\n                  break;\n                }\n                return _context24.abrupt(\"return\", true);\n              case 11:\n                _context24.next = 13;\n                return _regeneratorRuntime.awrap(Meteor.roles.findOneAsync({\n                  _id: roleName\n                }));\n              case 13:\n                role = _context24.sent;\n                if (role) {\n                  _context24.next = 16;\n                  break;\n                }\n                return _context24.abrupt(\"continue\", 7);\n              case 16:\n                rolesToCheck = rolesToCheck.concat(role.children.map(function (r) {\n                  return r._id;\n                }));\n                _context24.next = 7;\n                break;\n              case 19:\n                return _context24.abrupt(\"return\", false);\n              case 20:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n          return _callee24$;\n        }(), null, null, null, Promise);\n      }\n      return _callee24;\n    }(),\n    /**\n     * Normalize options.\n     *\n     * @method _normalizeOptions\n     * @param {Object} options Options to normalize.\n     * @return {Object} Normalized options.\n     * @private\n     * @static\n     */\n    _normalizeOptions: function (options) {\n      options = options === undefined ? {} : options;\n      if (options === null || typeof options === 'string') {\n        options = {\n          scope: options\n        };\n      }\n      options.scope = Roles._normalizeScopeName(options.scope);\n      return options;\n    },\n    /**\n     * Normalize scope name.\n     *\n     * @method _normalizeScopeName\n     * @param {String} scopeName A scope name to normalize.\n     * @return {String} Normalized scope name.\n     * @private\n     * @static\n     */\n    _normalizeScopeName: function (scopeName) {\n      // map undefined and null to null\n      if (scopeName == null) {\n        return null;\n      } else {\n        return scopeName;\n      }\n    },\n    /**\n     * Throw an exception if `scopeName` is an invalid scope name.\n     *\n     * @method _checkRoleName\n     * @param {String} scopeName A scope name to match against.\n     * @private\n     * @static\n     */\n    _checkScopeName: function (scopeName) {\n      if (scopeName === null) return;\n      if (!scopeName || typeof scopeName !== 'string' || scopeName.trim() !== scopeName) {\n        throw new Error(\"Invalid scope name '\" + scopeName + \"'.\");\n      }\n    }\n  });\n}.call(this, module);","map":{"version":3,"names":["_regeneratorRuntime","module1","link","default","v","_typeof","_toConsumableArray","_createForOfIteratorHelperLoose","Meteor","Mongo","roles","Collection","roleAssignment","Roles","getGroupsForUserDeprecationWarning","asyncSome","_callee","arr","predicate","_iterator","_step","e","async","_callee$","_context","prev","next","done","value","awrap","sent","abrupt","stop","Promise","Object","assign","GLOBAL_GROUP","createRoleAsync","_callee2","roleName","options","insertedId","existingRole","_callee2$","_context2","_checkRoleName","unlessExists","findOneAsync","_id","updateAsync","$setOnInsert","children","insertAsync","Error","deleteRoleAsync","_callee3","inheritedRoles","_iterator2","_step2","r","_callee3$","_context3","removeAsync","t0","t1","_getParentRoleNames","call","t2","find","$in","fetchAsync","t3","$pull","t4","t5","t6","t7","_getInheritedRoleNamesAsync","$set","concat","map","r2","multi","length","renameRoleAsync","_callee4","oldName","newName","count","role","_callee4$","_context4","addRolesToParentAsync","_callee5","rolesNames","parentName","_iterator3","_step3","_callee5$","_context5","Array","isArray","_addRoleToParentAsync","_callee6","_callee6$","_context6","includes","$ne","$push","t8","$each","t9","t10","t11","t12","removeRolesFromParentAsync","_callee7","_iterator4","_step4","_callee7$","_context7","_removeRoleFromParentAsync","_callee8","_iterator5","_step5","_callee8$","_context8","fields","_getParentRoleNamesAsync","t13","t14","addUsersToRolesAsync","_callee9","users","id","_iterator6","_step6","user","_iterator7","_step7","_callee9$","_context9","_normalizeOptions","_checkScopeName","scope","ifExists","_addUserToRoleAsync","setUserRolesAsync","_callee10","_iterator8","_step8","selector","_iterator9","_step9","_callee10$","_context10","anyScope","_addUserToRole","_callee11","userId","existingAssignment","res","_callee11$","_context11","_callee12","parentRoles","_iterator10","_step10","_iterator11","_step11","parentRole","_callee12$","_context12","Set","add","delete","_callee13","nestedRoles","_iterator12","_step12","_iterator13","_step13","_callee13$","_context13","removeUsersFromRolesAsync","_callee14","_iterator14","_step14","_iterator15","_step15","_callee14$","_context14","_removeUserFromRoleAsync","_callee15","_callee15$","_context15","userIsInRoleAsync","_callee17","_callee17$","_context17","filter","_callee16","out","_callee16$","_context16","limit","countAsync","getRolesForUserAsync","_callee18","_callee18$","_context18","fullObjects","onlyAssigned","onlyScoped","push","reduce","rev","current","getAllRoles","queryOptions","sort","getUsersInRoleAsync","_callee19","ids","_callee19$","_context19","getUserAssignmentsForRole","a","_getUsersInRoleCursor","getGroupsForUserAsync","_callee20","_Roles","_args20","arguments","_callee20$","_context20","console","warn","getScopesForUser","apply","getScopesForUserAsync","_callee21","scopes","_callee21$","_context21","obi","renameScopeAsync","_callee22","_callee22$","_context22","removeScopeAsync","_callee23","name","_callee23$","_context23","trim","isParentOfAsync","_callee24","parentRoleName","childRoleName","rolesToCheck","_callee24$","_context24","pop","undefined","_normalizeScopeName","scopeName","module"],"sources":["packages/alanning:roles/roles/roles_common_async.js"],"sourcesContent":["/* global Roles */\nimport { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\n\n/**\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n *\n * Roles are accessible throgh `Meteor.roles` collection and documents consist of:\n *  - `_id`: role name\n *  - `children`: list of subdocuments:\n *    - `_id`\n *\n * Children list elements are subdocuments so that they can be easier extended in the future or by plugins.\n *\n * Roles can have multiple parents and can be children (subroles) of multiple roles.\n *\n * Example: `{_id: 'admin', children: [{_id: 'editor'}]}`\n *\n * The assignment of a role to a user is stored in a collection, accessible through `Meteor.roleAssignment`.\n * It's documents consist of\n *  - `_id`: Internal MongoDB id\n *  - `role`: A role object which got assigned. Usually only contains the `_id` property\n *  - `user`: A user object, usually only contains the `_id` property\n *  - `scope`: scope name\n *  - `inheritedRoles`: A list of all the roles objects inherited by the assigned role.\n *\n * @module Roles\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Mongo.Collection('roles')\n}\n\nif (!Meteor.roleAssignment) {\n  Meteor.roleAssignment = new Mongo.Collection('role-assignment')\n}\n\n/**\n * @class Roles\n */\nif (typeof Roles === 'undefined') {\n  Roles = {} // eslint-disable-line no-global-assign\n}\n\nlet getGroupsForUserDeprecationWarning = false\n\n/**\n * Helper, resolves async some\n * @param {*} arr\n * @param {*} predicate\n * @returns {Promise<Boolean>}\n */\nconst asyncSome = async (arr, predicate) => {\n  for (const e of arr) {\n    if (await predicate(e)) return true\n  }\n  return false\n}\n\nObject.assign(Roles, {\n  /**\n   * Used as a global group (now scope) name. Not used anymore.\n   *\n   * @property GLOBAL_GROUP\n   * @static\n   * @deprecated\n   */\n  GLOBAL_GROUP: null,\n\n  /**\n   * Create a new role.\n   *\n   * @method createRoleAsync\n   * @param {String} roleName Name of role.\n   * @param {Object} [options] Options:\n   *   - `unlessExists`: if `true`, exception will not be thrown in the role already exists\n   * @return {Promise<String>} ID of the new role or null.\n   * @static\n   */\n  createRoleAsync: async function (roleName, options) {\n    Roles._checkRoleName(roleName)\n\n    options = Object.assign(\n      {\n        unlessExists: false\n      },\n      options\n    )\n\n    let insertedId = null\n\n    const existingRole = await Meteor.roles.findOneAsync({ _id: roleName })\n\n    if (existingRole) {\n      await Meteor.roles.updateAsync(\n        { _id: roleName },\n        { $setOnInsert: { children: [] } }\n      )\n      return null\n    } else {\n      insertedId = await Meteor.roles.insertAsync({\n        _id: roleName,\n        children: []\n      })\n    }\n\n    if (!insertedId) {\n      if (options.unlessExists) return null\n      throw new Error(\"Role '\" + roleName + \"' already exists.\")\n    }\n\n    return insertedId\n  },\n\n  /**\n   * Delete an existing role.\n   *\n   * If the role is set for any user, it is automatically unset.\n   *\n   * @method deleteRoleAsync\n   * @param {String} roleName Name of role.\n   * @returns {Promise}\n   * @static\n   */\n  deleteRoleAsync: async function (roleName) {\n    let roles\n    let inheritedRoles\n\n    Roles._checkRoleName(roleName)\n\n    // Remove all assignments\n    await Meteor.roleAssignment.removeAsync({\n      'role._id': roleName\n    })\n\n    do {\n      // For all roles who have it as a dependency ...\n      roles = Roles._getParentRoleNames(\n        await Meteor.roles.findOneAsync({ _id: roleName })\n      )\n\n      for (const r of await Meteor.roles\n        .find({ _id: { $in: roles } })\n        .fetchAsync()) {\n        await Meteor.roles.updateAsync(\n          {\n            _id: r._id\n          },\n          {\n            $pull: {\n              children: {\n                _id: roleName\n              }\n            }\n          }\n        )\n\n        inheritedRoles = await Roles._getInheritedRoleNamesAsync(\n          await Meteor.roles.findOneAsync({ _id: r._id })\n        )\n        await Meteor.roleAssignment.updateAsync(\n          {\n            'role._id': r._id\n          },\n          {\n            $set: {\n              inheritedRoles: [r._id, ...inheritedRoles].map((r2) => ({\n                _id: r2\n              }))\n            }\n          },\n          { multi: true }\n        )\n      }\n    } while (roles.length > 0)\n\n    // And finally remove the role itself\n    await Meteor.roles.removeAsync({ _id: roleName })\n  },\n\n  /**\n   * Rename an existing role.\n   *\n   * @method renameRoleAsync\n   * @param {String} oldName Old name of a role.\n   * @param {String} newName New name of a role.\n   * @returns {Promise}\n   * @static\n   */\n  renameRoleAsync: async function (oldName, newName) {\n    let count\n\n    Roles._checkRoleName(oldName)\n    Roles._checkRoleName(newName)\n\n    if (oldName === newName) return\n\n    const role = await Meteor.roles.findOneAsync({ _id: oldName })\n\n    if (!role) {\n      throw new Error(\"Role '\" + oldName + \"' does not exist.\")\n    }\n\n    role._id = newName\n\n    await Meteor.roles.insertAsync(role)\n\n    do {\n      count = await Meteor.roleAssignment.updateAsync(\n        {\n          'role._id': oldName\n        },\n        {\n          $set: {\n            'role._id': newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n\n    do {\n      count = await Meteor.roleAssignment.updateAsync(\n        {\n          'inheritedRoles._id': oldName\n        },\n        {\n          $set: {\n            'inheritedRoles.$._id': newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n\n    do {\n      count = await Meteor.roles.updateAsync(\n        {\n          'children._id': oldName\n        },\n        {\n          $set: {\n            'children.$._id': newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n\n    await Meteor.roles.removeAsync({ _id: oldName })\n  },\n\n  /**\n   * Add role parent to roles.\n   *\n   * Previous parents are kept (role can have multiple parents). For users which have the\n   * parent role set, new subroles are added automatically.\n   *\n   * @method addRolesToParentAsync\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @static\n   */\n  addRolesToParentAsync: async function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    for (const roleName of rolesNames) {\n      await Roles._addRoleToParentAsync(roleName, parentName)\n    }\n  },\n\n  /**\n   * @method _addRoleToParentAsync\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _addRoleToParentAsync: async function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // query to get role's children\n    const role = await Meteor.roles.findOneAsync({ _id: roleName })\n\n    if (!role) {\n      throw new Error(\"Role '\" + roleName + \"' does not exist.\")\n    }\n\n    // detect cycles\n    if ((await Roles._getInheritedRoleNamesAsync(role)).includes(parentName)) {\n      throw new Error(\n        \"Roles '\" + roleName + \"' and '\" + parentName + \"' would form a cycle.\"\n      )\n    }\n\n    const count = await Meteor.roles.updateAsync(\n      {\n        _id: parentName,\n        'children._id': {\n          $ne: role._id\n        }\n      },\n      {\n        $push: {\n          children: {\n            _id: role._id\n          }\n        }\n      }\n    )\n\n    // if there was no change, parent role might not exist, or role is\n    // already a sub-role; in any case we do not have anything more to do\n    if (!count) return\n\n    await Meteor.roleAssignment.updateAsync(\n      {\n        'inheritedRoles._id': parentName\n      },\n      {\n        $push: {\n          inheritedRoles: {\n            $each: [\n              role._id,\n              ...(await Roles._getInheritedRoleNamesAsync(role))\n            ].map((r) => ({ _id: r }))\n          }\n        }\n      },\n      { multi: true }\n    )\n  },\n\n  /**\n   * Remove role parent from roles.\n   *\n   * Other parents are kept (role can have multiple parents). For users which have the\n   * parent role set, removed subrole is removed automatically.\n   *\n   * @method removeRolesFromParentAsync\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @static\n   */\n  removeRolesFromParentAsync: async function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    for (const roleName of rolesNames) {\n      await Roles._removeRoleFromParentAsync(roleName, parentName)\n    }\n  },\n\n  /**\n   * @method _removeRoleFromParentAsync\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _removeRoleFromParentAsync: async function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // check for role existence\n    // this would not really be needed, but we are trying to match addRolesToParent\n    const role = await Meteor.roles.findOneAsync(\n      { _id: roleName },\n      { fields: { _id: 1 } }\n    )\n\n    if (!role) {\n      throw new Error(\"Role '\" + roleName + \"' does not exist.\")\n    }\n\n    const count = await Meteor.roles.updateAsync(\n      {\n        _id: parentName\n      },\n      {\n        $pull: {\n          children: {\n            _id: role._id\n          }\n        }\n      }\n    )\n\n    // if there was no change, parent role might not exist, or role was\n    // already not a subrole; in any case we do not have anything more to do\n    if (!count) return\n\n    // For all roles who have had it as a dependency ...\n    const roles = [\n      ...(await Roles._getParentRoleNamesAsync(\n        await Meteor.roles.findOneAsync({ _id: parentName })\n      )),\n      parentName\n    ]\n\n    for (const r of await Meteor.roles\n      .find({ _id: { $in: roles } })\n      .fetchAsync()) {\n      const inheritedRoles = await Roles._getInheritedRoleNamesAsync(\n        await Meteor.roles.findOneAsync({ _id: r._id })\n      )\n      await Meteor.roleAssignment.updateAsync(\n        {\n          'role._id': r._id,\n          'inheritedRoles._id': role._id\n        },\n        {\n          $set: {\n            inheritedRoles: [r._id, ...inheritedRoles].map((r2) => ({\n              _id: r2\n            }))\n          }\n        },\n        { multi: true }\n      )\n    }\n  },\n\n  /**\n   * Add users to roles.\n   *\n   * Adds roles to existing roles for each user.\n   *\n   * @example\n   *     Roles.addUsersToRolesAsync(userId, 'admin')\n   *     Roles.addUsersToRolesAsync(userId, ['view-secrets'], 'example.com')\n   *     Roles.addUsersToRolesAsync([user1, user2], ['user','editor'])\n   *     Roles.addUsersToRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method addUsersToRolesAsync\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @returns {Promise}\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  addUsersToRolesAsync: async function (users, roles, options) {\n    let id\n\n    if (!users) throw new Error(\"Missing 'users' param.\")\n    if (!roles) throw new Error(\"Missing 'roles' param.\")\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign(\n      {\n        ifExists: false\n      },\n      options\n    )\n\n    for (const user of users) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n\n      for (const role of roles) {\n        await Roles._addUserToRoleAsync(id, role, options)\n      }\n    }\n  },\n\n  /**\n   * Set users' roles.\n   *\n   * Replaces all existing roles with a new set of roles.\n   *\n   * @example\n   *     await Roles.setUserRolesAsync(userId, 'admin')\n   *     await Roles.setUserRolesAsync(userId, ['view-secrets'], 'example.com')\n   *     await Roles.setUserRolesAsync([user1, user2], ['user','editor'])\n   *     await Roles.setUserRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method setUserRolesAsync\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @returns {Promise}\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  setUserRolesAsync: async function (users, roles, options) {\n    let id\n\n    if (!users) throw new Error(\"Missing 'users' param.\")\n    if (!roles) throw new Error(\"Missing 'roles' param.\")\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign(\n      {\n        ifExists: false,\n        anyScope: false\n      },\n      options\n    )\n\n    for (const user of users) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n      // we first clear all roles for the user\n      const selector = { 'user._id': id }\n      if (!options.anyScope) {\n        selector.scope = options.scope\n      }\n\n      await Meteor.roleAssignment.removeAsync(selector)\n\n      // and then add all\n      for (const role of roles) {\n        await Roles._addUserToRole(id, role, options)\n      }\n    }\n  },\n\n  /**\n   * Add one user to one role.\n   *\n   * @method _addUserToRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _addUserToRoleAsync: async function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) {\n      return\n    }\n\n    const role = await Meteor.roles.findOneAsync(\n      { _id: roleName },\n      { fields: { children: 1 } }\n    )\n\n    if (!role) {\n      if (options.ifExists) {\n        return []\n      } else {\n        throw new Error(\"Role '\" + roleName + \"' does not exist.\")\n      }\n    }\n\n    // This might create duplicates, because we don't have a unique index, but that's all right. In case there are two, withdrawing the role will effectively kill them both.\n    // TODO revisit this\n    /* const res = await Meteor.roleAssignment.upsertAsync(\n      {\n        \"user._id\": userId,\n        \"role._id\": roleName,\n        scope: options.scope,\n      },\n      {\n        $setOnInsert: {\n          user: { _id: userId },\n          role: { _id: roleName },\n          scope: options.scope,\n        },\n      }\n    ); */\n    const existingAssignment = await Meteor.roleAssignment.findOneAsync({\n      'user._id': userId,\n      'role._id': roleName,\n      scope: options.scope\n    })\n\n    let insertedId\n    let res\n    if (existingAssignment) {\n      await Meteor.roleAssignment.updateAsync(existingAssignment._id, {\n        $set: {\n          user: { _id: userId },\n          role: { _id: roleName },\n          scope: options.scope\n        }\n      })\n\n      res = await Meteor.roleAssignment.findOneAsync(existingAssignment._id)\n    } else {\n      insertedId = await Meteor.roleAssignment.insertAsync({\n        user: { _id: userId },\n        role: { _id: roleName },\n        scope: options.scope\n      })\n    }\n\n    if (insertedId) {\n      await Meteor.roleAssignment.updateAsync(\n        { _id: insertedId },\n        {\n          $set: {\n            inheritedRoles: [\n              roleName,\n              ...(await Roles._getInheritedRoleNamesAsync(role))\n            ].map((r) => ({ _id: r }))\n          }\n        }\n      )\n\n      res = await Meteor.roleAssignment.findOneAsync({ _id: insertedId })\n    }\n    res.insertedId = insertedId // For backward compatibility\n\n    return res\n  },\n\n  /**\n   * Returns an array of role names the given role name is a child of.\n   *\n   * @example\n   *     Roles._getParentRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getParentRoleNames\n   * @param {object} role The role object\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _getParentRoleNamesAsync: async function (role) {\n    if (!role) {\n      return []\n    }\n\n    const parentRoles = new Set([role._id])\n\n    for (const roleName of parentRoles) {\n      for (const parentRole of await Meteor.roles\n        .find({ 'children._id': roleName })\n        .fetchAsync()) {\n        parentRoles.add(parentRole._id)\n      }\n    }\n\n    parentRoles.delete(role._id)\n\n    return [...parentRoles]\n  },\n\n  /**\n   * Returns an array of role names the given role name is a parent of.\n   *\n   * @example\n   *     Roles._getInheritedRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getInheritedRoleNames\n   * @param {object} role The role object\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _getInheritedRoleNamesAsync: async function (role) {\n    const inheritedRoles = new Set()\n    const nestedRoles = new Set([role])\n\n    for (const r of nestedRoles) {\n      const roles = await Meteor.roles\n        .find(\n          { _id: { $in: r.children.map((r) => r._id) } },\n          { fields: { children: 1 } }\n        )\n        .fetchAsync()\n\n      for (const r2 of roles) {\n        inheritedRoles.add(r2._id)\n        nestedRoles.add(r2)\n      }\n    }\n\n    return [...inheritedRoles]\n  },\n\n  /**\n   * Remove users from assigned roles.\n   *\n   * @example\n   *     await Roles.removeUsersFromRolesAsync(userId, 'admin')\n   *     await Roles.removeUsersFromRolesAsync([userId, user2], ['editor'])\n   *     await Roles.removeUsersFromRolesAsync(userId, ['user'], 'group1')\n   *\n   * @method removeUsersFromRolesAsync\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to remove users from. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   * @returns {Promise}\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  removeUsersFromRolesAsync: async function (users, roles, options) {\n    if (!users) throw new Error(\"Missing 'users' param.\")\n    if (!roles) throw new Error(\"Missing 'roles' param.\")\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    for (const user of users) {\n      if (!user) return\n\n      for (const role of roles) {\n        let id\n        if (typeof user === 'object') {\n          id = user._id\n        } else {\n          id = user\n        }\n\n        await Roles._removeUserFromRoleAsync(id, role, options)\n      }\n    }\n  },\n\n  /**\n   * Remove one user from one role.\n   *\n   * @method _removeUserFromRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   * @returns {Promise}\n   * @private\n   * @static\n   */\n  _removeUserFromRoleAsync: async function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) return\n\n    const selector = {\n      'user._id': userId,\n      'role._id': roleName\n    }\n\n    if (!options.anyScope) {\n      selector.scope = options.scope\n    }\n\n    await Meteor.roleAssignment.removeAsync(selector)\n  },\n\n  /**\n   * Check if user has specified roles.\n   *\n   * @example\n   *     // global roles\n   *     await Roles.userIsInRoleAsync(user, 'admin')\n   *     await Roles.userIsInRoleAsync(user, ['admin','editor'])\n   *     await Roles.userIsInRoleAsync(userId, 'admin')\n   *     await Roles.userIsInRoleAsync(userId, ['admin','editor'])\n   *\n   *     // scope roles (global roles are still checked)\n   *     await Roles.userIsInRoleAsync(user, 'admin', 'group1')\n   *     await Roles.userIsInRoleAsync(userId, ['admin','editor'], 'group1')\n   *     await Roles.userIsInRoleAsync(userId, ['admin','editor'], {scope: 'group1'})\n   *\n   * @method userIsInRoleAsync\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} roles Name of role or an array of roles to check against. If array,\n   *                             will return `true` if user is in _any_ role.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope; if supplied, limits check to just that scope\n   *     the user's global roles will always be checked whether scope is specified or not\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Promise<Boolean>} `true` if user is in _any_ of the target roles\n   * @static\n   */\n  userIsInRoleAsync: async function (user, roles, options) {\n    let id\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    roles = roles.filter((r) => r != null)\n\n    if (!roles.length) return false\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign(\n      {\n        anyScope: false\n      },\n      options\n    )\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return false\n    if (typeof id !== 'string') return false\n\n    const selector = {\n      'user._id': id\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope, null] }\n    }\n\n    const res = await asyncSome(roles, async (roleName) => {\n      selector['inheritedRoles._id'] = roleName\n      const out =\n        (await Meteor.roleAssignment\n          .find(selector, { limit: 1 })\n          .countAsync()) > 0\n      return out\n    })\n\n    return res\n  },\n\n  /**\n   * Retrieve user's roles.\n   *\n   * @method getRolesForUserAsync\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n   *   - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n   *   - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n   *     If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n   *     result strongly dependent on the internal data structure of this plugin.\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Promise<Array>} Array of user's roles, unsorted.\n   * @static\n   */\n  getRolesForUserAsync: async function (user, options) {\n    let id\n\n    options = Roles._normalizeOptions(options)\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      fullObjects: false,\n      onlyAssigned: false,\n      anyScope: false,\n      onlyScoped: false\n    }, options)\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = {\n      'user._id': id\n    }\n\n    const filter = {\n      fields: { 'inheritedRoles._id': 1 }\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    if (options.onlyAssigned) {\n      delete filter.fields['inheritedRoles._id']\n      filter.fields['role._id'] = 1\n    }\n\n    if (options.fullObjects) {\n      delete filter.fields\n    }\n\n    const roles = await Meteor.roleAssignment.find(selector, filter).fetchAsync()\n\n    if (options.fullObjects) {\n      return roles\n    }\n\n    return [\n      ...new Set(\n        roles.reduce((rev, current) => {\n          if (current.inheritedRoles) {\n            return rev.concat(current.inheritedRoles.map((r) => r._id))\n          } else if (current.role) {\n            rev.push(current.role._id)\n          }\n          return rev\n        }, [])\n      )\n    ]\n  },\n\n  /**\n   * Retrieve cursor of all existing roles.\n   *\n   * @method getAllRoles\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.roles.find(query, options)`.\n   * @return {Cursor} Cursor of existing roles.\n   * @static\n   */\n  getAllRoles: function (queryOptions) {\n    queryOptions = queryOptions || { sort: { _id: 1 } }\n\n    return Meteor.roles.find({}, queryOptions)\n  },\n\n  /**\n   * Retrieve all users who are in target role.\n   *\n   * Options:\n   *\n   * @method getUsersInRoleAsync\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.users.find(query, options)`\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.users.find(query, options)`\n   * @return {Promise<Cursor>} Cursor of users in roles.\n   * @static\n   */\n  getUsersInRoleAsync: async function (roles, options, queryOptions) {\n    const ids = (\n      await Roles.getUserAssignmentsForRole(roles, options).fetchAsync()\n    ).map((a) => a.user._id)\n\n    return Meteor.users.find(\n      { _id: { $in: ids } },\n      (options && options.queryOptions) || queryOptions || {}\n    )\n  },\n\n  /**\n   * Retrieve all assignments of a user which are for the target role.\n   *\n   * Options:\n   *\n   * @method getUserAssignmentsForRole\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.roleAssignment.find(query, options)`\n\n   * Alternatively, it can be a scope name string.\n   * @return {Cursor} Cursor of user assignments for roles.\n   * @static\n   */\n  getUserAssignmentsForRole: function (roles, options) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign(\n      {\n        anyScope: false,\n        queryOptions: {}\n      },\n      options\n    )\n\n    return Roles._getUsersInRoleCursor(roles, options, options.queryOptions)\n  },\n\n  /**\n   * @method _getUsersInRoleCursor\n   * @param {Array|String} roles Name of role or an array of roles. If array, ids of users are\n   *                             returned which have at least one of the roles\n   *                             assigned but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [filter] Options which are passed directly\n   *                                through to `Meteor.roleAssignment.find(query, options)`\n   * @return {Object} Cursor to the assignment documents\n   * @private\n   * @static\n   */\n  _getUsersInRoleCursor: function (roles, options, filter) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign(\n      {\n        anyScope: false,\n        onlyScoped: false\n      },\n      options\n    )\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    filter = Object.assign(\n      {\n        fields: { 'user._id': 1 }\n      },\n      filter\n    )\n\n    const selector = {\n      'inheritedRoles._id': { $in: roles }\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    return Meteor.roleAssignment.find(selector, filter)\n  },\n\n  /**\n   * Deprecated. Use `getScopesForUser` instead.\n   *\n   * @method getGroupsForUserAsync\n   * @returns {Promise<Array>}\n   * @static\n   * @deprecated\n   */\n  getGroupsForUserAsync: async function (...args) {\n    if (!getGroupsForUserDeprecationWarning) {\n      getGroupsForUserDeprecationWarning = true\n      console &&\n        console.warn(\n          'getGroupsForUser has been deprecated. Use getScopesForUser instead.'\n        )\n    }\n\n    return await Roles.getScopesForUser(...args)\n  },\n\n  /**\n   * Retrieve users scopes, if any.\n   *\n   * @method getScopesForUserAsync\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} [roles] Name of roles to restrict scopes to.\n   *\n   * @return {Promise<Array>} Array of user's scopes, unsorted.\n   * @static\n   */\n  getScopesForUserAsync: async function (user, roles) {\n    let id\n\n    if (roles && !Array.isArray(roles)) roles = [roles]\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = {\n      'user._id': id,\n      scope: { $ne: null }\n    }\n\n    if (roles) {\n      selector['inheritedRoles._id'] = { $in: roles }\n    }\n\n    const scopes = (\n      await Meteor.roleAssignment\n        .find(selector, { fields: { scope: 1 } })\n        .fetchAsync()\n    ).map((obi) => obi.scope)\n\n    return [...new Set(scopes)]\n  },\n\n  /**\n   * Rename a scope.\n   *\n   * Roles assigned with a given scope are changed to be under the new scope.\n   *\n   * @method renameScopeAsync\n   * @param {String} oldName Old name of a scope.\n   * @param {String} newName New name of a scope.\n   * @returns {Promise}\n   * @static\n   */\n  renameScopeAsync: async function (oldName, newName) {\n    let count\n\n    Roles._checkScopeName(oldName)\n    Roles._checkScopeName(newName)\n\n    if (oldName === newName) return\n\n    do {\n      count = await Meteor.roleAssignment.updateAsync(\n        {\n          scope: oldName\n        },\n        {\n          $set: {\n            scope: newName\n          }\n        },\n        { multi: true }\n      )\n    } while (count > 0)\n  },\n\n  /**\n   * Remove a scope.\n   *\n   * Roles assigned with a given scope are removed.\n   *\n   * @method removeScopeAsync\n   * @param {String} name The name of a scope.\n   * @returns {Promise}\n   * @static\n   */\n  removeScopeAsync: async function (name) {\n    Roles._checkScopeName(name)\n\n    await Meteor.roleAssignment.removeAsync({ scope: name })\n  },\n\n  /**\n   * Throw an exception if `roleName` is an invalid role name.\n   *\n   * @method _checkRoleName\n   * @param {String} roleName A role name to match against.\n   * @private\n   * @static\n   */\n  _checkRoleName: function (roleName) {\n    if (\n      !roleName ||\n      typeof roleName !== 'string' ||\n      roleName.trim() !== roleName\n    ) {\n      throw new Error(\"Invalid role name '\" + roleName + \"'.\")\n    }\n  },\n\n  /**\n   * Find out if a role is an ancestor of another role.\n   *\n   * WARNING: If you check this on the client, please make sure all roles are published.\n   *\n   * @method isParentOfAsync\n   * @param {String} parentRoleName The role you want to research.\n   * @param {String} childRoleName The role you expect to be among the children of parentRoleName.\n   * @returns {Promise}\n   * @static\n   */\n  isParentOfAsync: async function (parentRoleName, childRoleName) {\n    if (parentRoleName === childRoleName) {\n      return true\n    }\n\n    if (parentRoleName == null || childRoleName == null) {\n      return false\n    }\n\n    Roles._checkRoleName(parentRoleName)\n    Roles._checkRoleName(childRoleName)\n\n    let rolesToCheck = [parentRoleName]\n    while (rolesToCheck.length !== 0) {\n      const roleName = rolesToCheck.pop()\n\n      if (roleName === childRoleName) {\n        return true\n      }\n\n      const role = await Meteor.roles.findOneAsync({ _id: roleName })\n\n      // This should not happen, but this is a problem to address at some other time.\n      if (!role) continue\n\n      rolesToCheck = rolesToCheck.concat(role.children.map((r) => r._id))\n    }\n\n    return false\n  },\n\n  /**\n   * Normalize options.\n   *\n   * @method _normalizeOptions\n   * @param {Object} options Options to normalize.\n   * @return {Object} Normalized options.\n   * @private\n   * @static\n   */\n  _normalizeOptions: function (options) {\n    options = options === undefined ? {} : options\n\n    if (options === null || typeof options === 'string') {\n      options = { scope: options }\n    }\n\n    options.scope = Roles._normalizeScopeName(options.scope)\n\n    return options\n  },\n\n  /**\n   * Normalize scope name.\n   *\n   * @method _normalizeScopeName\n   * @param {String} scopeName A scope name to normalize.\n   * @return {String} Normalized scope name.\n   * @private\n   * @static\n   */\n  _normalizeScopeName: function (scopeName) {\n    // map undefined and null to null\n    if (scopeName == null) {\n      return null\n    } else {\n      return scopeName\n    }\n  },\n\n  /**\n   * Throw an exception if `scopeName` is an invalid scope name.\n   *\n   * @method _checkRoleName\n   * @param {String} scopeName A scope name to match against.\n   * @private\n   * @static\n   */\n  _checkScopeName: function (scopeName) {\n    if (scopeName === null) return\n\n    if (\n      !scopeName ||\n      typeof scopeName !== 'string' ||\n      scopeName.trim() !== scopeName\n    ) {\n      throw new Error(\"Invalid scope name '\" + scopeName + \"'.\")\n    }\n  }\n})\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"954a45126997741ac977ec2edfb141fb380cf812"}
