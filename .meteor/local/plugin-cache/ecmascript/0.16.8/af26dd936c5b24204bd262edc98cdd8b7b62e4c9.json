{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"D:\\mergerware\\loan-management-app\\packages\\accounts-ui-unstyled\\login_buttons_session.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_session.js","filename":"D:\\mergerware\\loan-management-app\\packages\\accounts-ui-unstyled\\login_buttons_session.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"D:\\mergerware\\loan-management-app","root":"D:\\mergerware\\loan-management-app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"D:\\mergerware\\loan-management-app\\packages\\accounts-ui-unstyled\\login_buttons_session.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_session.js"}},"code":"const VALID_KEYS = ['dropdownVisible',\n// XXX consider replacing these with one key that has an enum for values.\n'inSignupFlow', 'inForgotPasswordFlow', 'inChangePasswordFlow', 'inMessageOnlyFlow', 'inPasswordlessConfirmation', 'passwordlessCodeEmail', 'errorMessage', 'infoMessage',\n// dialogs with messages (info and error)\n'resetPasswordToken', 'enrollAccountToken', 'justVerifiedEmail', 'justResetPassword', 'configureLoginServiceDialogVisible', 'configureLoginServiceDialogServiceName', 'configureLoginServiceDialogSaveDisabled', 'configureOnDesktopVisible'];\nconst validateKey = key => {\n  if (!VALID_KEYS.includes(key)) throw new Error(\"Invalid key in loginButtonsSession: \".concat(key));\n};\nconst KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nconst set = (key, value) => {\n  validateKey(key);\n  if (['errorMessage', 'infoMessage'].includes(key)) throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n  _set(key, value);\n};\nconst _set = (key, value) => Session.set(KEY_PREFIX + key, value);\nconst get = key => {\n  validateKey(key);\n  return Session.get(KEY_PREFIX + key);\n};\nconst closeDropdown = () => {\n  set('inSignupFlow', false);\n  set('inForgotPasswordFlow', false);\n  set('inChangePasswordFlow', false);\n  set('inMessageOnlyFlow', false);\n  set('dropdownVisible', false);\n  resetMessages();\n};\nconst infoMessage = message => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", message);\n  ensureMessageVisible();\n};\nconst errorMessage = message => {\n  _set(\"errorMessage\", message);\n  _set(\"infoMessage\", null);\n  ensureMessageVisible();\n};\n\n// is there a visible dialog that shows messages (info and error)\nconst isMessageDialogVisible = () => {\n  return get('resetPasswordToken') || get('enrollAccountToken') || get('justVerifiedEmail');\n};\n\n// ensure that somethings displaying a message (info or error) is\n// visible. If a dialog with messages is open, do nothing;\n// otherwise open the dropdown.\n//\n// Notably this doesn't matter when only displaying a single login\n// button since then we have an explicit message dialog\n// (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n// this case.\nconst ensureMessageVisible = () => {\n  if (!isMessageDialogVisible()) set(\"dropdownVisible\", true);\n};\nconst resetMessages = () => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", null);\n};\nconst configureService = name => {\n  if (Meteor.isCordova) {\n    set('configureOnDesktopVisible', true);\n  } else {\n    set('configureLoginServiceDialogVisible', true);\n    set('configureLoginServiceDialogServiceName', name);\n    set('configureLoginServiceDialogSaveDisabled', true);\n  }\n};\nAccounts._loginButtonsSession = {\n  set,\n  _set,\n  get,\n  closeDropdown,\n  infoMessage,\n  errorMessage,\n  isMessageDialogVisible,\n  ensureMessageVisible,\n  resetMessages,\n  configureService\n};","map":{"version":3,"names":["VALID_KEYS","validateKey","key","includes","Error","concat","KEY_PREFIX","set","value","_set","Session","get","closeDropdown","resetMessages","infoMessage","message","ensureMessageVisible","errorMessage","isMessageDialogVisible","configureService","name","Meteor","isCordova","Accounts","_loginButtonsSession"],"sources":["packages/accounts-ui-unstyled/login_buttons_session.js"],"sourcesContent":["const VALID_KEYS = [\n  'dropdownVisible',\n\n  // XXX consider replacing these with one key that has an enum for values.\n  'inSignupFlow',\n  'inForgotPasswordFlow',\n  'inChangePasswordFlow',\n  'inMessageOnlyFlow',\n  'inPasswordlessConfirmation',\n  'passwordlessCodeEmail',\n\n  'errorMessage',\n  'infoMessage',\n\n  // dialogs with messages (info and error)\n  'resetPasswordToken',\n  'enrollAccountToken',\n  'justVerifiedEmail',\n  'justResetPassword',\n\n  'configureLoginServiceDialogVisible',\n  'configureLoginServiceDialogServiceName',\n  'configureLoginServiceDialogSaveDisabled',\n  'configureOnDesktopVisible',\n];\n\nconst validateKey = key => {\n  if (!VALID_KEYS.includes(key))\n    throw new Error(`Invalid key in loginButtonsSession: ${key}`);\n};\n\nconst KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nconst set = (key, value) => {\n  validateKey(key);\n  if (['errorMessage', 'infoMessage'].includes(key))\n    throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n  _set(key, value);\n};\n\nconst _set = (key, value) => Session.set(KEY_PREFIX + key, value);\n\nconst get = key => {\n  validateKey(key);\n  return Session.get(KEY_PREFIX + key);\n};\n\nconst closeDropdown = () => {\n  set('inSignupFlow', false);\n  set('inForgotPasswordFlow', false);\n  set('inChangePasswordFlow', false);\n  set('inMessageOnlyFlow', false);\n  set('dropdownVisible', false);\n  resetMessages();\n};\n\nconst infoMessage = message => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", message);\n  ensureMessageVisible();\n};\n\nconst errorMessage = message => {\n  _set(\"errorMessage\", message);\n  _set(\"infoMessage\", null);\n  ensureMessageVisible();\n};\n\n// is there a visible dialog that shows messages (info and error)\nconst isMessageDialogVisible = () => {\n  return get('resetPasswordToken') ||\n    get('enrollAccountToken') ||\n    get('justVerifiedEmail');\n};\n\n// ensure that somethings displaying a message (info or error) is\n// visible. If a dialog with messages is open, do nothing;\n// otherwise open the dropdown.\n//\n// Notably this doesn't matter when only displaying a single login\n// button since then we have an explicit message dialog\n// (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n// this case.\nconst ensureMessageVisible = () => {\n  if (!isMessageDialogVisible())\n    set(\"dropdownVisible\", true);\n};\n\nconst resetMessages = () => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", null);\n};\n\nconst configureService = name => {\n  if (Meteor.isCordova) {\n    set('configureOnDesktopVisible', true);\n  } else {\n    set('configureLoginServiceDialogVisible', true);\n    set('configureLoginServiceDialogServiceName', name);\n    set('configureLoginServiceDialogSaveDisabled', true);\n  }\n};\n\nAccounts._loginButtonsSession = {\n  set,\n  _set,\n  get,\n  closeDropdown,\n  infoMessage,\n  errorMessage,\n  isMessageDialogVisible,\n  ensureMessageVisible,\n  resetMessages,\n  configureService,\n};\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"af26dd936c5b24204bd262edc98cdd8b7b62e4c9"}
