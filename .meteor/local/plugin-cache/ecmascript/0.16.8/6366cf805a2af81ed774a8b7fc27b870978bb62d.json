{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"D:\\mergerware\\loan-management-app\\packages\\accounts-ui-unstyled\\login_buttons_dropdown.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_dropdown.js","filename":"D:\\mergerware\\loan-management-app\\packages\\accounts-ui-unstyled\\login_buttons_dropdown.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"D:\\mergerware\\loan-management-app","root":"D:\\mergerware\\loan-management-app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"D:\\mergerware\\loan-management-app\\packages\\accounts-ui-unstyled\\login_buttons_dropdown.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_dropdown.js"}},"code":"let passwordlessSignupFields, passwordSignupFields;\nmodule.link(\"./accounts_ui.js\", {\n  passwordlessSignupFields(v) {\n    passwordlessSignupFields = v;\n  },\n  passwordSignupFields(v) {\n    passwordSignupFields = v;\n  }\n}, 0);\nlet displayName, getLoginServices, hasPasswordService, hasPasswordlessService, validateUsername, validateEmail, validatePassword;\nmodule.link(\"./login_buttons.js\", {\n  displayName(v) {\n    displayName = v;\n  },\n  getLoginServices(v) {\n    getLoginServices = v;\n  },\n  hasPasswordService(v) {\n    hasPasswordService = v;\n  },\n  hasPasswordlessService(v) {\n    hasPasswordlessService = v;\n  },\n  validateUsername(v) {\n    validateUsername = v;\n  },\n  validateEmail(v) {\n    validateEmail = v;\n  },\n  validatePassword(v) {\n    validatePassword = v;\n  }\n}, 1);\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n//\n// helpers\n//\n\nconst elementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element) return null;else return element.value;\n};\nconst trimmedElementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element) return null;else return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesn't work on IE8;\n};\nconst loginOrSignup = () => {\n  if (loginButtonsSession.get('inSignupFlow')) signup();else login();\n};\nconst loginOrSignupPasswordless = () => {\n  loginButtonsSession.resetMessages();\n  if (loginButtonsSession.get('inPasswordlessConfirmation')) {\n    const token = trimmedElementValueById('login-code-passwordless');\n    Meteor.passwordlessLoginWithToken({\n      email: loginButtonsSession.get('passwordlessCodeEmail')\n    }, token, error => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('inPasswordlessConfirmation', false);\n        loginButtonsSession.set('passwordlessCodeEmail', null);\n      }\n    });\n    return;\n  }\n  const email = trimmedElementValueById('login-email-passwordless');\n  const username = trimmedElementValueById('login-username-passwordless');\n  if (!email.includes('@')) {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n    return;\n  }\n  if (Accounts._options.forbidClientAccountCreation) {\n    loginButtonsSession.errorMessage(\"Action not allowed\");\n    return;\n  }\n  if (username !== null && !validateUsername(username)) {\n    return;\n  }\n  Accounts.requestLoginTokenForUser({\n    selector: email,\n    userData: {\n      email,\n      username\n    }\n  }, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      var _result$selector;\n      loginButtonsSession.set('inPasswordlessConfirmation', true);\n      loginButtonsSession.set('inSignupFlow', false);\n      loginButtonsSession.set('passwordlessCodeEmail', result === null || result === void 0 ? void 0 : (_result$selector = result.selector) === null || _result$selector === void 0 ? void 0 : _result$selector.email);\n    }\n  });\n};\nconst login = () => {\n  loginButtonsSession.resetMessages();\n  const username = trimmedElementValueById('login-username');\n  const email = trimmedElementValueById('login-email');\n  const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  let loginSelector;\n  if (username !== null) {\n    if (!validateUsername(username)) return;else loginSelector = {\n      username: username\n    };\n  } else if (email !== null) {\n    if (!validateEmail(email)) return;else loginSelector = {\n      email: email\n    };\n  } else if (usernameOrEmail !== null) {\n    // XXX not sure how we should validate this. but this seems good enough (for now),\n    // since an email must have at least 3 characters anyways\n    if (!validateUsername(usernameOrEmail)) return;else loginSelector = usernameOrEmail;\n  } else {\n    throw new Error(\"Unexpected -- no element to use as a login user selector\");\n  }\n  Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\nconst signup = () => {\n  loginButtonsSession.resetMessages();\n  const options = {}; // to be passed to Accounts.createUser\n\n  const username = trimmedElementValueById('login-username');\n  if (username !== null) {\n    if (!validateUsername(username)) return;else options.username = username;\n  }\n  const email = trimmedElementValueById('login-email');\n  if (email !== null) {\n    if (!validateEmail(email)) return;else options.email = email;\n  }\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password)) return;else options.password = password;\n  if (!matchPasswordAgainIfPresent()) return;\n  Accounts.createUser(options, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\nconst forgotPassword = () => {\n  loginButtonsSession.resetMessages();\n  const email = trimmedElementValueById(\"forgot-password-email\");\n  if (email.includes('@')) {\n    Accounts.forgotPassword({\n      email: email\n    }, error => {\n      if (error) loginButtonsSession.errorMessage(error.reason || \"Unknown error\");else loginButtonsSession.infoMessage(\"Email sent\");\n    });\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n  }\n};\nconst changePassword = () => {\n  loginButtonsSession.resetMessages();\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const oldPassword = elementValueById('login-old-password');\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password)) return;\n  if (!matchPasswordAgainIfPresent()) return;\n  Accounts.changePassword(oldPassword, password, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inChangePasswordFlow', false);\n      loginButtonsSession.set('inMessageOnlyFlow', true);\n      loginButtonsSession.infoMessage(\"Password changed\");\n    }\n  });\n};\nconst matchPasswordAgainIfPresent = () => {\n  // notably not trimmed. a password could (?) start or end with a space\n  const passwordAgain = elementValueById('login-password-again');\n  if (passwordAgain !== null) {\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n    if (password !== passwordAgain) {\n      loginButtonsSession.errorMessage(\"Passwords don't match\");\n      return false;\n    }\n  }\n  return true;\n};\n\n// Utility containment function that works with both arrays and single values\nconst isInPasswordSignupFields = fieldOrFields => {\n  const signupFields = passwordSignupFields();\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce((prev, field) => prev && fieldOrFields.includes(field), true);\n  }\n  return signupFields.includes(fieldOrFields);\n};\nconst isInPasswordlessSignupFields = fieldOrFields => {\n  const signupFields = passwordlessSignupFields();\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce((prev, field) => prev && fieldOrFields.includes(field), true);\n  }\n  return signupFields.includes(fieldOrFields);\n};\n\n// events shared between loginButtonsLoggedOutDropdown and\n// loginButtonsLoggedInDropdown\nTemplate.loginButtons.events({\n  'click #login-name-link, click #login-sign-in-link': () => loginButtonsSession.set('dropdownVisible', true),\n  'click .login-close-text': loginButtonsSession.closeDropdown\n});\n\n//\n// loginButtonsLoggedInDropdown template and related\n//\n\nTemplate._loginButtonsLoggedInDropdown.events({\n  'click #login-buttons-open-change-password': () => {\n    loginButtonsSession.resetMessages();\n    loginButtonsSession.set('inChangePasswordFlow', true);\n  }\n});\nTemplate._loginButtonsLoggedInDropdown.helpers({\n  displayName,\n  inChangePasswordFlow: () => loginButtonsSession.get('inChangePasswordFlow'),\n  inMessageOnlyFlow: () => loginButtonsSession.get('inMessageOnlyFlow'),\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible')\n});\nTemplate._loginButtonsLoggedInDropdownActions.helpers({\n  allowChangingPassword: () => {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    if (!Package['accounts-password']) return false;\n    const user = Meteor.user();\n    return user.username || user.emails && user.emails[0] && user.emails[0].address;\n  }\n});\n\n//\n// loginButtonsLoggedOutDropdown template and related\n//\n\nTemplate._loginButtonsLoggedOutDropdown.events({\n  'click #login-buttons-password': event => {\n    event.preventDefault();\n    loginOrSignup();\n  },\n  'click #login-buttons-passwordless': event => {\n    event.preventDefault();\n    loginOrSignupPasswordless();\n  },\n  'keypress #forgot-password-email': event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      forgotPassword();\n    }\n  },\n  'click #login-buttons-forgot-password': forgotPassword,\n  'click #signup-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n    loginButtonsSession.set('inSignupFlow', true);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (username !== null) document.getElementById('login-username').value = username;else if (email !== null) document.getElementById('login-email').value = email;else if (usernameOrEmail !== null) if (!usernameOrEmail.includes('@')) document.getElementById('login-username').value = usernameOrEmail;else document.getElementById('login-email').value = usernameOrEmail;\n    if (password !== null) document.getElementById('login-password').value = password;\n\n    // Force redrawing the `login-dropdown-list` element because of\n    // a bizarre Chrome bug in which part of the DIV is not redrawn\n    // in case you had tried to unsuccessfully log in before\n    // switching to the signup form.\n    //\n    // Found tip on how to force a redraw on\n    // http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes/3485654#3485654\n    const redraw = document.getElementById('login-dropdown-list');\n    redraw.style.display = 'none';\n    redraw.offsetHeight; // it seems that this line does nothing but is necessary for the redraw to work\n    redraw.style.display = 'block';\n  },\n  'click #forgot-password-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', true);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (email !== null) document.getElementById('forgot-password-email').value = email;else if (usernameOrEmail !== null) if (usernameOrEmail.includes('@')) document.getElementById('forgot-password-email').value = usernameOrEmail;\n  },\n  'click #resend-passwordless-code': () => {\n    loginButtonsSession.set('inPasswordlessConfirmation', false);\n    loginButtonsSession.set('passwordlessCodeEmail', null);\n  },\n  'click #back-to-login-link': () => {\n    loginButtonsSession.resetMessages();\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email') || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n    if (document.getElementById('login-username') && username !== null) document.getElementById('login-username').value = username;\n    if (document.getElementById('login-email') && email !== null) document.getElementById('login-email').value = email;\n    const usernameOrEmailInput = document.getElementById('login-username-or-email');\n    if (usernameOrEmailInput) {\n      if (email !== null) usernameOrEmailInput.value = email;\n      if (username !== null) usernameOrEmailInput.value = username;\n    }\n    if (password !== null) document.getElementById('login-password').value = password;\n  }\n});\nTemplate._loginButtonsLoggedOutDropdown.helpers({\n  // additional classes that can be helpful in styling the dropdown\n  additionalClasses: () => {\n    if (!hasPasswordService() || !hasPasswordlessService()) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  },\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n  hasPasswordService,\n  hasPasswordlessService\n});\n\n// return all login services, with password last\nTemplate._loginButtonsLoggedOutAllServices.helpers({\n  services: getLoginServices,\n  isPasswordService: function () {\n    return this.name === 'password';\n  },\n  isPasswordlessService: function () {\n    return this.name === 'passwordless';\n  },\n  hasOtherServices: () => {\n    let count = 0;\n    if (hasPasswordlessService()) count++;\n    if (hasPasswordService()) count++;\n    return getLoginServices().length > count;\n  },\n  displaySeparatorForPasswordless: () => {\n    return hasPasswordService() || getLoginServices().length > 1;\n  },\n  isInternalService: function () {\n    return this.name === 'password' || this.name === 'passwordless';\n  },\n  hasInternalService: () => hasPasswordService() || hasPasswordlessService(),\n  hasPasswordService,\n  hasPasswordlessService\n});\nTemplate._loginButtonsLoggedOutPasswordlessService.helpers({\n  fields: () => [{\n    fieldName: 'email-passwordless',\n    fieldLabel: 'Email',\n    autocomplete: 'email',\n    inputType: 'email',\n    visible: () => !loginButtonsSession.get('inPasswordlessConfirmation')\n  }, {\n    fieldName: 'username-passwordless',\n    fieldLabel: 'Username',\n    autocomplete: 'username',\n    inputType: 'text',\n    visible: () => isInPasswordlessSignupFields('USERNAME_AND_EMAIL') && loginButtonsSession.get('inSignupFlow')\n  }, {\n    fieldName: 'code-passwordless',\n    fieldLabel: 'Code',\n    inputType: 'text',\n    visible: () => loginButtonsSession.get('inPasswordlessConfirmation')\n  }],\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n  inPasswordlessConfirmation: () => loginButtonsSession.get('inPasswordlessConfirmation'),\n  inLoginFlow: () => !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow'),\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation\n});\nTemplate._loginButtonsLoggedOutPasswordService.helpers({\n  fields: () => {\n    const loginFields = [{\n      fieldName: 'username-or-email',\n      fieldLabel: 'Username or Email',\n      autocomplete: 'username email',\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"])\n    }, {\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      visible: () => isInPasswordSignupFields(\"USERNAME_ONLY\")\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: () => isInPasswordSignupFields(\"EMAIL_ONLY\")\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'Password',\n      inputType: 'password',\n      autocomplete: 'current-password',\n      visible: () => true\n    }];\n    const signupFields = [{\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"])\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email (optional)',\n      inputType: 'email',\n      autocomplete: 'email',\n      visible: () => isInPasswordSignupFields(\"USERNAME_AND_OPTIONAL_EMAIL\")\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'Password',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      visible: () => true\n    }, {\n      fieldName: 'password-again',\n      fieldLabel: 'Password (again)',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      // No need to make users double-enter their password if\n      // they'll necessarily have an email set, since they can use\n      // the \"forgot password\" flow.\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }];\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  },\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n  inLoginFlow: () => !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow'),\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n  showForgotPasswordLink: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"])\n});\nTemplate._loginButtonsFormField.helpers({\n  inputType: function () {\n    return this.inputType || \"text\";\n  }\n});\n\n//\n// loginButtonsChangePassword template\n//\n\nTemplate._loginButtonsChangePassword.events({\n  'keypress #login-old-password, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13) changePassword();\n  },\n  'click #login-buttons-do-change-password': changePassword\n});\nTemplate._loginButtonsChangePassword.helpers({\n  fields: () => {\n    const {\n      username,\n      emails\n    } = Meteor.user();\n    let email;\n    if (emails) {\n      email = emails[0].address;\n    }\n    return [\n    // The username and email fields are included here to address an\n    // accessibility warning in Chrome, but the fields don't actually display.\n    // The warning states that there should be an optionally hidden\n    // username/email field on password forms.\n    // XXX I think we should not use a CSS class here because this is the\n    // `unstyled` package. So instead we apply an inline style.\n    {\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      fieldStyle: 'display: none;',\n      fieldValue: username,\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }, {\n      fieldName: 'email',\n      fieldLabel: 'Email',\n      inputType: 'email',\n      autocomplete: 'email',\n      fieldStyle: 'display: none;',\n      fieldValue: email,\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"])\n    }, {\n      fieldName: 'old-password',\n      fieldLabel: 'Current Password',\n      inputType: 'password',\n      autocomplete: 'current-password',\n      visible: () => true\n    }, {\n      fieldName: 'password',\n      fieldLabel: 'New Password',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      visible: () => true\n    }, {\n      fieldName: 'password-again',\n      fieldLabel: 'New Password (again)',\n      inputType: 'password',\n      autocomplete: 'new-password',\n      // No need to make users double-enter their password if\n      // they'll necessarily have an email set, since they can use\n      // the \"forgot password\" flow.\n      visible: () => isInPasswordSignupFields([\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"])\n    }];\n  }\n});","map":{"version":3,"names":["passwordlessSignupFields","passwordSignupFields","module","link","v","displayName","getLoginServices","hasPasswordService","hasPasswordlessService","validateUsername","validateEmail","validatePassword","loginButtonsSession","Accounts","_loginButtonsSession","elementValueById","id","element","document","getElementById","value","trimmedElementValueById","replace","loginOrSignup","get","signup","login","loginOrSignupPasswordless","resetMessages","token","Meteor","passwordlessLoginWithToken","email","error","errorMessage","reason","set","username","includes","_options","forbidClientAccountCreation","requestLoginTokenForUser","selector","userData","result","_result$selector","usernameOrEmail","password","loginSelector","Error","loginWithPassword","closeDropdown","options","matchPasswordAgainIfPresent","createUser","forgotPassword","infoMessage","changePassword","oldPassword","passwordAgain","isInPasswordSignupFields","fieldOrFields","signupFields","Array","isArray","reduce","prev","field","isInPasswordlessSignupFields","Template","loginButtons","events","click #login-name-link, click #login-sign-in-link","_loginButtonsLoggedInDropdown","click #login-buttons-open-change-password","helpers","inChangePasswordFlow","inMessageOnlyFlow","dropdownVisible","_loginButtonsLoggedInDropdownActions","allowChangingPassword","Package","user","emails","address","_loginButtonsLoggedOutDropdown","event","preventDefault","keyCode","click #signup-link","Tracker","flush","redraw","style","display","offsetHeight","click #forgot-password-link","click #resend-passwordless-code","click #back-to-login-link","usernameOrEmailInput","additionalClasses","_loginButtonsLoggedOutAllServices","services","isPasswordService","name","isPasswordlessService","hasOtherServices","count","length","displaySeparatorForPasswordless","isInternalService","hasInternalService","_loginButtonsLoggedOutPasswordlessService","fields","fieldName","fieldLabel","autocomplete","inputType","visible","inForgotPasswordFlow","inPasswordlessConfirmation","inLoginFlow","inSignupFlow","showCreateAccountLink","_loginButtonsLoggedOutPasswordService","loginFields","showForgotPasswordLink","_loginButtonsFormField","_loginButtonsChangePassword","fieldStyle","fieldValue"],"sources":["packages/accounts-ui-unstyled/login_buttons_dropdown.js"],"sourcesContent":["import {passwordlessSignupFields, passwordSignupFields} from './accounts_ui.js';\nimport {\n  displayName,\n  getLoginServices,\n  hasPasswordService,\n  hasPasswordlessService,\n  validateUsername,\n  validateEmail,\n  validatePassword,\n} from './login_buttons.js';\n\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n//\n// helpers\n//\n\nconst elementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element)\n    return null;\n  else\n    return element.value;\n};\n\nconst trimmedElementValueById = id => {\n  const element = document.getElementById(id);\n  if (!element)\n    return null;\n  else\n    return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim() doesn't work on IE8;\n};\n\nconst loginOrSignup = () => {\n  if (loginButtonsSession.get('inSignupFlow'))\n    signup();\n  else\n    login();\n};\n\nconst loginOrSignupPasswordless = () => {\n  loginButtonsSession.resetMessages();\n\n  if (loginButtonsSession.get('inPasswordlessConfirmation')) {\n    const token = trimmedElementValueById('login-code-passwordless');\n    Meteor.passwordlessLoginWithToken({ email: loginButtonsSession.get('passwordlessCodeEmail') }, token, (error) => {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.set('inPasswordlessConfirmation', false);\n        loginButtonsSession.set('passwordlessCodeEmail', null);\n      }\n    });\n\n    return;\n  }\n\n  const email = trimmedElementValueById('login-email-passwordless');\n  const username = trimmedElementValueById('login-username-passwordless');\n\n  if (!email.includes('@')) {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n    return;\n  }\n  if (Accounts._options.forbidClientAccountCreation) {\n    loginButtonsSession.errorMessage(\"Action not allowed\");\n    return;\n  }\n\n  if (username !== null && !validateUsername(username)) {\n    return;\n  }\n\n  Accounts.requestLoginTokenForUser({ selector: email, userData: { email, username } }, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inPasswordlessConfirmation', true);\n      loginButtonsSession.set('inSignupFlow', false);\n      loginButtonsSession.set('passwordlessCodeEmail', result?.selector?.email);\n    }\n  });\n}\n\nconst login = () => {\n  loginButtonsSession.resetMessages();\n\n  const username = trimmedElementValueById('login-username');\n  const email = trimmedElementValueById('login-email');\n  const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n\n  let loginSelector;\n  if (username !== null) {\n    if (!validateUsername(username))\n      return;\n    else\n      loginSelector = {username: username};\n  } else if (email !== null) {\n    if (!validateEmail(email))\n      return;\n    else\n      loginSelector = {email: email};\n  } else if (usernameOrEmail !== null) {\n    // XXX not sure how we should validate this. but this seems good enough (for now),\n    // since an email must have at least 3 characters anyways\n    if (!validateUsername(usernameOrEmail))\n      return;\n    else\n      loginSelector = usernameOrEmail;\n  } else {\n    throw new Error(\"Unexpected -- no element to use as a login user selector\");\n  }\n\n  Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst signup = () => {\n  loginButtonsSession.resetMessages();\n\n  const options = {}; // to be passed to Accounts.createUser\n\n  const username = trimmedElementValueById('login-username');\n  if (username !== null) {\n    if (!validateUsername(username))\n      return;\n    else\n      options.username = username;\n  }\n\n  const email = trimmedElementValueById('login-email');\n  if (email !== null) {\n    if (!validateEmail(email))\n      return;\n    else\n      options.email = email;\n  }\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password))\n    return;\n  else\n    options.password = password;\n\n  if (!matchPasswordAgainIfPresent())\n    return;\n\n  Accounts.createUser(options, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n};\n\nconst forgotPassword = () => {\n  loginButtonsSession.resetMessages();\n\n  const email = trimmedElementValueById(\"forgot-password-email\");\n  if (email.includes('@')) {\n    Accounts.forgotPassword({email: email}, error => {\n      if (error)\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      else\n        loginButtonsSession.infoMessage(\"Email sent\");\n    });\n  } else {\n    loginButtonsSession.errorMessage(\"Invalid email\");\n  }\n};\n\nconst changePassword = () => {\n  loginButtonsSession.resetMessages();\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const oldPassword = elementValueById('login-old-password');\n\n  // notably not trimmed. a password could (?) start or end with a space\n  const password = elementValueById('login-password');\n  if (!validatePassword(password))\n    return;\n\n  if (!matchPasswordAgainIfPresent())\n    return;\n\n  Accounts.changePassword(oldPassword, password, error => {\n    if (error) {\n      loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n    } else {\n      loginButtonsSession.set('inChangePasswordFlow', false);\n      loginButtonsSession.set('inMessageOnlyFlow', true);\n      loginButtonsSession.infoMessage(\"Password changed\");\n    }\n  });\n};\n\nconst matchPasswordAgainIfPresent = () => {\n  // notably not trimmed. a password could (?) start or end with a space\n  const passwordAgain = elementValueById('login-password-again');\n  if (passwordAgain !== null) {\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n    if (password !== passwordAgain) {\n      loginButtonsSession.errorMessage(\"Passwords don't match\");\n      return false;\n    }\n  }\n  return true;\n};\n\n// Utility containment function that works with both arrays and single values\nconst isInPasswordSignupFields = (fieldOrFields) => {\n  const signupFields = passwordSignupFields();\n\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(\n      (prev, field) => prev && fieldOrFields.includes(field),\n      true,\n    )\n  }\n\n  return signupFields.includes(fieldOrFields);\n};\n\nconst isInPasswordlessSignupFields = (fieldOrFields) => {\n  const signupFields = passwordlessSignupFields();\n\n  if (Array.isArray(fieldOrFields)) {\n    return signupFields.reduce(\n      (prev, field) => prev && fieldOrFields.includes(field),\n      true,\n    )\n  }\n\n  return signupFields.includes(fieldOrFields);\n}\n\n// events shared between loginButtonsLoggedOutDropdown and\n// loginButtonsLoggedInDropdown\nTemplate.loginButtons.events({\n  'click #login-name-link, click #login-sign-in-link': () =>\n    loginButtonsSession.set('dropdownVisible', true),\n  'click .login-close-text': loginButtonsSession.closeDropdown,\n});\n\n\n//\n// loginButtonsLoggedInDropdown template and related\n//\n\nTemplate._loginButtonsLoggedInDropdown.events({\n  'click #login-buttons-open-change-password': () => {\n    loginButtonsSession.resetMessages();\n    loginButtonsSession.set('inChangePasswordFlow', true);\n  }\n});\n\nTemplate._loginButtonsLoggedInDropdown.helpers({\n  displayName,\n  inChangePasswordFlow: () => loginButtonsSession.get('inChangePasswordFlow'),\n  inMessageOnlyFlow: () => loginButtonsSession.get('inMessageOnlyFlow'),\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n});\n\nTemplate._loginButtonsLoggedInDropdownActions.helpers({\n  allowChangingPassword: () => {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    if (!Package['accounts-password']) return false;\n    const user = Meteor.user();\n    return user.username || (user.emails && user.emails[0] && user.emails[0].address);\n  }\n});\n\n\n//\n// loginButtonsLoggedOutDropdown template and related\n//\n\nTemplate._loginButtonsLoggedOutDropdown.events({\n  'click #login-buttons-password': event => {\n    event.preventDefault();\n    loginOrSignup();\n  },\n\n  'click #login-buttons-passwordless': event => {\n    event.preventDefault();\n    loginOrSignupPasswordless();\n  },\n\n  'keypress #forgot-password-email': event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      forgotPassword();\n    }\n  },\n\n  'click #login-buttons-forgot-password': forgotPassword,\n\n  'click #signup-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    loginButtonsSession.set('inSignupFlow', true);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (username !== null)\n      document.getElementById('login-username').value = username;\n    else if (email !== null)\n      document.getElementById('login-email').value = email;\n    else if (usernameOrEmail !== null)\n      if (!usernameOrEmail.includes('@'))\n        document.getElementById('login-username').value = usernameOrEmail;\n    else\n      document.getElementById('login-email').value = usernameOrEmail;\n\n    if (password !== null)\n      document.getElementById('login-password').value = password;\n\n    // Force redrawing the `login-dropdown-list` element because of\n    // a bizarre Chrome bug in which part of the DIV is not redrawn\n    // in case you had tried to unsuccessfully log in before\n    // switching to the signup form.\n    //\n    // Found tip on how to force a redraw on\n    // http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes/3485654#3485654\n    const redraw = document.getElementById('login-dropdown-list');\n    redraw.style.display = 'none';\n    redraw.offsetHeight; // it seems that this line does nothing but is necessary for the redraw to work\n    redraw.style.display = 'block';\n  },\n  'click #forgot-password-link': () => {\n    loginButtonsSession.resetMessages();\n\n    // store values of fields before swtiching to the signup form\n    const email = trimmedElementValueById('login-email');\n    const usernameOrEmail = trimmedElementValueById('login-username-or-email');\n\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', true);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    // update new fields with appropriate defaults\n    if (email !== null)\n      document.getElementById('forgot-password-email').value = email;\n    else if (usernameOrEmail !== null)\n      if (usernameOrEmail.includes('@'))\n        document.getElementById('forgot-password-email').value = usernameOrEmail;\n\n  },\n  'click #resend-passwordless-code': () => {\n    loginButtonsSession.set('inPasswordlessConfirmation', false);\n    loginButtonsSession.set('passwordlessCodeEmail', null);\n  },\n  'click #back-to-login-link': () => {\n    loginButtonsSession.resetMessages();\n\n    const username = trimmedElementValueById('login-username');\n    const email = trimmedElementValueById('login-email')\n          || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n    // notably not trimmed. a password could (?) start or end with a space\n    const password = elementValueById('login-password');\n\n    loginButtonsSession.set('inSignupFlow', false);\n    loginButtonsSession.set('inForgotPasswordFlow', false);\n    // force the ui to update so that we have the approprate fields to fill in\n    Tracker.flush();\n\n    if (document.getElementById('login-username') && username !== null)\n      document.getElementById('login-username').value = username;\n    if (document.getElementById('login-email') && email !== null)\n      document.getElementById('login-email').value = email;\n\n    const usernameOrEmailInput = document.getElementById('login-username-or-email');\n    if (usernameOrEmailInput) {\n      if (email !== null)\n        usernameOrEmailInput.value = email;\n      if (username !== null)\n        usernameOrEmailInput.value = username;\n    }\n\n    if (password !== null)\n      document.getElementById('login-password').value = password;\n  },\n});\n\nTemplate._loginButtonsLoggedOutDropdown.helpers({\n  // additional classes that can be helpful in styling the dropdown\n  additionalClasses: () => {\n    if (!hasPasswordService() || !hasPasswordlessService()) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  },\n\n  dropdownVisible: () => loginButtonsSession.get('dropdownVisible'),\n\n  hasPasswordService,\n  hasPasswordlessService,\n});\n\n// return all login services, with password last\nTemplate._loginButtonsLoggedOutAllServices.helpers({\n  services: getLoginServices,\n  isPasswordService: function () {\n    return this.name === 'password';\n  },\n  isPasswordlessService: function () {\n    return this.name === 'passwordless';\n  },\n  hasOtherServices: () => {\n    let count = 0;\n    if (hasPasswordlessService()) count++;\n    if (hasPasswordService()) count++;\n    return getLoginServices().length > count;\n  },\n  displaySeparatorForPasswordless: () => {\n    return hasPasswordService() || getLoginServices().length > 1;\n  },\n  isInternalService: function () {\n    return this.name === 'password' || this.name === 'passwordless'\n  },\n  hasInternalService: () => hasPasswordService() || hasPasswordlessService(),\n  hasPasswordService,\n  hasPasswordlessService,\n});\n\nTemplate._loginButtonsLoggedOutPasswordlessService.helpers({\n  fields: () => [\n    {\n      fieldName: 'email-passwordless',\n      fieldLabel: 'Email',\n      autocomplete: 'email',\n      inputType: 'email',\n      visible: () => !loginButtonsSession.get('inPasswordlessConfirmation'),\n    },\n    {\n      fieldName: 'username-passwordless',\n      fieldLabel: 'Username',\n      autocomplete: 'username',\n      inputType: 'text',\n      visible: () => isInPasswordlessSignupFields('USERNAME_AND_EMAIL') && loginButtonsSession.get('inSignupFlow')\n    },\n    {\n      fieldName: 'code-passwordless',\n      fieldLabel: 'Code',\n      inputType: 'text',\n      visible: () => loginButtonsSession.get('inPasswordlessConfirmation')\n    }\n  ],\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n  inPasswordlessConfirmation: () => loginButtonsSession.get('inPasswordlessConfirmation'),\n\n  inLoginFlow: () =>\n    !loginButtonsSession.get('inSignupFlow') &&\n    !loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n})\n\nTemplate._loginButtonsLoggedOutPasswordService.helpers({\n  fields: () => {\n    const loginFields = [\n      {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\n        autocomplete: 'username email',\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"]\n        ),\n      },\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        visible: () => isInPasswordSignupFields(\"USERNAME_ONLY\"),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\"EMAIL_ONLY\"),\n      },\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n        autocomplete: 'current-password',\n        visible: () => true,\n      }\n    ];\n\n    const signupFields = [\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        visible: () => isInPasswordSignupFields([\n          \"USERNAME_AND_EMAIL\",\n          \"USERNAME_AND_OPTIONAL_EMAIL\",\n          \"USERNAME_ONLY\",\n        ]),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]\n        ),\n      },\n      {fieldName: 'email', fieldLabel: 'Email (optional)', inputType: 'email',\n        autocomplete: 'email',\n        visible: () => isInPasswordSignupFields(\"USERNAME_AND_OPTIONAL_EMAIL\"),\n      },\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n        autocomplete: 'new-password',\n        visible: () => true,\n      },\n      {fieldName: 'password-again', fieldLabel: 'Password (again)',\n       inputType: 'password', autocomplete: 'new-password',\n        // No need to make users double-enter their password if\n        // they'll necessarily have an email set, since they can use\n        // the \"forgot password\" flow.\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]\n        ),\n      },\n    ];\n\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  },\n\n  inForgotPasswordFlow: () => loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inLoginFlow: () =>\n    !loginButtonsSession.get('inSignupFlow') &&\n    !loginButtonsSession.get('inForgotPasswordFlow'),\n\n  inSignupFlow: () => loginButtonsSession.get('inSignupFlow'),\n\n  showCreateAccountLink: () => !Accounts._options.forbidClientAccountCreation,\n\n  showForgotPasswordLink: () => isInPasswordSignupFields(\n    [\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"]\n  ),\n});\n\nTemplate._loginButtonsFormField.helpers({\n  inputType: function () {\n    return this.inputType || \"text\"\n  }\n});\n\n\n//\n// loginButtonsChangePassword template\n//\n\nTemplate._loginButtonsChangePassword.events({\n  'keypress #login-old-password, keypress #login-password, keypress #login-password-again': event => {\n    if (event.keyCode === 13)\n      changePassword();\n  },\n  'click #login-buttons-do-change-password': changePassword,\n});\n\nTemplate._loginButtonsChangePassword.helpers({\n  fields: () => {\n    const { username, emails } = Meteor.user()\n    let email;\n    if (emails) {\n      email = emails[0].address;\n    }\n    return [\n      // The username and email fields are included here to address an\n      // accessibility warning in Chrome, but the fields don't actually display.\n      // The warning states that there should be an optionally hidden\n      // username/email field on password forms.\n      // XXX I think we should not use a CSS class here because this is the\n      // `unstyled` package. So instead we apply an inline style.\n      {fieldName: 'username', fieldLabel: 'Username', autocomplete: 'username',\n        fieldStyle: 'display: none;', fieldValue: username,\n        visible: () => isInPasswordSignupFields([\n          \"USERNAME_AND_EMAIL\",\n          \"USERNAME_AND_OPTIONAL_EMAIL\",\n          \"USERNAME_ONLY\",\n        ]),\n      },\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n        autocomplete: 'email', fieldStyle: 'display: none;', fieldValue: email,\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"]\n        ),\n      },\n      {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\n        autocomplete: 'current-password', visible: () => true,\n      },\n      {fieldName: 'password', fieldLabel: 'New Password', inputType: 'password',\n        autocomplete: 'new-password', visible: () => true,\n      },\n      {fieldName: 'password-again', fieldLabel: 'New Password (again)',\n        inputType: 'password', autocomplete: 'new-password',\n        // No need to make users double-enter their password if\n        // they'll necessarily have an email set, since they can use\n        // the \"forgot password\" flow.\n        visible: () => isInPasswordSignupFields(\n          [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"]\n        ),\n      },\n    ];\n  }\n});\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"6366cf805a2af81ed774a8b7fc27b870978bb62d"}
